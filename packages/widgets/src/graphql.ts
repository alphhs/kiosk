export type Maybe<T> = T;
export type InputMaybe<T> = T;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
export type MakeEmpty<
  T extends { [key: string]: unknown },
  K extends keyof T,
> = { [_ in K]?: never };
export type Incremental<T> =
  | T
  | {
      [P in keyof T]?: P extends " $fragmentName" | "__typename" ? T[P] : never;
    };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string };
  String: { input: string; output: string };
  Boolean: { input: boolean; output: boolean };
  Int: { input: number; output: number };
  Float: { input: number; output: number };
  BigInt: { input: any; output: any };
  ISO8601Date: { input: any; output: any };
  ISO8601DateTime: { input: any; output: any };
  JSON: { input: any; output: any };
  Upload: { input: any; output: any };
};

export type AccountsReceivablePaymentSource = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "AccountsReceivablePaymentSource";
    businessClient?: Maybe<BusinessClient>;
    canI: Scalars["Boolean"]["output"];
    clientsStore?: Maybe<ClientsStore>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    paymentMethod?: Maybe<PaymentMethod>;
    supplierStockLocation?: Maybe<StockLocation>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
  };

export type AccountsReceivablePaymentSourceCanIArgs = {
  action: CanIAction;
};

export type ActionInterface = {
  deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  position?: Maybe<Scalars["Int"]["output"]>;
  preferences?: Maybe<Scalars["JSON"]["output"]>;
  promotion: Promotion;
  promotionId: Scalars["ID"]["output"];
  type?: Maybe<Scalars["String"]["output"]>;
};

export type AddFeedbackInput = {
  body: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  firstName?: InputMaybe<Scalars["String"]["input"]>;
  image?: InputMaybe<Scalars["Upload"]["input"]>;
  orderId?: InputMaybe<Scalars["ID"]["input"]>;
  phone?: InputMaybe<Scalars["String"]["input"]>;
  topicId: Scalars["ID"]["input"];
};

export type AddFeedbackTopicInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  orderRequired?: InputMaybe<Scalars["Boolean"]["input"]>;
  parentId?: InputMaybe<Scalars["ID"]["input"]>;
  position?: InputMaybe<Scalars["Int"]["input"]>;
  positive?: InputMaybe<Scalars["Boolean"]["input"]>;
  title: Scalars["String"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type Address = BaseModelInterface &
  Node & {
    __typename?: "Address";
    address1?: Maybe<Scalars["String"]["output"]>;
    address2?: Maybe<Scalars["String"]["output"]>;
    alias?: Maybe<Scalars["String"]["output"]>;
    alternativePhone?: Maybe<Scalars["String"]["output"]>;
    apartment?: Maybe<Scalars["String"]["output"]>;
    audits: AuditConnection;
    birthday?: Maybe<Scalars["ISO8601Date"]["output"]>;
    branches: Array<Branch>;
    canI: Scalars["Boolean"]["output"];
    cdq?: Maybe<Array<Scalars["ID"]["output"]>>;
    city?: Maybe<Scalars["String"]["output"]>;
    company?: Maybe<Scalars["String"]["output"]>;
    consumerNo?: Maybe<Scalars["String"]["output"]>;
    coordinate?: Maybe<Scalars["JSON"]["output"]>;
    country?: Maybe<Country>;
    countryId?: Maybe<Scalars["ID"]["output"]>;
    countryName?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    district?: Maybe<District>;
    districtId?: Maybe<Scalars["ID"]["output"]>;
    districtName?: Maybe<Scalars["String"]["output"]>;
    entrance?: Maybe<Scalars["String"]["output"]>;
    firstname?: Maybe<Scalars["String"]["output"]>;
    floor?: Maybe<Scalars["String"]["output"]>;
    gender?: Maybe<Scalars["String"]["output"]>;
    geoPoint?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    house?: Maybe<Scalars["String"]["output"]>;
    houseKorpus?: Maybe<Scalars["String"]["output"]>;
    id: Scalars["ID"]["output"];
    intercom?: Maybe<Scalars["String"]["output"]>;
    isBillAddress?: Maybe<Scalars["Boolean"]["output"]>;
    isCompany?: Maybe<Scalars["Boolean"]["output"]>;
    isPup?: Maybe<Scalars["Boolean"]["output"]>;
    lastname?: Maybe<Scalars["String"]["output"]>;
    latitude?: Maybe<Scalars["String"]["output"]>;
    longitude?: Maybe<Scalars["String"]["output"]>;
    mnQuarterId?: Maybe<Scalars["ID"]["output"]>;
    nationality?: Maybe<Scalars["String"]["output"]>;
    note?: Maybe<Scalars["String"]["output"]>;
    owningType?: Maybe<Scalars["String"]["output"]>;
    passportNumber?: Maybe<Scalars["String"]["output"]>;
    phone?: Maybe<Scalars["String"]["output"]>;
    pinFl?: Maybe<Scalars["String"]["output"]>;
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    quarter?: Maybe<District>;
    quarterName?: Maybe<Scalars["String"]["output"]>;
    state?: Maybe<State>;
    stateId?: Maybe<Scalars["ID"]["output"]>;
    stateName?: Maybe<Scalars["String"]["output"]>;
    tin?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    what3words?: Maybe<Scalars["String"]["output"]>;
    year?: Maybe<Scalars["String"]["output"]>;
    zipcode?: Maybe<Scalars["String"]["output"]>;
  };

export type AddressAuditsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type AddressCanIArgs = {
  action: CanIAction;
};

export type AddressConnection = {
  __typename?: "AddressConnection";
  edges: Array<AddressEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Address>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type AddressConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type AddressConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type AddressEdge = {
  __typename?: "AddressEdge";
  cursor: Scalars["String"]["output"];
  node: Address;
};

export type AddressFilter = {
  address1?: InputMaybe<StringFilter>;
  address2?: InputMaybe<StringFilter>;
  countryId?: InputMaybe<IdFilter>;
  createdAt?: InputMaybe<DateFilter>;
  district?: InputMaybe<DistrictFilter>;
  districtId?: InputMaybe<IdFilter>;
  firstname?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  isCompany?: InputMaybe<BoolFilter>;
  lastname?: InputMaybe<StringFilter>;
  mnQuarter?: InputMaybe<QuarterFilter>;
  mnQuarterId?: InputMaybe<IdFilter>;
  phone?: InputMaybe<StringFilter>;
  state?: InputMaybe<StateFilter>;
  stateId?: InputMaybe<IdFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type AddressInput = {
  address1?: InputMaybe<Scalars["String"]["input"]>;
  address2?: InputMaybe<Scalars["String"]["input"]>;
  alias?: InputMaybe<Scalars["String"]["input"]>;
  alternativePhone?: InputMaybe<Scalars["String"]["input"]>;
  apartment?: InputMaybe<Scalars["String"]["input"]>;
  cdq?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  company?: InputMaybe<Scalars["String"]["input"]>;
  consumerNo?: InputMaybe<Scalars["String"]["input"]>;
  coordinate?: InputMaybe<Scalars["JSON"]["input"]>;
  districtId?: InputMaybe<Scalars["ID"]["input"]>;
  entrance?: InputMaybe<Scalars["String"]["input"]>;
  firstname?: InputMaybe<Scalars["String"]["input"]>;
  floor?: InputMaybe<Scalars["String"]["input"]>;
  house?: InputMaybe<Scalars["String"]["input"]>;
  houseKorpus?: InputMaybe<Scalars["String"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  intercom?: InputMaybe<Scalars["String"]["input"]>;
  isBillAddress?: InputMaybe<Scalars["Boolean"]["input"]>;
  isCompany?: InputMaybe<Scalars["Boolean"]["input"]>;
  isPup?: InputMaybe<Scalars["Boolean"]["input"]>;
  lastname?: InputMaybe<Scalars["String"]["input"]>;
  latitude?: InputMaybe<Scalars["String"]["input"]>;
  longitude?: InputMaybe<Scalars["String"]["input"]>;
  mnQuarterId?: InputMaybe<Scalars["ID"]["input"]>;
  nationality?: InputMaybe<Scalars["String"]["input"]>;
  note?: InputMaybe<Scalars["String"]["input"]>;
  owningType?: InputMaybe<Scalars["String"]["input"]>;
  passportNumber?: InputMaybe<Scalars["String"]["input"]>;
  phone?: InputMaybe<Scalars["String"]["input"]>;
  pinFl?: InputMaybe<Scalars["String"]["input"]>;
  preferences?: InputMaybe<Scalars["JSON"]["input"]>;
  stateId?: InputMaybe<Scalars["ID"]["input"]>;
  tin?: InputMaybe<Scalars["String"]["input"]>;
  what3words?: InputMaybe<Scalars["String"]["input"]>;
  year?: InputMaybe<Scalars["String"]["input"]>;
};

export type Addressable = District | Quarter | State;

export enum Adjustable {
  LineItem = "lineItem",
  Order = "order",
  Shipment = "shipment",
}

export type AdjustableReport = LineItem | Order | Shipment;

export type Adjustment = BaseModelInterface &
  Node & {
    __typename?: "Adjustment";
    adjustableId?: Maybe<Scalars["ID"]["output"]>;
    adjustableLabel?: Maybe<Scalars["String"]["output"]>;
    adjustableType?: Maybe<Scalars["String"]["output"]>;
    amount: Scalars["Float"]["output"];
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    eligible?: Maybe<Scalars["Boolean"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    included?: Maybe<Scalars["Boolean"]["output"]>;
    label: Scalars["String"]["output"];
    mandatory?: Maybe<Scalars["Boolean"]["output"]>;
    order: Order;
    source?: Maybe<Node>;
    sourceId?: Maybe<Scalars["ID"]["output"]>;
    sourcePromotionId?: Maybe<Scalars["ID"]["output"]>;
    sourceType?: Maybe<Scalars["String"]["output"]>;
    state?: Maybe<Scalars["String"]["output"]>;
    taxAmount: Scalars["Float"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type AdjustmentCanIArgs = {
  action: CanIAction;
};

export type AdjustmentReport = BaseModelInterface &
  Node & {
    __typename?: "AdjustmentReport";
    adjustable?: Maybe<AdjustableReport>;
    adjustableId?: Maybe<Scalars["ID"]["output"]>;
    adjustableLabel?: Maybe<Scalars["String"]["output"]>;
    adjustableType?: Maybe<Scalars["String"]["output"]>;
    adjustmentSource?: Maybe<AdjustmentSourceReport>;
    amount: Scalars["Float"]["output"];
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    eligible?: Maybe<Scalars["Boolean"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    included?: Maybe<Scalars["Boolean"]["output"]>;
    label: Scalars["String"]["output"];
    mandatory?: Maybe<Scalars["Boolean"]["output"]>;
    order?: Maybe<Order>;
    source?: Maybe<Node>;
    sourceId?: Maybe<Scalars["ID"]["output"]>;
    sourcePromotionId?: Maybe<Scalars["ID"]["output"]>;
    sourceType?: Maybe<Scalars["String"]["output"]>;
    state?: Maybe<Scalars["String"]["output"]>;
    taxAmount: Scalars["Float"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type AdjustmentReportCanIArgs = {
  action: CanIAction;
};

export type AdjustmentSourceReport = PromotionAction | StoreCredit | TaxRate;

export enum AfterPay {
  Approved = "approved",
  Inactive = "inactive",
  Pending = "pending",
}

export type Agenda = BaseModelInterface &
  Node & {
    __typename?: "Agenda";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["String"]["output"]>;
    date?: Maybe<Scalars["ISO8601Date"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    location?: Maybe<Scalars["String"]["output"]>;
    preview?: Maybe<Scalars["String"]["output"]>;
    tagList: Array<Scalars["String"]["output"]>;
    tags: Array<Tag>;
    time?: Maybe<Scalars["String"]["output"]>;
    title?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    websiteId?: Maybe<Scalars["ID"]["output"]>;
  };

export type AgendaCanIArgs = {
  action: CanIAction;
};

export type AgendaConnection = {
  __typename?: "AgendaConnection";
  edges: Array<AgendaEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Agenda>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type AgendaConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type AgendaConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type AgendaEdge = {
  __typename?: "AgendaEdge";
  cursor: Scalars["String"]["output"];
  node: Agenda;
};

export type AgendaFilter = {
  createdAt?: InputMaybe<DateFilter>;
  date?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  location?: InputMaybe<StringFilter>;
  tags?: InputMaybe<TagFilter>;
  time?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type AirBooking = BaseModelInterface &
  Node & {
    __typename?: "AirBooking";
    base?: Maybe<Scalars["Float"]["output"]>;
    billAddress?: Maybe<Address>;
    bookingsPassengers: Array<BookingPassenger>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    deadline?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    itineraries: Array<AirItinerary>;
    itineraryState?: Maybe<Scalars["String"]["output"]>;
    itineraryStr?: Maybe<Scalars["String"]["output"]>;
    lineItem?: Maybe<LineItem>;
    logs: Array<AirLog>;
    order?: Maybe<Order>;
    passengers: Array<Passenger>;
    penalty?: Maybe<Scalars["Float"]["output"]>;
    pnr?: Maybe<Scalars["String"]["output"]>;
    pnrAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    price?: Maybe<Scalars["Float"]["output"]>;
    rules?: Maybe<Scalars["JSON"]["output"]>;
    savedPassengers: Array<Passenger>;
    searchUrl?: Maybe<Scalars["String"]["output"]>;
    segments: Array<AirSegment>;
    sessionAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    sessionData?: Maybe<Scalars["String"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    textData?: Maybe<Scalars["JSON"]["output"]>;
    ticketDeadline?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    tickets: Array<AirTicket>;
    travelEnd?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    travelStart?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    tstRef?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    usd?: Maybe<Scalars["Float"]["output"]>;
    usdRate?: Maybe<Scalars["Float"]["output"]>;
    user?: Maybe<User>;
    validatingCarrier?: Maybe<Airline>;
    website?: Maybe<Website>;
  };

export type AirBookingCanIArgs = {
  action: CanIAction;
};

export type AirBookingConnection = {
  __typename?: "AirBookingConnection";
  edges: Array<AirBookingEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<AirBooking>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type AirBookingConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type AirBookingConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type AirBookingEdge = {
  __typename?: "AirBookingEdge";
  cursor: Scalars["String"]["output"];
  node: AirBooking;
};

export type AirBookingFilter = {
  base?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  itineraryState?: InputMaybe<StringFilter>;
  itineraryStr?: InputMaybe<StringFilter>;
  lineItem?: InputMaybe<LineItemFilter>;
  order?: InputMaybe<OrderFilter>;
  passengersFirstNameOrPassengersLastName?: InputMaybe<StringFilter>;
  penalty?: InputMaybe<IntFilter>;
  pnr?: InputMaybe<StringFilter>;
  pnrAt?: InputMaybe<DateFilter>;
  price?: InputMaybe<IntFilter>;
  status?: InputMaybe<StringFilter>;
  travelEnd?: InputMaybe<DateFilter>;
  travelStart?: InputMaybe<DateFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  validatingCarrier?: InputMaybe<AirlineFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type AirBookingManifest = Node &
  ProductManifestInterface & {
    __typename?: "AirBookingManifest";
    brand?: Maybe<Brand>;
    canSupply?: Maybe<Scalars["Boolean"]["output"]>;
    expireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    fulfillDuration?: Maybe<Scalars["Int"]["output"]>;
    gid: Scalars["ID"]["output"];
    hotel: Array<AirBooking>;
    id: Scalars["ID"]["output"];
    image?: Maybe<Scalars["String"]["output"]>;
    maxQty?: Maybe<Scalars["Int"]["output"]>;
    name: Scalars["String"]["output"];
    optionsText?: Maybe<Scalars["String"]["output"]>;
    price: Scalars["Float"]["output"];
    productCat?: Maybe<Scalars["String"]["output"]>;
    sku?: Maybe<Scalars["String"]["output"]>;
    slug: Scalars["String"]["output"];
    totalOnHand?: Maybe<Scalars["Int"]["output"]>;
    vendor?: Maybe<Vendor>;
    weight?: Maybe<Scalars["Float"]["output"]>;
  };

export type AirCommissionFilter = {
  airline?: InputMaybe<AirlineFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  stockAirline?: InputMaybe<AirlineFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type AirItinerary = BaseModelInterface &
  Node & {
    __typename?: "AirItinerary";
    arrivalDate: Scalars["ISO8601Date"]["output"];
    arrivalTime: Scalars["String"]["output"];
    booking: AirBooking;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    departureDate: Scalars["ISO8601Date"]["output"];
    departureTime: Scalars["String"]["output"];
    dv?: Maybe<Scalars["Int"]["output"]>;
    eft?: Maybe<Scalars["Int"]["output"]>;
    from: Airport;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    marketingCarrier: Airline;
    position?: Maybe<Scalars["Int"]["output"]>;
    segments: Array<AirSegment>;
    to: Airport;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    validatingCarrier: Airline;
  };

export type AirItineraryCanIArgs = {
  action: CanIAction;
};

export type AirLimitationFilter = {
  carrier?: InputMaybe<AirlineFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type AirLog = BaseModelInterface &
  Node & {
    __typename?: "AirLog";
    action?: Maybe<Scalars["String"]["output"]>;
    booking?: Maybe<AirBooking>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    request?: Maybe<Scalars["String"]["output"]>;
    response?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type AirLogCanIArgs = {
  action: CanIAction;
};

export type AirSegment = BaseModelInterface &
  Node & {
    __typename?: "AirSegment";
    aircraft?: Maybe<Aircraft>;
    arrivalDate: Scalars["ISO8601Date"]["output"];
    arrivalDateTime: Scalars["ISO8601Date"]["output"];
    arrivalTerminal?: Maybe<Scalars["String"]["output"]>;
    arrivalTime: Scalars["String"]["output"];
    baggageAllowance?: Maybe<Scalars["JSON"]["output"]>;
    bookingClass?: Maybe<Scalars["String"]["output"]>;
    cabinClass?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    departureDate: Scalars["ISO8601Date"]["output"];
    departureDateTime: Scalars["ISO8601Date"]["output"];
    departureTerminal?: Maybe<Scalars["String"]["output"]>;
    departureTime: Scalars["String"]["output"];
    duration?: Maybe<Scalars["Int"]["output"]>;
    from: Airport;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    itinerary: AirItinerary;
    marketing: Airline;
    number: Scalars["String"]["output"];
    operating: Airline;
    passengerCount?: Maybe<Scalars["Int"]["output"]>;
    position?: Maybe<Scalars["Int"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    tattoo?: Maybe<Scalars["String"]["output"]>;
    to: Airport;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type AirSegmentCanIArgs = {
  action: CanIAction;
};

export type AirTicket = BaseModelInterface &
  Node & {
    __typename?: "AirTicket";
    booking?: Maybe<AirBooking>;
    canI: Scalars["Boolean"]["output"];
    carrier?: Maybe<Airline>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    date?: Maybe<Scalars["ISO8601Date"]["output"]>;
    firstName?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    lastName?: Maybe<Scalars["String"]["output"]>;
    number?: Maybe<Scalars["String"]["output"]>;
    passengerType?: Maybe<Scalars["String"]["output"]>;
    price?: Maybe<Scalars["Float"]["output"]>;
    segments: Array<AirSegment>;
    status?: Maybe<Scalars["String"]["output"]>;
    tattoo?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    website?: Maybe<Website>;
  };

export type AirTicketCanIArgs = {
  action: CanIAction;
};

export type AirTicketConnection = {
  __typename?: "AirTicketConnection";
  edges: Array<AirTicketEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<AirTicket>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type AirTicketConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type AirTicketConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type AirTicketEdge = {
  __typename?: "AirTicketEdge";
  cursor: Scalars["String"]["output"];
  node: AirTicket;
};

export type AirTicketFilter = {
  booking?: InputMaybe<AirBookingFilter>;
  carrier?: InputMaybe<AirlineFilter>;
  createdAt?: InputMaybe<DateFilter>;
  date?: InputMaybe<DateFilter>;
  firstName?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  lastName?: InputMaybe<StringFilter>;
  number?: InputMaybe<StringFilter>;
  passengerType?: InputMaybe<StringFilter>;
  price?: InputMaybe<IntFilter>;
  status?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type Aircraft = BaseModelInterface &
  Node & {
    __typename?: "Aircraft";
    canI: Scalars["Boolean"]["output"];
    cat?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    iata?: Maybe<Scalars["String"]["output"]>;
    icao?: Maybe<Scalars["String"]["output"]>;
    id: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type AircraftCanIArgs = {
  action: CanIAction;
};

export type AircraftConnection = {
  __typename?: "AircraftConnection";
  edges: Array<AircraftEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Aircraft>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type AircraftConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type AircraftConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type AircraftEdge = {
  __typename?: "AircraftEdge";
  cursor: Scalars["String"]["output"];
  node: Aircraft;
};

export type AircraftFilter = {
  code?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type Airline = BaseModelInterface &
  Node & {
    __typename?: "Airline";
    canI: Scalars["Boolean"]["output"];
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    logoId?: Maybe<Scalars["ID"]["output"]>;
    mn?: Maybe<Scalars["String"]["output"]>;
    name?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type AirlineCanIArgs = {
  action: CanIAction;
};

export type AirlineConnection = {
  __typename?: "AirlineConnection";
  edges: Array<AirlineEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Airline>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type AirlineConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type AirlineConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type AirlineEdge = {
  __typename?: "AirlineEdge";
  cursor: Scalars["String"]["output"];
  node: Airline;
};

export type AirlineFilter = {
  code?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type Airport = Node & {
  __typename?: "Airport";
  city?: Maybe<Scalars["String"]["output"]>;
  country?: Maybe<Scalars["String"]["output"]>;
  elevation?: Maybe<Scalars["Int"]["output"]>;
  gid: Scalars["ID"]["output"];
  iata?: Maybe<Scalars["String"]["output"]>;
  icao?: Maybe<Scalars["String"]["output"]>;
  id: Scalars["ID"]["output"];
  lat?: Maybe<Scalars["Float"]["output"]>;
  lon?: Maybe<Scalars["Float"]["output"]>;
  name?: Maybe<Scalars["String"]["output"]>;
  state?: Maybe<Scalars["String"]["output"]>;
  tz?: Maybe<Scalars["String"]["output"]>;
};

export type AirportConnection = {
  __typename?: "AirportConnection";
  edges: Array<AirportEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Airport>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type AirportConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type AirportConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type AirportEdge = {
  __typename?: "AirportEdge";
  cursor: Scalars["String"]["output"];
  node: Airport;
};

export type AirportFilter = {
  city?: InputMaybe<StringFilter>;
  country?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  elevation?: InputMaybe<IntFilter>;
  iata?: InputMaybe<StringFilter>;
  icao?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  state?: InputMaybe<StringFilter>;
  tz?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type AlibabaOrder = BaseModelInterface &
  Node & {
    __typename?: "AlibabaOrder";
    addressComparePrice?: Maybe<Scalars["Float"]["output"]>;
    addressMainPrice?: Maybe<Scalars["Float"]["output"]>;
    alibabaId?: Maybe<Scalars["Float"]["output"]>;
    amount?: Maybe<Scalars["Float"]["output"]>;
    amountUsd?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    canceledTotal?: Maybe<Scalars["Float"]["output"]>;
    cargoPaid?: Maybe<Scalars["Boolean"]["output"]>;
    cargoPrice?: Maybe<Scalars["Float"]["output"]>;
    cargoStatus?: Maybe<Scalars["String"]["output"]>;
    cargoWeight?: Maybe<Scalars["Float"]["output"]>;
    cny?: Maybe<Scalars["Float"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["JSON"]["output"]>;
    discount?: Maybe<Scalars["Float"]["output"]>;
    displayShipmentBeforePaid?: Maybe<Scalars["Float"]["output"]>;
    displayShipmentTotal?: Maybe<Scalars["Float"]["output"]>;
    displayShipmentTotalUsd?: Maybe<Scalars["Float"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    lastSyncedAt?: Maybe<Scalars["String"]["output"]>;
    lineItems?: Maybe<Array<LineItem>>;
    logisticTrace?: Maybe<Scalars["JSON"]["output"]>;
    mongoliaInboundAt?: Maybe<Scalars["String"]["output"]>;
    noStockTotal?: Maybe<Scalars["Float"]["output"]>;
    note?: Maybe<Scalars["String"]["output"]>;
    number?: Maybe<Scalars["String"]["output"]>;
    oldWaybill?: Maybe<Scalars["String"]["output"]>;
    order?: Maybe<Order>;
    orderTotalLocalShipping?: Maybe<Scalars["Float"]["output"]>;
    paidAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    priceUpdatedAt?: Maybe<Scalars["String"]["output"]>;
    provider?: Maybe<DropshipProvider>;
    refund?: Maybe<Scalars["Float"]["output"]>;
    refundPayment?: Maybe<Scalars["Float"]["output"]>;
    returnTotal?: Maybe<Scalars["Float"]["output"]>;
    sellerName?: Maybe<Scalars["String"]["output"]>;
    sellerOpenid?: Maybe<Scalars["String"]["output"]>;
    shipmentTotal?: Maybe<Scalars["Float"]["output"]>;
    shipping?: Maybe<Scalars["Float"]["output"]>;
    shippingCalculator?: Maybe<Scalars["String"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    tax?: Maybe<Scalars["Float"]["output"]>;
    total?: Maybe<Scalars["Float"]["output"]>;
    totalItemAmount?: Maybe<Scalars["Float"]["output"]>;
    totalItemCount?: Maybe<Scalars["Int"]["output"]>;
    totalUsd?: Maybe<Scalars["Float"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    updatedPrice?: Maybe<Scalars["String"]["output"]>;
    updatedShipping?: Maybe<Scalars["String"]["output"]>;
    warehouse2InboundAt?: Maybe<Scalars["String"]["output"]>;
    warehouse2OutboundAt?: Maybe<Scalars["String"]["output"]>;
    warehouseInboundAt?: Maybe<Scalars["String"]["output"]>;
    warehouseOutboundAt?: Maybe<Scalars["String"]["output"]>;
    waybill?: Maybe<Scalars["String"]["output"]>;
    waybillStatus?: Maybe<Scalars["String"]["output"]>;
    waybills?: Maybe<Array<AlibabaWaybill>>;
    website?: Maybe<Website>;
    websiteId?: Maybe<Scalars["ID"]["output"]>;
  };

export type AlibabaOrderCanIArgs = {
  action: CanIAction;
};

export type AlibabaOrderConnection = {
  __typename?: "AlibabaOrderConnection";
  edges: Array<AlibabaOrderEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<AlibabaOrder>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type AlibabaOrderConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type AlibabaOrderConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type AlibabaOrderEdge = {
  __typename?: "AlibabaOrderEdge";
  cursor: Scalars["String"]["output"];
  node: AlibabaOrder;
};

export type AlibabaOrderFilter = {
  amount?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  number?: InputMaybe<StringFilter>;
  order?: InputMaybe<OrderFilter>;
  paidAt?: InputMaybe<DateFilter>;
  sellerOpenid?: InputMaybe<StringFilter>;
  shipping?: InputMaybe<IntFilter>;
  status?: InputMaybe<StringFilter>;
  total?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  waybill?: InputMaybe<StringFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type AlibabaWaybill = BaseModelInterface &
  Node & {
    __typename?: "AlibabaWaybill";
    bag?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    entry?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    goods?: Maybe<Scalars["JSON"]["output"]>;
    id: Scalars["ID"]["output"];
    lid?: Maybe<Scalars["String"]["output"]>;
    order?: Maybe<AlibabaOrder>;
    pickPackStatus?: Maybe<Scalars["String"]["output"]>;
    price?: Maybe<Scalars["Float"]["output"]>;
    provider?: Maybe<DropshipProvider>;
    status?: Maybe<Scalars["String"]["output"]>;
    step?: Maybe<Scalars["Int"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    waybill?: Maybe<Scalars["String"]["output"]>;
    website?: Maybe<Website>;
    weight?: Maybe<Scalars["Float"]["output"]>;
  };

export type AlibabaWaybillCanIArgs = {
  action: CanIAction;
};

export type AlibabaWaybillConnection = {
  __typename?: "AlibabaWaybillConnection";
  edges: Array<AlibabaWaybillEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<AlibabaWaybill>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type AlibabaWaybillConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type AlibabaWaybillConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type AlibabaWaybillEdge = {
  __typename?: "AlibabaWaybillEdge";
  cursor: Scalars["String"]["output"];
  node: AlibabaWaybill;
};

export type AlibabaWaybillFilter = {
  createdAt?: InputMaybe<DateFilter>;
  entry?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  lid?: InputMaybe<StringFilter>;
  order?: InputMaybe<AlibabaOrderFilter>;
  price?: InputMaybe<IntFilter>;
  status?: InputMaybe<StringFilter>;
  step?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  waybill?: InputMaybe<StringFilter>;
  website?: InputMaybe<WebsiteFilter>;
  weight?: InputMaybe<IntFilter>;
};

export type AlifPayInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "AlifPayInvoice";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceId?: Maybe<Scalars["String"]["output"]>;
    invoiceNumber?: Maybe<Scalars["String"]["output"]>;
    signature?: Maybe<Scalars["String"]["output"]>;
    splitMonths?: Maybe<Scalars["Int"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type AlifPayInvoiceCanIArgs = {
  action: CanIAction;
};

export type AmadeusIntegration = BaseModelInterface &
  Node & {
    __typename?: "AmadeusIntegration";
    active?: Maybe<Scalars["Boolean"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    fmpc: Scalars["JSON"]["output"];
    fmptbs: Scalars["JSON"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    reports: Scalars["JSON"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type AmadeusIntegrationCanIArgs = {
  action: CanIAction;
};

export type AmadeusIntegrationFmpcArgs = {
  query: Scalars["String"]["input"];
};

export type AmadeusIntegrationFmptbsArgs = {
  query: Scalars["String"]["input"];
};

export type AmadeusIntegrationReportsArgs = {
  from: Scalars["String"]["input"];
  interval?: InputMaybe<Scalars["String"]["input"]>;
  to: Scalars["String"]["input"];
};

export type Application = BaseModelInterface &
  Node & {
    __typename?: "Application";
    canI: Scalars["Boolean"]["output"];
    confidential: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name: Scalars["String"]["output"];
    onesignalAppId?: Maybe<Scalars["String"]["output"]>;
    onesignalAppKey?: Maybe<Scalars["String"]["output"]>;
    redirectUri: Scalars["String"]["output"];
    scopes: Scalars["String"]["output"];
    secret: Scalars["String"]["output"];
    uid: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type ApplicationCanIArgs = {
  action: CanIAction;
};

export type ApplicationConnection = {
  __typename?: "ApplicationConnection";
  edges: Array<ApplicationEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Application>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type ApplicationConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type ApplicationConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type ApplicationEdge = {
  __typename?: "ApplicationEdge";
  cursor: Scalars["String"]["output"];
  node: Application;
};

export type ApplicationFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  onesignalAppId?: InputMaybe<StringFilter>;
  onesignalAppKey?: InputMaybe<StringFilter>;
  redirectUri?: InputMaybe<StringFilter>;
  scopes?: InputMaybe<StringFilter>;
  uid?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type ApprovalComment = Node & {
  __typename?: "ApprovalComment";
  comments: Array<KeyValue>;
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
};

export type ApprovalDecision = {
  approvalComment?: InputMaybe<B2bApprovalCommentInput>;
  ownerId: Scalars["ID"]["input"];
  ownerType:
    | B2bApprovalDecisionOwnerTypeEnum
    | `${B2bApprovalDecisionOwnerTypeEnum}`;
  status: B2bApprovalDecisionStatusEnum | `${B2bApprovalDecisionStatusEnum}`;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export enum ApproveAction {
  Approve = "approve",
  Cancel = "cancel",
  Order = "order",
  Revert = "revert",
}

export type Around = Order | Product | Website;

export type Article = BaseModelInterface &
  Node & {
    __typename?: "Article";
    author?: Maybe<Author>;
    averageRating: Scalars["Float"]["output"];
    blocks?: Maybe<Scalars["JSON"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    canonicalLink?: Maybe<Scalars["String"]["output"]>;
    comments: CommentConnection;
    contentType?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    editor?: Maybe<User>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    image?: Maybe<ArticleImage>;
    images: Array<ArticleImage>;
    impressionsCount?: Maybe<Scalars["Int"]["output"]>;
    isDraft?: Maybe<Scalars["Boolean"]["output"]>;
    isFeatured?: Maybe<Scalars["Boolean"]["output"]>;
    isPublished?: Maybe<Scalars["Boolean"]["output"]>;
    items?: Maybe<Scalars["JSON"]["output"]>;
    licensing?: Maybe<Scalars["String"]["output"]>;
    myReview?: Maybe<Review>;
    preview?: Maybe<Scalars["String"]["output"]>;
    publishedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    publishedBlocks?: Maybe<Scalars["JSON"]["output"]>;
    reviews: ReviewConnection;
    seoDescription?: Maybe<Scalars["String"]["output"]>;
    seoKeywords?: Maybe<Scalars["String"]["output"]>;
    seoTitle?: Maybe<Scalars["String"]["output"]>;
    slug?: Maybe<Scalars["String"]["output"]>;
    tagList: Array<Scalars["String"]["output"]>;
    tags: Array<Tag>;
    text?: Maybe<Scalars["String"]["output"]>;
    title?: Maybe<Scalars["String"]["output"]>;
    totalComments?: Maybe<Scalars["Int"]["output"]>;
    totalReviews: Scalars["Int"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
    wordCount?: Maybe<Scalars["Int"]["output"]>;
  };

export type ArticleCanIArgs = {
  action: CanIAction;
};

export type ArticleCommentsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type ArticleReviewsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ReviewsFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  isDeleted?: InputMaybe<Scalars["Boolean"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type ArticleConnection = {
  __typename?: "ArticleConnection";
  edges: Array<ArticleEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Article>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type ArticleConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type ArticleConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type ArticleEdge = {
  __typename?: "ArticleEdge";
  cursor: Scalars["String"]["output"];
  node: Article;
};

export type ArticleFilter = {
  author?: InputMaybe<AuthorFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  isDraft?: InputMaybe<BoolFilter>;
  isPublished?: InputMaybe<BoolFilter>;
  preview?: InputMaybe<StringFilter>;
  publishedAt?: InputMaybe<DateFilter>;
  tags?: InputMaybe<TagFilter>;
  title?: InputMaybe<StringFilter>;
  trending?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type ArticleImage = BaseModelInterface &
  Node & {
    __typename?: "ArticleImage";
    alt?: Maybe<Scalars["String"]["output"]>;
    article?: Maybe<Article>;
    attachment?: Maybe<Scalars["String"]["output"]>;
    attachmentContentType: Scalars["String"]["output"];
    attachmentFileName: Scalars["String"]["output"];
    attachmentFileSize?: Maybe<Scalars["Int"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    imageHeight?: Maybe<Scalars["Int"]["output"]>;
    imageWidth?: Maybe<Scalars["Int"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    website?: Maybe<Website>;
  };

export type ArticleImageCanIArgs = {
  action: CanIAction;
};

export type AssemblyPart = BaseModelInterface &
  Node & {
    __typename?: "AssemblyPart";
    assemblyId?: Maybe<Scalars["ID"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    part?: Maybe<Variant>;
    partId?: Maybe<Scalars["ID"]["output"]>;
    quantity?: Maybe<Scalars["Int"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type AssemblyPartCanIArgs = {
  action: CanIAction;
};

export type Asset =
  | Branch
  | BusinessClient
  | ClientsStore
  | Merchant
  | StoreLocation
  | User
  | Vendor
  | Website;

export type AssetFilter = {
  assetId?: InputMaybe<IdFilter>;
  assetType?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  email?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  number?: InputMaybe<StringFilter>;
  state?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  userEmailOrUserMobile?: InputMaybe<StringFilter>;
  userEmailOrUserMobileOrUserFirstName?: InputMaybe<StringFilter>;
  withRoles?: InputMaybe<Array<Scalars["String"]["input"]>>;
};

export type AssetRole = BaseModelInterface &
  Node & {
    __typename?: "AssetRole";
    asset?: Maybe<Asset>;
    assetId?: Maybe<Scalars["ID"]["output"]>;
    assetKind?: Maybe<Scalars["String"]["output"]>;
    assetName?: Maybe<Scalars["String"]["output"]>;
    business?: Maybe<Vendor>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    people?: Maybe<Employee>;
    roles: Array<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
  };

export type AssetRoleCanIArgs = {
  action: CanIAction;
};

export type AssetRoleConnection = {
  __typename?: "AssetRoleConnection";
  edges: Array<AssetRoleEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<AssetRole>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type AssetRoleConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type AssetRoleConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type AssetRoleEdge = {
  __typename?: "AssetRoleEdge";
  cursor: Scalars["String"]["output"];
  node: AssetRole;
};

export type AssetRoleInput = {
  assetId: Scalars["ID"]["input"];
  assetType: AssetTarget | `${AssetTarget}`;
  roles: Array<Scalars["String"]["input"]>;
};

export enum AssetTarget {
  Branch = "branch",
  Business = "business",
  BusinessClient = "business_client",
  BusinessSupplier = "business_supplier",
  Channel = "channel",
  ClientsStore = "clients_store",
  StoreLocation = "store_location",
  User = "user",
  Website = "website",
}

export type AssetTargetRoleInput = {
  peopleIds: Array<Scalars["ID"]["input"]>;
  roles: Array<Scalars["String"]["input"]>;
  targetIds: Array<Scalars["ID"]["input"]>;
  targetType: AssetTarget | `${AssetTarget}`;
};

export type Attachment = BaseModelInterface &
  Node & {
    __typename?: "Attachment";
    attachment?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    contract?: Maybe<Contract>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type AttachmentCanIArgs = {
  action: CanIAction;
};

export type Audit = Node & {
  __typename?: "Audit";
  action?: Maybe<Scalars["String"]["output"]>;
  associated?: Maybe<Node>;
  associatedId?: Maybe<Scalars["ID"]["output"]>;
  associatedJson?: Maybe<Scalars["JSON"]["output"]>;
  associatedSku?: Maybe<Scalars["String"]["output"]>;
  associatedType?: Maybe<Scalars["String"]["output"]>;
  auditable?: Maybe<Node>;
  auditableId?: Maybe<Scalars["ID"]["output"]>;
  auditableType?: Maybe<Scalars["String"]["output"]>;
  auditedChanges?: Maybe<Scalars["JSON"]["output"]>;
  comment?: Maybe<Scalars["String"]["output"]>;
  createdAt: Scalars["ISO8601DateTime"]["output"];
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  remoteAddress?: Maybe<Scalars["String"]["output"]>;
  requestUuid?: Maybe<Scalars["String"]["output"]>;
  user?: Maybe<User>;
  userEmail?: Maybe<Scalars["String"]["output"]>;
  userId?: Maybe<Scalars["ID"]["output"]>;
  userType?: Maybe<Scalars["String"]["output"]>;
  username?: Maybe<Scalars["String"]["output"]>;
  version?: Maybe<Scalars["Int"]["output"]>;
  website?: Maybe<Scalars["String"]["output"]>;
};

export type AuditConnection = {
  __typename?: "AuditConnection";
  edges: Array<AuditEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Audit>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type AuditConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type AuditConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type AuditEdge = {
  __typename?: "AuditEdge";
  cursor: Scalars["String"]["output"];
  node: Audit;
};

export type AuditFilter = {
  action?: InputMaybe<StringFilter>;
  associatedId?: InputMaybe<IntFilter>;
  auditableType?: InputMaybe<StringFilter>;
  comment?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  remoteAddress?: InputMaybe<StringFilter>;
  sku?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  userEmail?: InputMaybe<StringFilter>;
  website?: InputMaybe<StringFilter>;
};

export type Author = BaseModelInterface &
  Node & {
    __typename?: "Author";
    articles: ArticleConnection;
    articlesCount?: Maybe<Scalars["Int"]["output"]>;
    avatar?: Maybe<Scalars["String"]["output"]>;
    avatarContentType?: Maybe<Scalars["String"]["output"]>;
    avatarFileName?: Maybe<Scalars["String"]["output"]>;
    bio?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    followersCount?: Maybe<Scalars["Int"]["output"]>;
    fullName?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    isFeatured?: Maybe<Scalars["Boolean"]["output"]>;
    isPublic?: Maybe<Scalars["Boolean"]["output"]>;
    shoppyAuthors?: Maybe<Scalars["Int"]["output"]>;
    social?: Maybe<Scalars["JSON"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    username?: Maybe<Scalars["String"]["output"]>;
    website?: Maybe<Website>;
  };

export type AuthorArticlesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ArticleFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type AuthorAvatarArgs = {
  mirror?: InputMaybe<Scalars["Boolean"]["input"]>;
  size?: InputMaybe<Scalars["String"]["input"]>;
};

export type AuthorCanIArgs = {
  action: CanIAction;
};

export type AuthorConnection = {
  __typename?: "AuthorConnection";
  edges: Array<AuthorEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Author>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type AuthorConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type AuthorConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type AuthorEdge = {
  __typename?: "AuthorEdge";
  cursor: Scalars["String"]["output"];
  node: Author;
};

export type AuthorFilter = {
  createdAt?: InputMaybe<DateFilter>;
  followersCount?: InputMaybe<IntFilter>;
  fullName?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  username?: InputMaybe<StringFilter>;
};

export type Availability = Node &
  RuleInterface & {
    __typename?: "Availability";
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    productGroupId?: Maybe<Scalars["ID"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export enum B2bAllowedStatusTypeEnum {
  Pending = "pending",
}

export type B2bApprovalCommentInput = {
  comments: Array<KeyValueInput>;
};

export enum B2bApprovalDecisionOwnerTypeEnum {
  BusinessClient = "businessClient",
  BusinessUser = "businessUser",
  ClientsStore = "clientsStore",
}

export enum B2bApprovalDecisionStatusEnum {
  Approved = "approved",
  Declined = "declined",
  Disabled = "disabled",
  Hidden = "hidden",
  Pending = "pending",
  Suspended = "suspended",
}

export type B2bBusinessUserBankAccountInput = {
  accountNumber: Scalars["String"]["input"];
  bankName: Scalars["String"]["input"];
};

export type Badge = BaseModelInterface &
  Node & {
    __typename?: "Badge";
    active?: Maybe<Scalars["Boolean"]["output"]>;
    attachment?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    expireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    listings: ListingConnection;
    name?: Maybe<Scalars["String"]["output"]>;
    priority?: Maybe<Scalars["Int"]["output"]>;
    promotable: Scalars["Boolean"]["output"];
    startAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    style?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    url?: Maybe<Scalars["String"]["output"]>;
    website: Website;
    websiteId: Scalars["ID"]["output"];
  };

export type BadgeCanIArgs = {
  action: CanIAction;
};

export type BadgeListingsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ListingFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type BadgeConnection = {
  __typename?: "BadgeConnection";
  edges: Array<BadgeEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Badge>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type BadgeConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type BadgeConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type BadgeEdge = {
  __typename?: "BadgeEdge";
  cursor: Scalars["String"]["output"];
  node: Badge;
};

export type BadgeFilter = {
  active?: InputMaybe<BoolFilter>;
  createdAt?: InputMaybe<DateFilter>;
  expireAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  priority?: InputMaybe<IntFilter>;
  promotable?: InputMaybe<BoolFilter>;
  searchState?: InputMaybe<Scalars["String"]["input"]>;
  startAt?: InputMaybe<DateFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  url?: InputMaybe<StringFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type Bank = BaseModelInterface &
  Node & {
    __typename?: "Bank";
    accountNo: Scalars["String"]["output"];
    active?: Maybe<Scalars["Boolean"]["output"]>;
    additionalDetails?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type BankCanIArgs = {
  action: CanIAction;
};

export type BankAccount = Node & {
  __typename?: "BankAccount";
  accountName: Scalars["String"]["output"];
  accountNumber: Scalars["String"]["output"];
  bankName: Scalars["String"]["output"];
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  status?: Maybe<Scalars["String"]["output"]>;
};

export type BankInput = {
  _destroy?: InputMaybe<Scalars["Boolean"]["input"]>;
  accountNo?: InputMaybe<Scalars["String"]["input"]>;
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  additionalDetails?: InputMaybe<Scalars["String"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
};

export type BankTransaction = {
  __typename?: "BankTransaction";
  account?: Maybe<Scalars["String"]["output"]>;
  amount?: Maybe<Scalars["Float"]["output"]>;
  cgw?: Maybe<CorporateGateway>;
  createdAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
  customerAccount?: Maybe<Scalars["String"]["output"]>;
  customerBank?: Maybe<Scalars["String"]["output"]>;
  customerName?: Maybe<Scalars["String"]["output"]>;
  description?: Maybe<Scalars["String"]["output"]>;
  id?: Maybe<Scalars["ID"]["output"]>;
  order?: Maybe<Order>;
  payment?: Maybe<Payment>;
  ref?: Maybe<Scalars["String"]["output"]>;
  transactionDate?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
  updatedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
  website?: Maybe<Website>;
};

export type BaseModelInterface = {
  canI: Scalars["Boolean"]["output"];
  createdAt: Scalars["ISO8601DateTime"]["output"];
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  updatedAt: Scalars["ISO8601DateTime"]["output"];
};

export type BaseModelInterfaceCanIArgs = {
  action: CanIAction;
};

export type BinancePayInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "BinancePayInvoice";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    checkoutUrl?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    expireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceNumber?: Maybe<Scalars["String"]["output"]>;
    prepayId?: Maybe<Scalars["String"]["output"]>;
    qrContent?: Maybe<Scalars["String"]["output"]>;
    qrImage?: Maybe<Scalars["String"]["output"]>;
    universalUrl?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type BinancePayInvoiceCanIArgs = {
  action: CanIAction;
};

export type Booking = BaseModelInterface &
  Node & {
    __typename?: "Booking";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    prices: Scalars["JSON"]["output"];
    product: Product;
    productId: Scalars["ID"]["output"];
    repeats: Array<Scalars["String"]["output"]>;
    skips: Array<Scalars["String"]["output"]>;
    stocks: Array<Scalars["JSON"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variation: Scalars["JSON"]["output"];
  };

export type BookingCanIArgs = {
  action: CanIAction;
};

export type BookingStocksArgs = {
  date: Scalars["ISO8601DateTime"]["input"];
};

export type BookingPassenger = Node & {
  __typename?: "BookingPassenger";
  base?: Maybe<Scalars["Float"]["output"]>;
  booking?: Maybe<AirBooking>;
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  parent?: Maybe<BookingPassenger>;
  passenger?: Maybe<Passenger>;
  penalty?: Maybe<Scalars["Float"]["output"]>;
  position?: Maybe<Scalars["Int"]["output"]>;
  price?: Maybe<Scalars["Float"]["output"]>;
  ptc?: Maybe<Scalars["String"]["output"]>;
  reasonToTravel?: Maybe<Scalars["String"]["output"]>;
  tattoo?: Maybe<Scalars["Int"]["output"]>;
  tax?: Maybe<Scalars["Float"]["output"]>;
  textData?: Maybe<Scalars["JSON"]["output"]>;
  visa?: Maybe<Scalars["String"]["output"]>;
  visaExpiration?: Maybe<Scalars["String"]["output"]>;
  visaIssuedCountryId?: Maybe<Scalars["ID"]["output"]>;
};

export type BoolFilter = {
  eq?: InputMaybe<Scalars["Boolean"]["input"]>;
  notEq?: InputMaybe<Scalars["Boolean"]["input"]>;
  notNull?: InputMaybe<Scalars["Boolean"]["input"]>;
  null?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type Bounce = BaseModelInterface &
  Node & {
    __typename?: "Bounce";
    bounce?: Maybe<Scalars["String"]["output"]>;
    bounceSub?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    email?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type BounceCanIArgs = {
  action: CanIAction;
};

export type BounceConnection = {
  __typename?: "BounceConnection";
  edges: Array<BounceEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Bounce>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type BounceConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type BounceConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type BounceEdge = {
  __typename?: "BounceEdge";
  cursor: Scalars["String"]["output"];
  node: Bounce;
};

export type Branch = BaseModelInterface &
  Node & {
    __typename?: "Branch";
    address?: Maybe<Address>;
    assetRoles: AssetRoleConnection;
    businessType?: Maybe<BusinessType>;
    canI: Scalars["Boolean"]["output"];
    clientId?: Maybe<Scalars["ID"]["output"]>;
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    createdBy?: Maybe<User>;
    email?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    phone?: Maybe<Scalars["String"]["output"]>;
    phone1?: Maybe<Scalars["String"]["output"]>;
    supplySegmentIds?: Maybe<Scalars["JSON"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    vendor: Vendor;
  };

export type BranchAssetRolesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AssetFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type BranchCanIArgs = {
  action: CanIAction;
};

export type BranchClientIdArgs = {
  id: Scalars["ID"]["input"];
};

export type BranchConnection = {
  __typename?: "BranchConnection";
  edges: Array<BranchEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Branch>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type BranchConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type BranchConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type BranchEdge = {
  __typename?: "BranchEdge";
  cursor: Scalars["String"]["output"];
  node: Branch;
};

export type BranchFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type Brand = BaseModelInterface &
  Node & {
    __typename?: "Brand";
    averageRating: Scalars["Float"]["output"];
    blackLogo?: Maybe<Image>;
    canI: Scalars["Boolean"]["output"];
    categoryType?: Maybe<Scalars["String"]["output"]>;
    code: Scalars["String"]["output"];
    cover?: Maybe<Scalars["String"]["output"]>;
    coverSquare?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    createdBy?: Maybe<User>;
    default: Scalars["Boolean"]["output"];
    defaultCurrency?: Maybe<Scalars["String"]["output"]>;
    deliveryDuration?: Maybe<Scalars["String"]["output"]>;
    deliveryHours?: Maybe<Scalars["Int"]["output"]>;
    desktopCover?: Maybe<Image>;
    facebook?: Maybe<Scalars["String"]["output"]>;
    fees?: Maybe<Scalars["String"]["output"]>;
    follow: Follow;
    follows: Array<Follow>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    isPopUp?: Maybe<Scalars["Boolean"]["output"]>;
    isPublished?: Maybe<Scalars["Boolean"]["output"]>;
    items?: Maybe<Scalars["String"]["output"]>;
    logo?: Maybe<Scalars["String"]["output"]>;
    lvl3?: Maybe<Scalars["String"]["output"]>;
    lvl4?: Maybe<Scalars["String"]["output"]>;
    mailFromAddress?: Maybe<Scalars["String"]["output"]>;
    manufacture?: Maybe<Scalars["String"]["output"]>;
    metaDescription?: Maybe<Scalars["String"]["output"]>;
    metaKeywords?: Maybe<Scalars["String"]["output"]>;
    mobileCover?: Maybe<Scalars["String"]["output"]>;
    monthlyFee?: Maybe<Scalars["Float"]["output"]>;
    myReview?: Maybe<Review>;
    name?: Maybe<Scalars["String"]["output"]>;
    officialLogo?: Maybe<Scalars["String"]["output"]>;
    popOffDate?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    popUpDate?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    reviews: ReviewConnection;
    seoTitle?: Maybe<Scalars["String"]["output"]>;
    shoppyFeatured?: Maybe<Featured>;
    shoppyFeatureds: FeaturedConnection;
    storeLocations: StoreLocationConnection;
    storeType?: Maybe<Scalars["String"]["output"]>;
    totalReviews: Scalars["Int"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    url?: Maybe<Scalars["String"]["output"]>;
    webData?: Maybe<Scalars["JSON"]["output"]>;
    websiteIds: Array<Scalars["ID"]["output"]>;
    websiteNames?: Maybe<Scalars["String"]["output"]>;
    websites: BrandListingConnection;
    whiteLogo?: Maybe<Image>;
  };

export type BrandCanIArgs = {
  action: CanIAction;
};

export type BrandFollowArgs = {
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type BrandNameArgs = {
  fallback?: InputMaybe<Scalars["String"]["input"]>;
  locale?: InputMaybe<Scalars["String"]["input"]>;
};

export type BrandReviewsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ReviewsFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  isDeleted?: InputMaybe<Scalars["Boolean"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type BrandShoppyFeaturedArgs = {
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type BrandShoppyFeaturedsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type BrandStoreLocationsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<StoreLocationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type BrandWebsitesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<BrandListingFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type BrandConnection = {
  __typename?: "BrandConnection";
  edges: Array<BrandEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Brand>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type BrandConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type BrandConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type BrandEdge = {
  __typename?: "BrandEdge";
  cursor: Scalars["String"]["output"];
  node: Brand;
};

export type BrandFilter = {
  blackLogo?: InputMaybe<ShoppyImageFilter>;
  brandWebsitesWebsiteId?: InputMaybe<StringFilter>;
  brandWebsitesWebsiteName?: InputMaybe<StringFilter>;
  categoryType?: InputMaybe<StringFilter>;
  code?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  domain?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  isPublished?: InputMaybe<BoolFilter>;
  name?: InputMaybe<StringFilter>;
  products?: InputMaybe<ProductFilter>;
  productsListingsWebsiteName?: InputMaybe<StringFilter>;
  storeType?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  whiteLogo?: InputMaybe<ShoppyImageFilter>;
};

export type BrandListing = BaseModelInterface &
  Node & {
    __typename?: "BrandListing";
    active?: Maybe<Scalars["Boolean"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    code?: Maybe<Scalars["String"]["output"]>;
    cover?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["JSON"]["output"]>;
    description?: Maybe<Scalars["String"]["output"]>;
    desktopCover?: Maybe<Image>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    listings: ListingConnection;
    mobileCover?: Maybe<Scalars["String"]["output"]>;
    name?: Maybe<Scalars["String"]["output"]>;
    store: Brand;
    storeId?: Maybe<Scalars["ID"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website: Website;
    websiteId?: Maybe<Scalars["ID"]["output"]>;
  };

export type BrandListingCanIArgs = {
  action: CanIAction;
};

export type BrandListingListingsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type BrandListingConnection = {
  __typename?: "BrandListingConnection";
  edges: Array<BrandListingEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<BrandListing>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type BrandListingConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type BrandListingConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type BrandListingEdge = {
  __typename?: "BrandListingEdge";
  cursor: Scalars["String"]["output"];
  node: BrandListing;
};

export type BrandListingFilter = {
  active?: InputMaybe<BoolFilter>;
  code?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  store?: InputMaybe<BrandFilter>;
  storeId?: InputMaybe<IdFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  website?: InputMaybe<WebsiteFilter>;
  websiteId?: InputMaybe<IdFilter>;
};

export type BusinessClient = BaseModelInterface &
  Node & {
    __typename?: "BusinessClient";
    address?: Maybe<Scalars["String"]["output"]>;
    alias?: Maybe<Scalars["String"]["output"]>;
    audits: AuditConnection;
    background?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    category?: Maybe<SupplierCategory>;
    categoryId?: Maybe<Scalars["ID"]["output"]>;
    client: Vendor;
    clientCodes: Array<BusinessClientCode>;
    clientsStore?: Maybe<ClientsStore>;
    clientsStores: ClientsStoreConnection;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    creditBalance?: Maybe<Scalars["Float"]["output"]>;
    creditLimit?: Maybe<Scalars["Float"]["output"]>;
    creditStatus?: Maybe<Scalars["Float"]["output"]>;
    creditWallet?: Maybe<Wallet>;
    creditWallets?: Maybe<Array<Wallet>>;
    currentOrderTotal: Scalars["Float"]["output"];
    customerCreditData?: Maybe<Scalars["JSON"]["output"]>;
    customerDetailCreditData?: Maybe<Scalars["JSON"]["output"]>;
    data?: Maybe<Scalars["JSON"]["output"]>;
    debitWallet?: Maybe<Wallet>;
    debitWallets?: Maybe<Array<Wallet>>;
    description?: Maybe<Scalars["String"]["output"]>;
    email?: Maybe<Scalars["String"]["output"]>;
    employees?: Maybe<EmployeeConnection>;
    facebook?: Maybe<Scalars["String"]["output"]>;
    gamifications: GamificationConnection;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    isIndividual?: Maybe<Scalars["Boolean"]["output"]>;
    lastApprovalComment?: Maybe<ApprovalComment>;
    lastAudit?: Maybe<Audit>;
    localId?: Maybe<Scalars["String"]["output"]>;
    logo?: Maybe<Scalars["String"]["output"]>;
    manager?: Maybe<Employee>;
    maxEmployees: Scalars["Int"]["output"];
    msCode?: Maybe<Scalars["String"]["output"]>;
    name?: Maybe<Scalars["String"]["output"]>;
    orderTotal: Scalars["Float"]["output"];
    orders: OrderConnection;
    organizationCertificateAttachments?: Maybe<
      Array<BusinessVerificationAttachmentType>
    >;
    organizationId?: Maybe<Scalars["String"]["output"]>;
    pendingApproval: Scalars["Boolean"]["output"];
    personPassportAttachments?: Maybe<
      Array<BusinessVerificationAttachmentType>
    >;
    phone?: Maybe<Scalars["String"]["output"]>;
    profile?: Maybe<Profile>;
    progresses: ProgressConnection;
    promotions: PromotionConnection;
    salesManagers?: Maybe<Array<Employee>>;
    specialPermissionCertificateAttachments?: Maybe<
      Array<BusinessVerificationAttachmentType>
    >;
    status: Scalars["String"]["output"];
    storeLocations: StoreLocationConnection;
    supplySegmentIds: Array<Scalars["ID"]["output"]>;
    supplySegments: Array<SupplySegment>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    vendor: Vendor;
    web?: Maybe<Scalars["String"]["output"]>;
    website: Website;
  };

export type BusinessClientAuditsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AuditFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type BusinessClientCanIArgs = {
  action: CanIAction;
};

export type BusinessClientClientsStoreArgs = {
  id: Scalars["ID"]["input"];
};

export type BusinessClientClientsStoresArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ClientsStoreFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type BusinessClientCustomerCreditDataArgs = {
  supplierStockLocationId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type BusinessClientCustomerDetailCreditDataArgs = {
  supplierStockLocationId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type BusinessClientEmployeesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<BusinessUserFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type BusinessClientGamificationsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<GamificationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type BusinessClientOrdersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OrderFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  status?: InputMaybe<OrderStatus>;
};

export type BusinessClientProgressesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<GamificationProgressFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type BusinessClientPromotionsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  dateType?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PromotionFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  from?: InputMaybe<Scalars["String"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  to?: InputMaybe<Scalars["String"]["input"]>;
};

export type BusinessClientStoreLocationsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<StoreLocationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type BusinessClientCode = BaseModelInterface &
  Node & {
    __typename?: "BusinessClientCode";
    branch: Branch;
    branchId: Scalars["ID"]["output"];
    canI: Scalars["Boolean"]["output"];
    code: Scalars["String"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    vendor: Vendor;
    vendorId: Scalars["ID"]["output"];
  };

export type BusinessClientCodeCanIArgs = {
  action: CanIAction;
};

export type BusinessClientConnection = {
  __typename?: "BusinessClientConnection";
  edges: Array<BusinessClientEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<BusinessClient>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type BusinessClientConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type BusinessClientConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type BusinessClientEdge = {
  __typename?: "BusinessClientEdge";
  cursor: Scalars["String"]["output"];
  node: BusinessClient;
};

export type BusinessClientFilter = {
  aliasOrClientName?: InputMaybe<StringFilter>;
  client?: InputMaybe<VendorFilter>;
  clientName?: InputMaybe<StringFilter>;
  clientNameOrClientRegister?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  email?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  localId?: InputMaybe<StringFilter>;
  msCode?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  organizationId?: InputMaybe<StringFilter>;
  phone?: InputMaybe<StringFilter>;
  phoneOrEmail?: InputMaybe<StringFilter>;
  phoneOrEmailOrLocalIdOrClientNameOrClientRegister?: InputMaybe<StringFilter>;
  salesManagers?: InputMaybe<BusinessUserFilter>;
  segmentsClients?: InputMaybe<SegmentClientFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  vendor?: InputMaybe<VendorFilter>;
  vendorNameOrVendorRegister?: InputMaybe<StringFilter>;
  withStatus?: InputMaybe<StringFilter>;
};

export type BusinessClientInput = {
  address?: InputMaybe<Scalars["String"]["input"]>;
  categoryId?: InputMaybe<Scalars["ID"]["input"]>;
  clientsStoresObjects?: InputMaybe<Array<ClientsStoreInputType>>;
  directorPassportFiles?: InputMaybe<
    Array<BusinessVerificationAttachmentInput>
  >;
  email?: InputMaybe<Scalars["String"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  isIndividual?: InputMaybe<Scalars["Boolean"]["input"]>;
  logo?: InputMaybe<Scalars["Upload"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  organizationCertificateFiles?: InputMaybe<
    Array<BusinessVerificationAttachmentInput>
  >;
  organizationId?: InputMaybe<Scalars["String"]["input"]>;
  personPassportFiles?: InputMaybe<Array<BusinessVerificationAttachmentInput>>;
  phone?: InputMaybe<Scalars["String"]["input"]>;
  specialPermissionCertificateFiles?: InputMaybe<
    Array<BusinessVerificationAttachmentInput>
  >;
  status?: InputMaybe<B2bAllowedStatusTypeEnum | `${B2bAllowedStatusTypeEnum}`>;
};

export type BusinessType = BaseModelInterface &
  Node & {
    __typename?: "BusinessType";
    canI: Scalars["Boolean"]["output"];
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    createdBy?: Maybe<User>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type BusinessTypeCanIArgs = {
  action: CanIAction;
};

export type BusinessTypeConnection = {
  __typename?: "BusinessTypeConnection";
  edges: Array<BusinessTypeEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<BusinessType>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type BusinessTypeConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type BusinessTypeConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type BusinessTypeEdge = {
  __typename?: "BusinessTypeEdge";
  cursor: Scalars["String"]["output"];
  node: BusinessType;
};

export type BusinessTypeFilter = {
  code?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type BusinessUserFilter = {
  addedBy?: InputMaybe<UserFilter>;
  assetRoles?: InputMaybe<AssetFilter>;
  businessUserGroups?: InputMaybe<BusinessUserGroupFilter>;
  createdAt?: InputMaybe<DateFilter>;
  email?: InputMaybe<StringFilter>;
  emailOrFirstNameOrLastNameOrMobile?: InputMaybe<StringFilter>;
  firstName?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  lastName?: InputMaybe<StringFilter>;
  mobile?: InputMaybe<StringFilter>;
  msCode?: InputMaybe<StringFilter>;
  role?: InputMaybe<StringFilter>;
  searchAll?: InputMaybe<Scalars["String"]["input"]>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  vendor?: InputMaybe<VendorFilter>;
};

export enum BusinessUserGroupCodeEnum {
  Director = "DIRECTOR",
}

export type BusinessUserGroupFilter = {
  code?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type BusinessUserGroupInput = {
  code?: InputMaybe<BusinessUserGroupCodeEnum | `${BusinessUserGroupCodeEnum}`>;
};

export type BusinessUserGroupType = BaseModelInterface &
  Node & {
    __typename?: "BusinessUserGroupType";
    canI: Scalars["Boolean"]["output"];
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    vendor?: Maybe<Vendor>;
  };

export type BusinessUserGroupTypeCanIArgs = {
  action: CanIAction;
};

export type BusinessUserGroupTypeConnection = {
  __typename?: "BusinessUserGroupTypeConnection";
  edges: Array<BusinessUserGroupTypeEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<BusinessUserGroupType>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type BusinessUserGroupTypeConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type BusinessUserGroupTypeConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type BusinessUserGroupTypeEdge = {
  __typename?: "BusinessUserGroupTypeEdge";
  cursor: Scalars["String"]["output"];
  node: BusinessUserGroupType;
};

export type BusinessUserProfile = Node & {
  __typename?: "BusinessUserProfile";
  businessUserVerifications: Array<BusinessVerificationType>;
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  lastApprovalComment?: Maybe<ApprovalComment>;
  status: B2bApprovalDecisionStatusEnum | `${B2bApprovalDecisionStatusEnum}`;
};

export type BusinessUserProfileInput = {
  status?: InputMaybe<
    B2bApprovalDecisionStatusEnum | `${B2bApprovalDecisionStatusEnum}`
  >;
  verifications?: InputMaybe<Array<BusinessVerificationInput>>;
};

export type BusinessUsersSegment = BaseModelInterface &
  Node & {
    __typename?: "BusinessUsersSegment";
    businessUser: Employee;
    businessUserId: Scalars["ID"]["output"];
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    expiresAt: Scalars["ISO8601Date"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    segment: SupplySegment;
    segmentId: Scalars["ID"]["output"];
    sourceId?: Maybe<Scalars["ID"]["output"]>;
    sourceType?: Maybe<Scalars["String"]["output"]>;
    status: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type BusinessUsersSegmentCanIArgs = {
  action: CanIAction;
};

export type BusinessUsersSegmentConnection = {
  __typename?: "BusinessUsersSegmentConnection";
  edges: Array<BusinessUsersSegmentEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<BusinessUsersSegment>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type BusinessUsersSegmentConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type BusinessUsersSegmentConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type BusinessUsersSegmentEdge = {
  __typename?: "BusinessUsersSegmentEdge";
  cursor: Scalars["String"]["output"];
  node: BusinessUsersSegment;
};

export type BusinessUsersSegmentFilter = {
  businessUser?: InputMaybe<BusinessUserFilter>;
  businessUserId?: InputMaybe<IdFilter>;
  createdAt?: InputMaybe<DateFilter>;
  expiresAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  segment?: InputMaybe<SupplySegmentFilter>;
  segmentId?: InputMaybe<IdFilter>;
  status?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type BusinessVerificationAttachmentInput = {
  file: Scalars["Upload"]["input"];
  key: Scalars["String"]["input"];
};

export type BusinessVerificationAttachmentType = BaseModelInterface &
  Node & {
    __typename?: "BusinessVerificationAttachmentType";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    key: Scalars["String"]["output"];
    large?: Maybe<Scalars["String"]["output"]>;
    medium?: Maybe<Scalars["String"]["output"]>;
    original?: Maybe<Scalars["String"]["output"]>;
    originalFileSize?: Maybe<Scalars["Int"]["output"]>;
    small?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type BusinessVerificationAttachmentTypeCanIArgs = {
  action: CanIAction;
};

export type BusinessVerificationInput = {
  attachments?: InputMaybe<Array<BusinessVerificationAttachmentInput>>;
  category: Scalars["String"]["input"];
  preferredExpireAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
};

export type BusinessVerificationType = BaseModelInterface &
  Node & {
    __typename?: "BusinessVerificationType";
    attachments?: Maybe<Array<BusinessVerificationAttachmentType>>;
    canI: Scalars["Boolean"]["output"];
    category?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    createdBy?: Maybe<User>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferredExpireAt?: Maybe<Scalars["ISO8601Date"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type BusinessVerificationTypeCanIArgs = {
  action: CanIAction;
};

export type CalculatorInterface = {
  calculableId?: Maybe<Scalars["Int"]["output"]>;
  calculableType?: Maybe<Scalars["String"]["output"]>;
  canI: Scalars["Boolean"]["output"];
  createdAt: Scalars["ISO8601DateTime"]["output"];
  deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  preferences?: Maybe<Scalars["JSON"]["output"]>;
  type?: Maybe<Scalars["String"]["output"]>;
  updatedAt: Scalars["ISO8601DateTime"]["output"];
};

export type CalculatorInterfaceCanIArgs = {
  action: CanIAction;
};

export type Campaign = BaseModelInterface &
  Node & {
    __typename?: "Campaign";
    campaignContacts: CampaignContactConnection;
    canI: Scalars["Boolean"]["output"];
    contacts: ContactConnection;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    deliveredAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    events: EventConnection;
    eventsCount?: Maybe<Scalars["JSON"]["output"]>;
    fromEmail?: Maybe<Scalars["String"]["output"]>;
    fromName?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    lastEvents?: Maybe<Scalars["JSON"]["output"]>;
    name?: Maybe<Scalars["String"]["output"]>;
    preview?: Maybe<Scalars["String"]["output"]>;
    recipientsCount?: Maybe<Scalars["Int"]["output"]>;
    segment?: Maybe<Segment>;
    slug?: Maybe<Scalars["String"]["output"]>;
    state?: Maybe<Scalars["String"]["output"]>;
    subject?: Maybe<Scalars["String"]["output"]>;
    template?: Maybe<Template>;
    totals?: Maybe<Scalars["JSON"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type CampaignCampaignContactsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type CampaignCanIArgs = {
  action: CanIAction;
};

export type CampaignContactsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type CampaignEventsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<EMailEventFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type CampaignConnection = {
  __typename?: "CampaignConnection";
  edges: Array<CampaignEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Campaign>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type CampaignConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type CampaignConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type CampaignContact = BaseModelInterface &
  Node & {
    __typename?: "CampaignContact";
    campaign?: Maybe<Campaign>;
    canI: Scalars["Boolean"]["output"];
    contact?: Maybe<Contact>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    sentAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type CampaignContactCanIArgs = {
  action: CanIAction;
};

export type CampaignContactConnection = {
  __typename?: "CampaignContactConnection";
  edges: Array<CampaignContactEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<CampaignContact>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type CampaignContactConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type CampaignContactConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type CampaignContactEdge = {
  __typename?: "CampaignContactEdge";
  cursor: Scalars["String"]["output"];
  node: CampaignContact;
};

export type CampaignEdge = {
  __typename?: "CampaignEdge";
  cursor: Scalars["String"]["output"];
  node: Campaign;
};

export type CampaignFilter = {
  createdAt?: InputMaybe<DateFilter>;
  description?: InputMaybe<StringFilter>;
  endsAt?: InputMaybe<DateFilter>;
  fulfillDate?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  location?: InputMaybe<StringFilter>;
  startsAt?: InputMaybe<DateFilter>;
  status?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  vendor?: InputMaybe<VendorFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type CampaignListing = BaseModelInterface &
  Node & {
    __typename?: "CampaignListing";
    campaign: ShoppyCampaign;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    ordersCount: Scalars["Int"]["output"];
    position?: Maybe<Scalars["Int"]["output"]>;
    price: Scalars["Float"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variant: Variant;
  };

export type CampaignListingCanIArgs = {
  action: CanIAction;
};

export type CampaignListingConnection = {
  __typename?: "CampaignListingConnection";
  edges: Array<CampaignListingEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<CampaignListing>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type CampaignListingConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type CampaignListingConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type CampaignListingEdge = {
  __typename?: "CampaignListingEdge";
  cursor: Scalars["String"]["output"];
  node: CampaignListing;
};

export type CampaignListingFilter = {
  campaign?: InputMaybe<CampaignFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  price?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  variant?: InputMaybe<VariantFilter>;
};

export type CampaignListingInput = {
  position?: InputMaybe<Scalars["Int"]["input"]>;
  price: Scalars["Float"]["input"];
  quantity?: InputMaybe<Scalars["Int"]["input"]>;
  variantId: Scalars["ID"]["input"];
};

export enum CanIAction {
  Delete = "delete",
  Update = "update",
}

export type CancelReason = BaseModelInterface &
  Node & {
    __typename?: "CancelReason";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["JSON"]["output"]>;
    description?: Maybe<Scalars["String"]["output"]>;
    display?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    position?: Maybe<Scalars["Int"]["output"]>;
    title?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    websiteId?: Maybe<Scalars["Int"]["output"]>;
  };

export type CancelReasonCanIArgs = {
  action: CanIAction;
};

export type CancelReasonConnection = {
  __typename?: "CancelReasonConnection";
  edges: Array<CancelReasonEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<CancelReason>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type CancelReasonConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type CancelReasonConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type CancelReasonEdge = {
  __typename?: "CancelReasonEdge";
  cursor: Scalars["String"]["output"];
  node: CancelReason;
};

export type CandyInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "CandyInvoice";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    candyMiniApp?: Maybe<Scalars["Int"]["output"]>;
    candyUser?: Maybe<Scalars["Int"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceNumber?: Maybe<Scalars["String"]["output"]>;
    qrLink?: Maybe<Scalars["String"]["output"]>;
    receiver?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type CandyInvoiceCanIArgs = {
  action: CanIAction;
};

export type Card = BaseModelInterface &
  Node & {
    __typename?: "Card";
    canI: Scalars["Boolean"]["output"];
    cardHolder?: Maybe<Scalars["String"]["output"]>;
    cardIssuer?: Maybe<Scalars["String"]["output"]>;
    cardNumber: Scalars["String"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    expiresAt: Scalars["String"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    status: Scalars["String"]["output"];
    tokenDate?: Maybe<Scalars["ISO8601Date"]["output"]>;
    type: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user: User;
    userId: Scalars["ID"]["output"];
    website: Website;
    websiteId: Scalars["ID"]["output"];
  };

export type CardCanIArgs = {
  action: CanIAction;
};

export type CartItemInput = {
  attachments?: InputMaybe<Array<Scalars["Upload"]["input"]>>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  options?: InputMaybe<Scalars["JSON"]["input"]>;
  quantity?: InputMaybe<Scalars["Int"]["input"]>;
  sku?: InputMaybe<Scalars["String"]["input"]>;
  variantId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type ChatAttachment = BaseModelInterface &
  Node & {
    __typename?: "ChatAttachment";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    large?: Maybe<Scalars["String"]["output"]>;
    medium?: Maybe<Scalars["String"]["output"]>;
    original?: Maybe<Scalars["String"]["output"]>;
    small?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type ChatAttachmentCanIArgs = {
  action: CanIAction;
};

export type Cinema = BaseModelInterface &
  Node & {
    __typename?: "Cinema";
    address?: Maybe<Scalars["String"]["output"]>;
    branch?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    city?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    email?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    idx?: Maybe<Scalars["String"]["output"]>;
    image?: Maybe<Scalars["String"]["output"]>;
    lat?: Maybe<Scalars["String"]["output"]>;
    latLon?: Maybe<Array<Scalars["String"]["output"]>>;
    lon?: Maybe<Scalars["String"]["output"]>;
    movies?: Maybe<Array<Movie>>;
    name?: Maybe<Scalars["String"]["output"]>;
    phone?: Maybe<Scalars["String"]["output"]>;
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    screens?: Maybe<Array<Screen>>;
    sessions?: Maybe<Array<Session>>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type CinemaCanIArgs = {
  action: CanIAction;
};

export type ClientsStore = BaseModelInterface &
  Node & {
    __typename?: "ClientsStore";
    assetRoles: Array<AssetRole>;
    businessClient?: Maybe<BusinessClient>;
    businessVerifications: Array<BusinessVerificationType>;
    canI: Scalars["Boolean"]["output"];
    category?: Maybe<SupplierCategory>;
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    lastApprovalComment?: Maybe<ApprovalComment>;
    lastRelationalAudit?: Maybe<Audit>;
    orders: OrderConnection;
    relationalAudits: AuditConnection;
    status: Scalars["String"]["output"];
    storeLocation?: Maybe<StoreLocation>;
    supplierStockLocations: StockLocationConnection;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type ClientsStoreCanIArgs = {
  action: CanIAction;
};

export type ClientsStoreOrdersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OrderFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  status?: InputMaybe<OrderStatus>;
};

export type ClientsStoreRelationalAuditsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AuditFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type ClientsStoreSupplierStockLocationsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<StockLocationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type ClientsStoreConnection = {
  __typename?: "ClientsStoreConnection";
  edges: Array<ClientsStoreEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<ClientsStore>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type ClientsStoreConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type ClientsStoreConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type ClientsStoreEdge = {
  __typename?: "ClientsStoreEdge";
  cursor: Scalars["String"]["output"];
  node: ClientsStore;
};

export type ClientsStoreFilter = {
  businessClient?: InputMaybe<BusinessClientFilter>;
  category?: InputMaybe<SupplierCategoryFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  statusEq?: InputMaybe<ClientsStoreStatus | `${ClientsStoreStatus}`>;
  storeLocation?: InputMaybe<StoreLocationFilter>;
  supplierStockLocations?: InputMaybe<StockLocationFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type ClientsStoreInputType = {
  businessClientId?: InputMaybe<Scalars["ID"]["input"]>;
  businessVerifications?: InputMaybe<Array<BusinessVerificationInput>>;
  categoryId?: InputMaybe<Scalars["ID"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  status?: InputMaybe<B2bAllowedStatusTypeEnum | `${B2bAllowedStatusTypeEnum}`>;
  storeLocationObject?: InputMaybe<StoreLocationInputType>;
  supplierStockLocationIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
};

export enum ClientsStoreStatus {
  Approved = "approved",
  Declined = "declined",
  Disabled = "disabled",
  Pending = "pending",
  Suspended = "suspended",
}

export type Collect = BaseModelInterface &
  Node & {
    __typename?: "Collect";
    acceptedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    collectedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    driver?: Maybe<User>;
    driverCode?: Maybe<Scalars["String"]["output"]>;
    driverTakenAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    order: Order;
    status?: Maybe<Scalars["String"]["output"]>;
    storeLocation?: Maybe<StoreLocation>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user: User;
    website: Website;
  };

export type CollectCanIArgs = {
  action: CanIAction;
};

export type CollectFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  status?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
};

export type Comment = BaseModelInterface &
  Node & {
    __typename?: "Comment";
    averageRating: Scalars["Float"]["output"];
    canI: Scalars["Boolean"]["output"];
    comment?: Maybe<Scalars["String"]["output"]>;
    commentable?: Maybe<Commentable>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["JSON"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    ip?: Maybe<Scalars["String"]["output"]>;
    isMe: Scalars["Boolean"]["output"];
    mentions: UserConnection;
    myReview?: Maybe<Review>;
    reviews: ReviewConnection;
    title?: Maybe<Scalars["String"]["output"]>;
    totalReviews: Scalars["Int"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    userAgent?: Maybe<Scalars["String"]["output"]>;
    variants: Array<Variant>;
  };

export type CommentCanIArgs = {
  action: CanIAction;
};

export type CommentMentionsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type CommentReviewsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ReviewsFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  isDeleted?: InputMaybe<Scalars["Boolean"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type CommentConnection = {
  __typename?: "CommentConnection";
  edges: Array<CommentEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Comment>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type CommentConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type CommentConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type CommentEdge = {
  __typename?: "CommentEdge";
  cursor: Scalars["String"]["output"];
  node: Comment;
};

export type Commentable = FeedbackType;

export type CommerceAddress = BaseModelInterface &
  Node & {
    __typename?: "CommerceAddress";
    address1?: Maybe<Scalars["String"]["output"]>;
    address2?: Maybe<Scalars["String"]["output"]>;
    alternativePhone?: Maybe<Scalars["String"]["output"]>;
    birthday?: Maybe<Scalars["ISO8601Date"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    city?: Maybe<Scalars["String"]["output"]>;
    company?: Maybe<Scalars["String"]["output"]>;
    countryId?: Maybe<Scalars["ID"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    districtId?: Maybe<Scalars["ID"]["output"]>;
    firstname?: Maybe<Scalars["String"]["output"]>;
    gender?: Maybe<Scalars["String"]["output"]>;
    geoPoint?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    isCompany?: Maybe<Scalars["Boolean"]["output"]>;
    lastname?: Maybe<Scalars["String"]["output"]>;
    mnQuarterId?: Maybe<Scalars["ID"]["output"]>;
    phone?: Maybe<Scalars["String"]["output"]>;
    quarterId?: Maybe<Scalars["ID"]["output"]>;
    stateId?: Maybe<Scalars["ID"]["output"]>;
    stateName?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    what3words?: Maybe<Scalars["String"]["output"]>;
    zipId?: Maybe<Scalars["ID"]["output"]>;
    zipcode?: Maybe<Scalars["String"]["output"]>;
  };

export type CommerceAddressCanIArgs = {
  action: CanIAction;
};

export type CommerceOrder = BaseModelInterface &
  Node & {
    __typename?: "CommerceOrder";
    address?: Maybe<CommerceAddress>;
    adjustmentTotal: Scalars["Float"]["output"];
    billAddress?: Maybe<Address>;
    canI: Scalars["Boolean"]["output"];
    canceledAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    canceler?: Maybe<User>;
    comments: Array<OrderComment>;
    completedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    confirmationDelivered?: Maybe<Scalars["Boolean"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    currency?: Maybe<Scalars["String"]["output"]>;
    driver?: Maybe<User>;
    driverTakenAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    ebarimt?: Maybe<Scalars["Boolean"]["output"]>;
    email?: Maybe<Scalars["String"]["output"]>;
    extraData?: Maybe<Scalars["JSON"]["output"]>;
    flag?: Maybe<Scalars["String"]["output"]>;
    flaggedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    flaggedBy?: Maybe<User>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    images: Array<ProductImage>;
    itemCount?: Maybe<Scalars["Int"]["output"]>;
    itemTotal: Scalars["Float"]["output"];
    khanId?: Maybe<Scalars["String"]["output"]>;
    latestNote?: Maybe<Scalars["String"]["output"]>;
    leaseLeft?: Maybe<Scalars["Float"]["output"]>;
    leaseState?: Maybe<Scalars["String"]["output"]>;
    lineItems: Array<LineItem>;
    number?: Maybe<Scalars["String"]["output"]>;
    paidAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    parcels: Array<Parcel>;
    paymentState?: Maybe<Scalars["String"]["output"]>;
    paymentTotal?: Maybe<Scalars["Float"]["output"]>;
    paymentTypes: Array<Scalars["String"]["output"]>;
    payments: Array<Payment>;
    pickPackAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    pickPackBy?: Maybe<User>;
    pickPackCompletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    pickPackNumber?: Maybe<Scalars["Int"]["output"]>;
    pickPackOtp?: Maybe<Scalars["String"]["output"]>;
    pickPackStatus?: Maybe<Scalars["String"]["output"]>;
    pickPackTrackingNumber?: Maybe<Scalars["String"]["output"]>;
    shipAddress?: Maybe<Address>;
    shipmentState?: Maybe<Scalars["String"]["output"]>;
    shipmentTotal: Scalars["Float"]["output"];
    shipments: Array<Shipment>;
    shippedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    shippingMethod?: Maybe<ShippingMethod>;
    specialInstructions?: Maybe<Scalars["String"]["output"]>;
    state?: Maybe<Scalars["String"]["output"]>;
    storeLocation?: Maybe<StoreLocation>;
    stores: Array<Brand>;
    total: Scalars["Float"]["output"];
    totalAppliedStoreCredit: Scalars["Float"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    waitUntil?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    website?: Maybe<Website>;
    whenToShip?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
  };

export type CommerceOrderCanIArgs = {
  action: CanIAction;
};

export type CommerceOrderConnection = {
  __typename?: "CommerceOrderConnection";
  edges: Array<CommerceOrderEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<CommerceOrder>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type CommerceOrderConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type CommerceOrderConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type CommerceOrderEdge = {
  __typename?: "CommerceOrderEdge";
  cursor: Scalars["String"]["output"];
  node: CommerceOrder;
};

export type Commission = BaseModelInterface &
  Node & {
    __typename?: "Commission";
    airline?: Maybe<Airline>;
    canI: Scalars["Boolean"]["output"];
    commission1?: Maybe<Scalars["Float"]["output"]>;
    commission2?: Maybe<Scalars["Float"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    fm1?: Maybe<Scalars["Float"]["output"]>;
    fm2?: Maybe<Scalars["Float"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    isCodeShare: Scalars["Boolean"]["output"];
    rule1?: Maybe<Scalars["JSON"]["output"]>;
    rule2?: Maybe<Scalars["JSON"]["output"]>;
    stockAirline?: Maybe<Airline>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type CommissionCanIArgs = {
  action: CanIAction;
};

export type CommissionConnection = {
  __typename?: "CommissionConnection";
  edges: Array<CommissionEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Commission>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type CommissionConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type CommissionConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type CommissionEdge = {
  __typename?: "CommissionEdge";
  cursor: Scalars["String"]["output"];
  node: Commission;
};

export type Contact = BaseModelInterface &
  Node & {
    __typename?: "Contact";
    campaignContacts: Array<CampaignContact>;
    campaigns: Array<Campaign>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    email?: Maybe<Scalars["String"]["output"]>;
    events: Array<Event>;
    firstName?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    lastName?: Maybe<Scalars["String"]["output"]>;
    source?: Maybe<Scalars["String"]["output"]>;
    state?: Maybe<Scalars["String"]["output"]>;
    tagList: Array<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    website?: Maybe<Website>;
  };

export type ContactCanIArgs = {
  action: CanIAction;
};

export type ContactConnection = {
  __typename?: "ContactConnection";
  edges: Array<ContactEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Contact>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type ContactConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type ContactConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type ContactEdge = {
  __typename?: "ContactEdge";
  cursor: Scalars["String"]["output"];
  node: Contact;
};

export type Contract = BaseModelInterface &
  Node & {
    __typename?: "Contract";
    attachments: Array<Attachment>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
  };

export type ContractCanIArgs = {
  action: CanIAction;
};

export type ContractFilter = {
  createdAt?: InputMaybe<DateFilter>;
  handedAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  isMaster?: InputMaybe<BoolFilter>;
  order?: InputMaybe<OrderFilter>;
  receivedAt?: InputMaybe<DateFilter>;
  registerNum?: InputMaybe<StringFilter>;
  signedAt?: InputMaybe<DateFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
};

export type CorporateGateway = BaseModelInterface &
  Node & {
    __typename?: "CorporateGateway";
    accounts: Array<Scalars["String"]["output"]>;
    active?: Maybe<Scalars["Boolean"]["output"]>;
    bank?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    statements: Array<BankTransaction>;
    transferAccount?: Maybe<Scalars["String"]["output"]>;
    transferPassword?: Maybe<Scalars["String"]["output"]>;
    transferUsername?: Maybe<Scalars["String"]["output"]>;
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type CorporateGatewayCanIArgs = {
  action: CanIAction;
};

export type CorporateGatewayStatementsArgs = {
  account: Scalars["String"]["input"];
  fetch?: InputMaybe<Scalars["Boolean"]["input"]>;
  from?: InputMaybe<Scalars["String"]["input"]>;
  record?: InputMaybe<Scalars["String"]["input"]>;
  size?: InputMaybe<Scalars["String"]["input"]>;
  to?: InputMaybe<Scalars["String"]["input"]>;
};

export type Country = Node & {
  __typename?: "Country";
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  iso?: Maybe<Scalars["String"]["output"]>;
  iso3?: Maybe<Scalars["String"]["output"]>;
  isoName?: Maybe<Scalars["String"]["output"]>;
  name?: Maybe<Scalars["String"]["output"]>;
  numcode?: Maybe<Scalars["Int"]["output"]>;
  states: Array<State>;
  statesRequired?: Maybe<Scalars["Boolean"]["output"]>;
  updatedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
  zipcodeRequired?: Maybe<Scalars["Boolean"]["output"]>;
};

export type CountryNameArgs = {
  fallback?: InputMaybe<Scalars["String"]["input"]>;
  locale?: InputMaybe<Scalars["String"]["input"]>;
};

export type CountryConnection = {
  __typename?: "CountryConnection";
  edges: Array<CountryEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Country>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type CountryConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type CountryConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type CountryEdge = {
  __typename?: "CountryEdge";
  cursor: Scalars["String"]["output"];
  node: Country;
};

export type CountryFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  iso?: InputMaybe<StringFilter>;
  iso3?: InputMaybe<StringFilter>;
  isoName?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  numcode?: InputMaybe<IntFilter>;
  statesRequired?: InputMaybe<BoolFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type Coupon = BaseModelInterface &
  Node & {
    __typename?: "Coupon";
    amount?: Maybe<Scalars["Int"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["String"]["output"]>;
    deactivatedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    giftMessage?: Maybe<Scalars["String"]["output"]>;
    id: Scalars["ID"]["output"];
    inventoryUnitId?: Maybe<Scalars["ID"]["output"]>;
    lineItem: LineItem;
    number: Scalars["String"]["output"];
    order: Order;
    part?: Maybe<Variant>;
    product: Product;
    receiverEmail?: Maybe<Scalars["String"]["output"]>;
    receiverName?: Maybe<Scalars["String"]["output"]>;
    receiverPhone?: Maybe<Scalars["String"]["output"]>;
    scannedBy?: Maybe<User>;
    sender?: Maybe<Scalars["String"]["output"]>;
    sentAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    state?: Maybe<Scalars["String"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    usedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    user?: Maybe<User>;
    variant: Variant;
    vendor?: Maybe<Vendor>;
    website?: Maybe<Website>;
  };

export type CouponCanIArgs = {
  action: CanIAction;
};

export type CouponCodeUsage = BaseModelInterface &
  Node & {
    __typename?: "CouponCodeUsage";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    couponCode: Scalars["String"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    order?: Maybe<Order>;
    orderId?: Maybe<Scalars["ID"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    status: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    usedBy?: Maybe<User>;
    usedById?: Maybe<Scalars["ID"]["output"]>;
  };

export type CouponCodeUsageCanIArgs = {
  action: CanIAction;
};

export type CouponCodeUsageConnection = {
  __typename?: "CouponCodeUsageConnection";
  edges: Array<CouponCodeUsageEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<CouponCodeUsage>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type CouponCodeUsageConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type CouponCodeUsageConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type CouponCodeUsageEdge = {
  __typename?: "CouponCodeUsageEdge";
  cursor: Scalars["String"]["output"];
  node: CouponCodeUsage;
};

export type CouponCodeUsageFilter = {
  couponCode?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  order?: InputMaybe<OrderFilter>;
  orderId?: InputMaybe<IdFilter>;
  promotion?: InputMaybe<PromotionFilter>;
  promotionId?: InputMaybe<IdFilter>;
  status?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  usedBy?: InputMaybe<UserFilter>;
  usedById?: InputMaybe<IdFilter>;
};

export type CouponCodeUsagePerUser = Node &
  RuleInterface & {
    __typename?: "CouponCodeUsagePerUser";
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredCouponCodeUsagePerUserLimit: Scalars["Int"]["output"];
    productGroupId?: Maybe<Scalars["ID"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type CouponConnection = {
  __typename?: "CouponConnection";
  edges: Array<CouponEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Coupon>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type CouponConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type CouponConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type CouponEdge = {
  __typename?: "CouponEdge";
  cursor: Scalars["String"]["output"];
  node: Coupon;
};

export type CouponFilter = {
  amount?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateFilter>;
  deactivatedAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  itemType?: InputMaybe<StringFilter>;
  lineItem?: InputMaybe<LineItemFilter>;
  number?: InputMaybe<StringFilter>;
  order?: InputMaybe<OrderFilter>;
  receiverEmail?: InputMaybe<StringFilter>;
  receiverName?: InputMaybe<StringFilter>;
  receiverPhone?: InputMaybe<StringFilter>;
  scannedBy?: InputMaybe<UserFilter>;
  sentAt?: InputMaybe<DateFilter>;
  state?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  usedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  userEmailOrUserMobileOrUserFirstName?: InputMaybe<StringFilter>;
  vendor?: InputMaybe<VendorFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type CouponManifest = Node &
  ProductManifestInterface & {
    __typename?: "CouponManifest";
    brand?: Maybe<Brand>;
    canSupply?: Maybe<Scalars["Boolean"]["output"]>;
    coupons: Array<Coupon>;
    expireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    fulfillDuration?: Maybe<Scalars["Int"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    image?: Maybe<Scalars["String"]["output"]>;
    maxQty?: Maybe<Scalars["Int"]["output"]>;
    name: Scalars["String"]["output"];
    optionsText?: Maybe<Scalars["String"]["output"]>;
    price: Scalars["Float"]["output"];
    productCat?: Maybe<Scalars["String"]["output"]>;
    sku?: Maybe<Scalars["String"]["output"]>;
    slug: Scalars["String"]["output"];
    totalOnHand?: Maybe<Scalars["Int"]["output"]>;
    vendor?: Maybe<Vendor>;
    weight?: Maybe<Scalars["Float"]["output"]>;
  };

export type CreateAdjustment = ActionInterface &
  Node & {
    __typename?: "CreateAdjustment";
    calculator: CalculatorInterface;
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    position?: Maybe<Scalars["Int"]["output"]>;
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    promotion: Promotion;
    promotionActionLineItems: Array<PromotionActionLineItem>;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
  };

export type CreateItemAdjustments = ActionInterface &
  Node & {
    __typename?: "CreateItemAdjustments";
    calculator: CalculatorInterface;
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    position?: Maybe<Scalars["Int"]["output"]>;
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredActionWithQtyLimit: Scalars["Int"]["output"];
    preferredExcludeOnSale: Scalars["Boolean"]["output"];
    preferredLimit?: Maybe<Scalars["Int"]["output"]>;
    preferredMatchPolicy: Scalars["String"]["output"];
    preferredOnlyOnCheapest: Scalars["Boolean"]["output"];
    promotion: Promotion;
    promotionActionLineItems: Array<PromotionActionLineItem>;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
  };

export type CreateLicensePoolInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  licenses: Array<Scalars["String"]["input"]>;
  variantId: Scalars["ID"]["input"];
};

export type CreateLicensePoolPayload = {
  __typename?: "CreateLicensePoolPayload";
  clientMutationId?: Maybe<Scalars["String"]["output"]>;
  success?: Maybe<Scalars["Boolean"]["output"]>;
};

export type CreateLineItems = ActionInterface &
  Node & {
    __typename?: "CreateLineItems";
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    position?: Maybe<Scalars["Int"]["output"]>;
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredInterval?: Maybe<Scalars["Int"]["output"]>;
    preferredMatchPolicy: Scalars["String"]["output"];
    preferredRule: Scalars["String"]["output"];
    promotion: Promotion;
    promotionActionLineItems: Array<PromotionActionLineItem>;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
  };

export type CreateOnePlusOneItems = ActionInterface &
  Node & {
    __typename?: "CreateOnePlusOneItems";
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    position?: Maybe<Scalars["Int"]["output"]>;
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredMatchPolicy: Scalars["String"]["output"];
    preferredMaxAmount: Scalars["Float"]["output"];
    preferredMaxQuantity: Scalars["BigInt"]["output"];
    preferredMinAmount: Scalars["Float"]["output"];
    preferredMinQuantity: Scalars["Int"]["output"];
    promotion: Promotion;
    promotionActionLineItems: Array<PromotionActionLineItem>;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
  };

export type CreateOrderInput = {
  billAddress: AddressInput;
  channel?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  clientVendorId?: InputMaybe<Scalars["ID"]["input"]>;
  clientsStoreId?: InputMaybe<Scalars["ID"]["input"]>;
  couponCode?: InputMaybe<Scalars["String"]["input"]>;
  ebarimt?: InputMaybe<Scalars["Boolean"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  extraData?: InputMaybe<Scalars["JSON"]["input"]>;
  flag?: InputMaybe<Scalars["String"]["input"]>;
  isConfirmation?: InputMaybe<Scalars["Boolean"]["input"]>;
  lineItems?: InputMaybe<Array<LineItemInput>>;
  parcelDelivery?: InputMaybe<Scalars["Boolean"]["input"]>;
  paymentState?: InputMaybe<Scalars["Boolean"]["input"]>;
  payments?: InputMaybe<Array<Scalars["JSON"]["input"]>>;
  shipAddress?: InputMaybe<AddressInput>;
  useBilling?: InputMaybe<Scalars["Boolean"]["input"]>;
  userId: Scalars["ID"]["input"];
  websiteId: Scalars["ID"]["input"];
  whenToShip?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
};

export type CreatePropertyAdjustments = ActionInterface &
  Node & {
    __typename?: "CreatePropertyAdjustments";
    calculator: CalculatorInterface;
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    position?: Maybe<Scalars["Int"]["output"]>;
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredExcludeOnSale: Scalars["Boolean"]["output"];
    preferredLimit?: Maybe<Scalars["Int"]["output"]>;
    preferredMatchPolicy: Scalars["String"]["output"];
    preferredOnlyOnCheapest: Scalars["Boolean"]["output"];
    preferredPropertiesValues: Scalars["JSON"]["output"];
    promotion: Promotion;
    promotionActionLineItems: Array<PromotionActionLineItem>;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
  };

export type CreditCard = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "CreditCard";
    audits: AuditConnection;
    canI: Scalars["Boolean"]["output"];
    cardType?: Maybe<Scalars["String"]["output"]>;
    ccType?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    creditLimit?: Maybe<Scalars["Float"]["output"]>;
    currentBalance?: Maybe<Scalars["Float"]["output"]>;
    default: Scalars["Boolean"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    lastDigits?: Maybe<Scalars["String"]["output"]>;
    minPayment?: Maybe<Scalars["Float"]["output"]>;
    month?: Maybe<Scalars["String"]["output"]>;
    name?: Maybe<Scalars["String"]["output"]>;
    number?: Maybe<Scalars["String"]["output"]>;
    openBalance?: Maybe<Scalars["Float"]["output"]>;
    registerNum?: Maybe<Scalars["String"]["output"]>;
    statements?: Maybe<Scalars["JSON"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    token?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    website?: Maybe<Website>;
    year?: Maybe<Scalars["String"]["output"]>;
  };

export type CreditCardAuditsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AuditFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type CreditCardCanIArgs = {
  action: CanIAction;
};

export type CreditCardStatementsArgs = {
  monthEnd?: InputMaybe<Scalars["String"]["input"]>;
  monthStart: Scalars["String"]["input"];
};

export type CreditCardConnection = {
  __typename?: "CreditCardConnection";
  edges: Array<CreditCardEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<CreditCard>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type CreditCardConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type CreditCardConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type CreditCardEdge = {
  __typename?: "CreditCardEdge";
  cursor: Scalars["String"]["output"];
  node: CreditCard;
};

export type CreditCardsFilter = {
  cardType?: InputMaybe<EnumStringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  lastDigits?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  number?: InputMaybe<StringFilter>;
  registerNum?: InputMaybe<StringFilter>;
  status?: InputMaybe<EnumStringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
};

export type CreditProfile = BaseModelInterface &
  Node & {
    __typename?: "CreditProfile";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    wallet?: Maybe<Wallet>;
  };

export type CreditProfileCanIArgs = {
  action: CanIAction;
};

export type CreditWellbeeSource = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "CreditWellbeeSource";
    businessClient?: Maybe<BusinessClient>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    paymentMethod?: Maybe<PaymentMethod>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
  };

export type CreditWellbeeSourceCanIArgs = {
  action: CanIAction;
};

export type DateFilter = {
  eq?: InputMaybe<Scalars["String"]["input"]>;
  gt?: InputMaybe<Scalars["String"]["input"]>;
  gteq?: InputMaybe<Scalars["String"]["input"]>;
  lt?: InputMaybe<Scalars["String"]["input"]>;
  lteq?: InputMaybe<Scalars["String"]["input"]>;
  notEq?: InputMaybe<Scalars["String"]["input"]>;
  notNull?: InputMaybe<Scalars["Boolean"]["input"]>;
  null?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type DeleteLicensePoolInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  licensePoolId: Array<Scalars["ID"]["input"]>;
};

export type DeleteLicensePoolPayload = {
  __typename?: "DeleteLicensePoolPayload";
  clientMutationId?: Maybe<Scalars["String"]["output"]>;
  success?: Maybe<Scalars["Boolean"]["output"]>;
};

export type DeliveryPackage = BaseModelInterface &
  Node & {
    __typename?: "DeliveryPackage";
    canI: Scalars["Boolean"]["output"];
    courier: Scalars["String"]["output"];
    courierOrdNumber?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["String"]["output"]>;
    deliveryLogs?: Maybe<Scalars["JSON"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    itemCount?: Maybe<Scalars["Int"]["output"]>;
    items: Array<DeliveryPackageItem>;
    label?: Maybe<Scalars["JSON"]["output"]>;
    labelPdfUrl?: Maybe<Scalars["String"]["output"]>;
    lineItems: Array<LineItem>;
    merchant: Merchant;
    number: Scalars["String"]["output"];
    order: Order;
    parcelNumbers: Array<Scalars["String"]["output"]>;
    pinCode?: Maybe<Scalars["String"]["output"]>;
    sender?: Maybe<User>;
    senderId?: Maybe<Scalars["ID"]["output"]>;
    sendingQueuedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    sendingStatus: Scalars["String"]["output"];
    status: Scalars["String"]["output"];
    trackingStatus?: Maybe<Scalars["String"]["output"]>;
    trackingUpdatedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    travel?: Maybe<Scalars["String"]["output"]>;
    tutPup: Scalars["Boolean"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    weight?: Maybe<Scalars["Float"]["output"]>;
  };

export type DeliveryPackageCanIArgs = {
  action: CanIAction;
};

export type DeliveryPackageConnection = {
  __typename?: "DeliveryPackageConnection";
  edges: Array<DeliveryPackageEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<DeliveryPackage>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type DeliveryPackageConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type DeliveryPackageConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type DeliveryPackageEdge = {
  __typename?: "DeliveryPackageEdge";
  cursor: Scalars["String"]["output"];
  node: DeliveryPackage;
};

export type DeliveryPackageItem = BaseModelInterface &
  Node & {
    __typename?: "DeliveryPackageItem";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    inventoryUnit: InventoryUnit;
    inventoryUnitId: Scalars["ID"]["output"];
    lineItem: LineItem;
    lineItemId: Scalars["ID"]["output"];
    package: DeliveryPackage;
    packageId: Scalars["ID"]["output"];
    parcelNumber?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type DeliveryPackageItemCanIArgs = {
  action: CanIAction;
};

export type DepartmentStore = BaseModelInterface &
  Node & {
    __typename?: "DepartmentStore";
    address?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    cover?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["JSON"]["output"]>;
    description?: Maybe<Scalars["String"]["output"]>;
    email?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    logo?: Maybe<Scalars["String"]["output"]>;
    map?: Maybe<Scalars["String"]["output"]>;
    phoneNumber?: Maybe<Scalars["String"]["output"]>;
    schedule?: Maybe<Scalars["JSON"]["output"]>;
    stockLocations: StockLocationConnection;
    storeLocations: StoreLocationConnection;
    stores: BrandConnection;
    timeSheets?: Maybe<Scalars["JSON"]["output"]>;
    title?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    winterTimeSheets?: Maybe<Scalars["JSON"]["output"]>;
  };

export type DepartmentStoreCanIArgs = {
  action: CanIAction;
};

export type DepartmentStoreStockLocationsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<StockLocationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type DepartmentStoreStoreLocationsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<StoreLocationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type DepartmentStoreStoresArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<BrandFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type DepartmentStoreConnection = {
  __typename?: "DepartmentStoreConnection";
  edges: Array<DepartmentStoreEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<DepartmentStore>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type DepartmentStoreConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type DepartmentStoreConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type DepartmentStoreEdge = {
  __typename?: "DepartmentStoreEdge";
  cursor: Scalars["String"]["output"];
  node: DepartmentStore;
};

export type DepartmentStoreFilter = {
  address?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  description?: InputMaybe<StringFilter>;
  email?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  phoneNumber?: InputMaybe<StringFilter>;
  timeSheets?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type Device = BaseModelInterface &
  Node & {
    __typename?: "Device";
    adId?: Maybe<Scalars["String"]["output"]>;
    amountSpent?: Maybe<Scalars["Float"]["output"]>;
    application?: Maybe<Application>;
    badgeCount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    country?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    deviceModel?: Maybe<Scalars["String"]["output"]>;
    deviceOs?: Maybe<Scalars["String"]["output"]>;
    deviceType?: Maybe<Scalars["Int"]["output"]>;
    gameVersion?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    identifier?: Maybe<Scalars["String"]["output"]>;
    ip?: Maybe<Scalars["String"]["output"]>;
    lang?: Maybe<Scalars["String"]["output"]>;
    language?: Maybe<Scalars["String"]["output"]>;
    lastActive?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    oneSignalId?: Maybe<Scalars["String"]["output"]>;
    sessionCount?: Maybe<Scalars["Int"]["output"]>;
    subscribed?: Maybe<Scalars["Int"]["output"]>;
    tags?: Maybe<Scalars["String"]["output"]>;
    timezone?: Maybe<Scalars["Int"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    webAuth?: Maybe<Scalars["String"]["output"]>;
    webP256?: Maybe<Scalars["String"]["output"]>;
    website?: Maybe<Website>;
  };

export type DeviceCanIArgs = {
  action: CanIAction;
};

export type DeviceConnection = {
  __typename?: "DeviceConnection";
  edges: Array<DeviceEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Device>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type DeviceConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type DeviceConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type DeviceEdge = {
  __typename?: "DeviceEdge";
  cursor: Scalars["String"]["output"];
  node: Device;
};

export type DigiPayInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "DigiPayInvoice";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceId?: Maybe<Scalars["String"]["output"]>;
    invoiceNumber?: Maybe<Scalars["String"]["output"]>;
    redirectUrl?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type DigiPayInvoiceCanIArgs = {
  action: CanIAction;
};

export type DigitalContract = BaseModelInterface &
  Node & {
    __typename?: "DigitalContract";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    handedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    id: Scalars["ID"]["output"];
    isMaster?: Maybe<Scalars["Boolean"]["output"]>;
    order: Order;
    receivedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    registerNum?: Maybe<Scalars["String"]["output"]>;
    signedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user: User;
  };

export type DigitalContractCanIArgs = {
  action: CanIAction;
};

export type DigitalCreditInvoice = BaseModelInterface &
  Node & {
    __typename?: "DigitalCreditInvoice";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceNumber?: Maybe<Scalars["String"]["output"]>;
    requestNumber?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type DigitalCreditInvoiceCanIArgs = {
  action: CanIAction;
};

export type Dispatch = BaseModelInterface &
  Node & {
    __typename?: "Dispatch";
    address?: Maybe<Scalars["String"]["output"]>;
    calls: Array<DispatchCall>;
    callsCount?: Maybe<Scalars["Int"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    lastCallAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    latitude?: Maybe<Scalars["String"]["output"]>;
    longitude?: Maybe<Scalars["String"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    target: Target;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type DispatchCanIArgs = {
  action: CanIAction;
};

export type DispatchCall = BaseModelInterface &
  Node & {
    __typename?: "DispatchCall";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    dispatch: Dispatch;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    latitude?: Maybe<Scalars["String"]["output"]>;
    longitude?: Maybe<Scalars["String"]["output"]>;
    recipientUser: User;
    status: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type DispatchCallCanIArgs = {
  action: CanIAction;
};

export type DispatchCallConnection = {
  __typename?: "DispatchCallConnection";
  edges: Array<DispatchCallEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<DispatchCall>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type DispatchCallConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type DispatchCallConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type DispatchCallEdge = {
  __typename?: "DispatchCallEdge";
  cursor: Scalars["String"]["output"];
  node: DispatchCall;
};

export type DispatchCallFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  status?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type District = Node & {
  __typename?: "District";
  children: Array<Quarter>;
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  name?: Maybe<Scalars["String"]["output"]>;
  preferences?: Maybe<Scalars["JSON"]["output"]>;
  quarters: Array<Quarter>;
  state?: Maybe<State>;
  stateId?: Maybe<Scalars["ID"]["output"]>;
  zip?: Maybe<Zipcode>;
};

export type DistrictNameArgs = {
  fallback?: InputMaybe<Scalars["String"]["input"]>;
  locale?: InputMaybe<Scalars["String"]["input"]>;
};

export type DistrictConnection = {
  __typename?: "DistrictConnection";
  edges: Array<DistrictEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<District>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type DistrictConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type DistrictConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type DistrictEdge = {
  __typename?: "DistrictEdge";
  cursor: Scalars["String"]["output"];
  node: District;
};

export type DistrictFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  stateId?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type Donation = BaseModelInterface &
  Node & {
    __typename?: "Donation";
    active?: Maybe<Scalars["Boolean"]["output"]>;
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    donationType?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    isAnonymous?: Maybe<Scalars["Boolean"]["output"]>;
    phone?: Maybe<Scalars["String"]["output"]>;
    product?: Maybe<Product>;
    sender?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    website?: Maybe<Website>;
  };

export type DonationCanIArgs = {
  action: CanIAction;
};

export type DonationConnection = {
  __typename?: "DonationConnection";
  edges: Array<DonationEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Donation>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type DonationConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type DonationConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type DonationEdge = {
  __typename?: "DonationEdge";
  cursor: Scalars["String"]["output"];
  node: Donation;
};

export type DonationFilter = {
  active?: InputMaybe<BoolFilter>;
  amount?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateFilter>;
  donationType?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  phone?: InputMaybe<StringFilter>;
  product?: InputMaybe<ProductFilter>;
  sender?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type DonationManifest = Node &
  ProductManifestInterface & {
    __typename?: "DonationManifest";
    brand?: Maybe<Brand>;
    canSupply?: Maybe<Scalars["Boolean"]["output"]>;
    donation?: Maybe<Array<Donation>>;
    expireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    fulfillDuration?: Maybe<Scalars["Int"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    image?: Maybe<Scalars["String"]["output"]>;
    maxQty?: Maybe<Scalars["Int"]["output"]>;
    name: Scalars["String"]["output"];
    optionsText?: Maybe<Scalars["String"]["output"]>;
    price: Scalars["Float"]["output"];
    productCat?: Maybe<Scalars["String"]["output"]>;
    sku?: Maybe<Scalars["String"]["output"]>;
    slug: Scalars["String"]["output"];
    totalOnHand?: Maybe<Scalars["Int"]["output"]>;
    vendor?: Maybe<Vendor>;
    weight?: Maybe<Scalars["Float"]["output"]>;
  };

export type DownloadableAttachment = BaseModelInterface &
  Node & {
    __typename?: "DownloadableAttachment";
    attachment?: Maybe<Scalars["String"]["output"]>;
    attachmentContentType?: Maybe<Scalars["String"]["output"]>;
    attachmentFileName?: Maybe<Scalars["String"]["output"]>;
    attachmentFileSize?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    duration?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    position?: Maybe<Scalars["Int"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variant?: Maybe<Variant>;
  };

export type DownloadableAttachmentCanIArgs = {
  action: CanIAction;
};

export type DownloadableFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type DropshipBrand = BaseModelInterface &
  Node & {
    __typename?: "DropshipBrand";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    key: Scalars["String"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    presentation?: Maybe<Scalars["String"]["output"]>;
    provider: DropshipProvider;
    providerId: Scalars["ID"]["output"];
    slug: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type DropshipBrandCanIArgs = {
  action: CanIAction;
};

export type DropshipBrandConnection = {
  __typename?: "DropshipBrandConnection";
  edges: Array<DropshipBrandEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<DropshipBrand>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type DropshipBrandConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type DropshipBrandConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type DropshipBrandEdge = {
  __typename?: "DropshipBrandEdge";
  cursor: Scalars["String"]["output"];
  node: DropshipBrand;
};

export type DropshipBrandFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  key?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  presentation?: InputMaybe<StringFilter>;
  provider?: InputMaybe<ProviderFilter>;
  providerId?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type DropshipCategory = BaseModelInterface &
  Node & {
    __typename?: "DropshipCategory";
    canI: Scalars["Boolean"]["output"];
    children: Array<DropshipCategory>;
    childrenIds: Array<Scalars["ID"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    depth: Scalars["Int"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    key: Scalars["String"]["output"];
    name: Scalars["String"]["output"];
    parent?: Maybe<DropshipCategory>;
    parentId?: Maybe<Scalars["ID"]["output"]>;
    presentation: Scalars["String"]["output"];
    prettyName: Scalars["String"]["output"];
    productCount?: Maybe<Scalars["Int"]["output"]>;
    provider: DropshipProvider;
    providerId: Scalars["ID"]["output"];
    slug: Scalars["String"]["output"];
    taxonIds: Array<Scalars["ID"]["output"]>;
    taxons: Array<Taxon>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type DropshipCategoryCanIArgs = {
  action: CanIAction;
};

export type DropshipCategoryConnection = {
  __typename?: "DropshipCategoryConnection";
  edges: Array<DropshipCategoryEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<DropshipCategory>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type DropshipCategoryConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type DropshipCategoryConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type DropshipCategoryEdge = {
  __typename?: "DropshipCategoryEdge";
  cursor: Scalars["String"]["output"];
  node: DropshipCategory;
};

export type DropshipCategoryFilter = {
  createdAt?: InputMaybe<DateFilter>;
  depth?: InputMaybe<IntFilter>;
  id?: InputMaybe<IdFilter>;
  key?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  parent?: InputMaybe<DropshipCategoryFilter>;
  parentId?: InputMaybe<IdFilter>;
  presentation?: InputMaybe<StringFilter>;
  productCount?: InputMaybe<IntFilter>;
  provider?: InputMaybe<ProviderFilter>;
  providerId?: InputMaybe<IdFilter>;
  slug?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type DropshipManifest = Node &
  ProductManifestInterface & {
    __typename?: "DropshipManifest";
    brand?: Maybe<Brand>;
    canSupply?: Maybe<Scalars["Boolean"]["output"]>;
    expireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    fulfillDuration?: Maybe<Scalars["Int"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    image?: Maybe<Scalars["String"]["output"]>;
    maxQty?: Maybe<Scalars["Int"]["output"]>;
    name: Scalars["String"]["output"];
    offerId?: Maybe<Scalars["String"]["output"]>;
    optionsText?: Maybe<Scalars["String"]["output"]>;
    price: Scalars["Float"]["output"];
    productCat?: Maybe<Scalars["String"]["output"]>;
    sellerOpenid?: Maybe<Scalars["String"]["output"]>;
    shipmentCost?: Maybe<Scalars["Float"]["output"]>;
    sku?: Maybe<Scalars["String"]["output"]>;
    slug: Scalars["String"]["output"];
    totalOnHand?: Maybe<Scalars["Int"]["output"]>;
    vendor?: Maybe<Vendor>;
    weight?: Maybe<Scalars["Float"]["output"]>;
  };

export type DropshipProduct = BaseModelInterface &
  Node & {
    __typename?: "DropshipProduct";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    currency?: Maybe<Scalars["String"]["output"]>;
    data?: Maybe<Scalars["JSON"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    images?: Maybe<Scalars["JSON"]["output"]>;
    key?: Maybe<Scalars["String"]["output"]>;
    listed?: Maybe<Scalars["Boolean"]["output"]>;
    name?: Maybe<Scalars["String"]["output"]>;
    price?: Maybe<Scalars["Float"]["output"]>;
    provider?: Maybe<DropshipProvider>;
    providerId?: Maybe<Scalars["ID"]["output"]>;
    quantity?: Maybe<Scalars["Float"]["output"]>;
    sku?: Maybe<Scalars["String"]["output"]>;
    slug?: Maybe<Scalars["String"]["output"]>;
    syncedAt?: Maybe<Scalars["ISO8601Date"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type DropshipProductCanIArgs = {
  action: CanIAction;
};

export type DropshipProductConnection = {
  __typename?: "DropshipProductConnection";
  edges: Array<DropshipProductEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<DropshipProduct>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type DropshipProductConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type DropshipProductConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type DropshipProductEdge = {
  __typename?: "DropshipProductEdge";
  cursor: Scalars["String"]["output"];
  node: DropshipProduct;
};

export type DropshipProductFilter = {
  createdAt?: InputMaybe<DateFilter>;
  currency?: InputMaybe<IntFilter>;
  id?: InputMaybe<IdFilter>;
  key?: InputMaybe<StringFilter>;
  listed?: InputMaybe<BoolFilter>;
  name?: InputMaybe<StringFilter>;
  price?: InputMaybe<IntFilter>;
  providerId?: InputMaybe<StringFilter>;
  quantity?: InputMaybe<IntFilter>;
  sku?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  syncedAt?: InputMaybe<DateFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type DropshipProvider = BaseModelInterface &
  Node & {
    __typename?: "DropshipProvider";
    brands: DropshipBrandConnection;
    canI: Scalars["Boolean"]["output"];
    categories: DropshipCategoryConnection;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    currency?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    products: DropshipProductConnection;
    search: Scalars["JSON"]["output"];
    status?: Maybe<Scalars["String"]["output"]>;
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    vendor?: Maybe<Vendor>;
  };

export type DropshipProviderBrandsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<DropshipBrandFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type DropshipProviderCanIArgs = {
  action: CanIAction;
};

export type DropshipProviderCategoriesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<DropshipCategoryFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type DropshipProviderProductsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<DropshipProductFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type DropshipProviderSearchArgs = {
  brandIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  categoryIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  ids?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
};

export type DropshipProviderConnection = {
  __typename?: "DropshipProviderConnection";
  edges: Array<DropshipProviderEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<DropshipProvider>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type DropshipProviderConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type DropshipProviderConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type DropshipProviderEdge = {
  __typename?: "DropshipProviderEdge";
  cursor: Scalars["String"]["output"];
  node: DropshipProvider;
};

export type DynamicMenu = BaseModelInterface &
  Node & {
    __typename?: "DynamicMenu";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["JSON"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    system?: Maybe<Scalars["Boolean"]["output"]>;
    title?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type DynamicMenuCanIArgs = {
  action: CanIAction;
};

export type DynamicPage = BaseModelInterface &
  Node & {
    __typename?: "DynamicPage";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    createdBy?: Maybe<User>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    items?: Maybe<Array<Scalars["JSON"]["output"]>>;
    language?: Maybe<Scalars["String"]["output"]>;
    layout?: Maybe<Scalars["String"]["output"]>;
    menuId?: Maybe<Scalars["ID"]["output"]>;
    metaDescription?: Maybe<Scalars["String"]["output"]>;
    metaImage?: Maybe<Image>;
    metaImageId?: Maybe<Scalars["ID"]["output"]>;
    metaKeywords?: Maybe<Scalars["String"]["output"]>;
    metaTitle?: Maybe<Scalars["String"]["output"]>;
    otherLanguages: Array<DynamicPage>;
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    rawItems?: Maybe<Array<Scalars["JSON"]["output"]>>;
    slug?: Maybe<Scalars["String"]["output"]>;
    subPages: Array<DynamicPage>;
    title?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    vendor?: Maybe<Vendor>;
    vendorId?: Maybe<Scalars["ID"]["output"]>;
    visible?: Maybe<Scalars["Boolean"]["output"]>;
    website?: Maybe<Website>;
  };

export type DynamicPageCanIArgs = {
  action: CanIAction;
};

export type DynamicPageConnection = {
  __typename?: "DynamicPageConnection";
  edges: Array<DynamicPageEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<DynamicPage>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type DynamicPageConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type DynamicPageConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type DynamicPageEdge = {
  __typename?: "DynamicPageEdge";
  cursor: Scalars["String"]["output"];
  node: DynamicPage;
};

export type EMailBounceFilter = {
  createdAt?: InputMaybe<DateFilter>;
  email?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type EMailCampaignFilter = {
  createdAt?: InputMaybe<DateFilter>;
  fromEmail?: InputMaybe<StringFilter>;
  fromName?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  preview?: InputMaybe<StringFilter>;
  segmentName?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  state?: InputMaybe<StringFilter>;
  subject?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type EMailContactFilter = {
  createdAt?: InputMaybe<DateFilter>;
  email?: InputMaybe<StringFilter>;
  firstName?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  lastName?: InputMaybe<StringFilter>;
  rating?: InputMaybe<IntFilter>;
  segment?: InputMaybe<EMailSegmentFilter>;
  segmentId?: InputMaybe<IdFilter>;
  source?: InputMaybe<StringFilter>;
  state?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type EMailContactInput = {
  additionalInfo?: InputMaybe<Scalars["String"]["input"]>;
  email: Scalars["String"]["input"];
  firstName?: InputMaybe<Scalars["String"]["input"]>;
  lastName?: InputMaybe<Scalars["String"]["input"]>;
};

export type EMailEventFilter = {
  contact?: InputMaybe<EMailContactFilter>;
  createdAt?: InputMaybe<DateFilter>;
  eventType?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  sourceId?: InputMaybe<StringFilter>;
  sourceType?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type EMailSegmentFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  operator?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type EMailTemplate = BaseModelInterface &
  Node & {
    __typename?: "EMailTemplate";
    bcc?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["String"]["output"]>;
    from?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    isMjml?: Maybe<Scalars["Boolean"]["output"]>;
    mjml?: Maybe<Scalars["String"]["output"]>;
    reply?: Maybe<Scalars["String"]["output"]>;
    subject?: Maybe<Scalars["String"]["output"]>;
    template?: Maybe<Scalars["String"]["output"]>;
    textTemplate?: Maybe<Scalars["String"]["output"]>;
    title?: Maybe<Scalars["String"]["output"]>;
    to?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type EMailTemplateCanIArgs = {
  action: CanIAction;
};

export type EMailTemplateFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type ETicket = BaseModelInterface &
  Node & {
    __typename?: "ETicket";
    additionalInfo?: Maybe<Scalars["JSON"]["output"]>;
    amount?: Maybe<Scalars["Int"]["output"]>;
    attachmentContentType?: Maybe<Scalars["String"]["output"]>;
    attachmentFileName?: Maybe<Scalars["String"]["output"]>;
    body?: Maybe<Scalars["JSON"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    date?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    deactivatedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    email?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    groupNo?: Maybe<Scalars["Int"]["output"]>;
    id: Scalars["ID"]["output"];
    inventoryUnitId?: Maybe<Scalars["ID"]["output"]>;
    invite?: Maybe<EventInviteItem>;
    inviteId?: Maybe<Scalars["ID"]["output"]>;
    lineItem: LineItem;
    number?: Maybe<Scalars["String"]["output"]>;
    order: Order;
    product: Product;
    qrCode?: Maybe<Scalars["String"]["output"]>;
    qrData?: Maybe<Scalars["String"]["output"]>;
    receiverEmail?: Maybe<Scalars["String"]["output"]>;
    scannedBy?: Maybe<User>;
    seat?: Maybe<Scalars["String"]["output"]>;
    seatInfo?: Maybe<Scalars["JSON"]["output"]>;
    sentAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    usedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    user?: Maybe<User>;
    variant: Variant;
    vendor?: Maybe<Vendor>;
    website: Website;
  };

export type ETicketCanIArgs = {
  action: CanIAction;
};

export type ETicketConnection = {
  __typename?: "ETicketConnection";
  edges: Array<ETicketEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<ETicket>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type ETicketConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type ETicketConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type ETicketDashboard = BaseModelInterface &
  Node & {
    __typename?: "ETicketDashboard";
    activeCount: Scalars["Int"]["output"];
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    scanStats?: Maybe<Scalars["JSON"]["output"]>;
    totalCount: Scalars["Int"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    usedCount: Scalars["Int"]["output"];
    users?: Maybe<Scalars["JSON"]["output"]>;
    variants: Scalars["JSON"]["output"];
  };

export type ETicketDashboardCanIArgs = {
  action: CanIAction;
};

export type ETicketEdge = {
  __typename?: "ETicketEdge";
  cursor: Scalars["String"]["output"];
  node: ETicket;
};

export type ETicketFilter = {
  amount?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  invite?: InputMaybe<EventInviteItemFilter>;
  lineItem?: InputMaybe<LineItemFilter>;
  number?: InputMaybe<StringFilter>;
  order?: InputMaybe<OrderFilter>;
  product?: InputMaybe<ProductFilter>;
  receiverEmail?: InputMaybe<StringFilter>;
  scannedBy?: InputMaybe<UserFilter>;
  scannedByMobileOrScannedByEmail?: InputMaybe<StringFilter>;
  state?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  usedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  variant?: InputMaybe<VariantFilter>;
  vendor?: InputMaybe<VendorFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type ETicketManifest = Node &
  ProductManifestInterface & {
    __typename?: "ETicketManifest";
    brand?: Maybe<Brand>;
    canSupply?: Maybe<Scalars["Boolean"]["output"]>;
    eTickets: Array<ETicket>;
    expireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    fulfillDuration?: Maybe<Scalars["Int"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    image?: Maybe<Scalars["String"]["output"]>;
    maxQty?: Maybe<Scalars["Int"]["output"]>;
    name: Scalars["String"]["output"];
    optionsText?: Maybe<Scalars["String"]["output"]>;
    price: Scalars["Float"]["output"];
    productCat?: Maybe<Scalars["String"]["output"]>;
    sku?: Maybe<Scalars["String"]["output"]>;
    slug: Scalars["String"]["output"];
    totalOnHand?: Maybe<Scalars["Int"]["output"]>;
    vendor?: Maybe<Vendor>;
    weight?: Maybe<Scalars["Float"]["output"]>;
  };

export enum Ebarimt {
  ContractedNotPayer = "contracted_not_payer",
  ContractedVatPayer = "contracted_vat_payer",
  NotPayer = "not_payer",
  NotRegistered = "not_registered",
  SelfPrint = "self_print",
  VatPayer = "vat_payer",
}

export type EbarimtLogFilter = {
  createdAt?: InputMaybe<DateFilter>;
  data?: InputMaybe<StringFilter>;
  func?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  order?: InputMaybe<OrderFilter>;
  request?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
};

export type EducationInput = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  degree?: InputMaybe<Scalars["String"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  profession?: InputMaybe<Scalars["String"]["input"]>;
  school?: InputMaybe<Scalars["String"]["input"]>;
  since?: InputMaybe<Scalars["ISO8601Date"]["input"]>;
};

export type EmergencyContact = BaseModelInterface &
  Node & {
    __typename?: "EmergencyContact";
    address?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    firstName?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    lastName?: Maybe<Scalars["String"]["output"]>;
    mobile?: Maybe<Scalars["String"]["output"]>;
    relation?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
  };

export type EmergencyContactCanIArgs = {
  action: CanIAction;
};

export type EmergencyContactInput = {
  _destroy?: InputMaybe<Scalars["Boolean"]["input"]>;
  address?: InputMaybe<Scalars["String"]["input"]>;
  firstName?: InputMaybe<Scalars["String"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  lastName?: InputMaybe<Scalars["String"]["input"]>;
  mobile?: InputMaybe<Scalars["String"]["input"]>;
  relation?: InputMaybe<Scalars["String"]["input"]>;
};

export type Employee = BaseModelInterface &
  Node & {
    __typename?: "Employee";
    addedBy?: Maybe<User>;
    assetCount?: Maybe<Scalars["Int"]["output"]>;
    assets: AssetRoleConnection;
    bankAccounts?: Maybe<Array<BankAccount>>;
    bcCount?: Maybe<Scalars["Int"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    email?: Maybe<Scalars["String"]["output"]>;
    firstName?: Maybe<Scalars["String"]["output"]>;
    fullName?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    groups?: Maybe<BusinessUserGroupTypeConnection>;
    id: Scalars["ID"]["output"];
    jobTitle?: Maybe<Scalars["String"]["output"]>;
    lastName?: Maybe<Scalars["String"]["output"]>;
    login?: Maybe<Scalars["String"]["output"]>;
    mobile?: Maybe<Scalars["String"]["output"]>;
    msCode?: Maybe<Scalars["String"]["output"]>;
    profile?: Maybe<BusinessUserProfile>;
    role?: Maybe<Scalars["String"]["output"]>;
    salesManagerBonus?: Maybe<Scalars["Float"]["output"]>;
    salesManagerIsVendor?: Maybe<Scalars["Boolean"]["output"]>;
    smartGrid?: Maybe<SmartGrid>;
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    userCount?: Maybe<Scalars["Int"]["output"]>;
    vendor?: Maybe<Vendor>;
  };

export type EmployeeAssetCountArgs = {
  type?: InputMaybe<Scalars["String"]["input"]>;
};

export type EmployeeAssetsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AssetFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type EmployeeBcCountArgs = {
  websiteId: Scalars["ID"]["input"];
};

export type EmployeeCanIArgs = {
  action: CanIAction;
};

export type EmployeeGroupsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<BusinessUserGroupFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type EmployeeUserCountArgs = {
  websiteId: Scalars["ID"]["input"];
};

export type EmployeeConnection = {
  __typename?: "EmployeeConnection";
  edges: Array<EmployeeEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Employee>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type EmployeeConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type EmployeeConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type EmployeeEdge = {
  __typename?: "EmployeeEdge";
  cursor: Scalars["String"]["output"];
  node: Employee;
};

export enum EmployeeRole {
  Admin = "admin",
  Employee = "employee",
}

export type EmploymentInput = {
  address?: InputMaybe<Scalars["String"]["input"]>;
  company?: InputMaybe<Scalars["String"]["input"]>;
  employeeCount?: InputMaybe<Scalars["String"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  jobTitle?: InputMaybe<Scalars["String"]["input"]>;
  phone?: InputMaybe<Scalars["String"]["input"]>;
  since?: InputMaybe<Scalars["ISO8601Date"]["input"]>;
  years?: InputMaybe<Scalars["String"]["input"]>;
};

export type EnumStringFilter = {
  eq?: InputMaybe<Scalars["String"]["input"]>;
  in?: InputMaybe<Array<Scalars["String"]["input"]>>;
  notEq?: InputMaybe<Scalars["String"]["input"]>;
  notIn?: InputMaybe<Array<Scalars["String"]["input"]>>;
  notNull?: InputMaybe<Scalars["Boolean"]["input"]>;
  null?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type ErpIntegration = BaseModelInterface &
  Node & {
    __typename?: "ErpIntegration";
    active?: Maybe<Scalars["Boolean"]["output"]>;
    autoSync?: Maybe<Scalars["Boolean"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    erp?: Maybe<Scalars["String"]["output"]>;
    frequency?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    integrationRecords: IntegrationRecordConnection;
    integrationReports: IntegrationReportConnection;
    matchField?: Maybe<Scalars["String"]["output"]>;
    name?: Maybe<Scalars["String"]["output"]>;
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    repeat?: Maybe<Scalars["String"]["output"]>;
    time?: Maybe<Scalars["String"]["output"]>;
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    vendor?: Maybe<Vendor>;
  };

export type ErpIntegrationCanIArgs = {
  action: CanIAction;
};

export type ErpIntegrationIntegrationRecordsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<IntegrationRecordFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type ErpIntegrationIntegrationReportsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<IntegrationReportFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type ErpIntegrationConnection = {
  __typename?: "ErpIntegrationConnection";
  edges: Array<ErpIntegrationEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<ErpIntegration>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type ErpIntegrationConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type ErpIntegrationConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type ErpIntegrationEdge = {
  __typename?: "ErpIntegrationEdge";
  cursor: Scalars["String"]["output"];
  node: ErpIntegration;
};

export type ErpIntegrationFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  vendor?: InputMaybe<VendorFilter>;
};

export type Event = BaseModelInterface &
  Node & {
    __typename?: "Event";
    canI: Scalars["Boolean"]["output"];
    client?: Maybe<Scalars["String"]["output"]>;
    contact?: Maybe<Contact>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    device?: Maybe<Scalars["String"]["output"]>;
    eventType?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    ip?: Maybe<Scalars["String"]["output"]>;
    note?: Maybe<Scalars["String"]["output"]>;
    sourceId?: Maybe<Scalars["ID"]["output"]>;
    sourceType?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userAgent?: Maybe<Scalars["String"]["output"]>;
  };

export type EventCanIArgs = {
  action: CanIAction;
};

export type EventConnection = {
  __typename?: "EventConnection";
  edges: Array<EventEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Event>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type EventConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type EventConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type EventEdge = {
  __typename?: "EventEdge";
  cursor: Scalars["String"]["output"];
  node: Event;
};

export type EventEntree = Order | User;

export type EventEntryFilter = {
  createdAt?: InputMaybe<DateFilter>;
  description?: InputMaybe<StringFilter>;
  entree?: InputMaybe<UserFilter>;
  entreeId?: InputMaybe<IdFilter>;
  entreeType?: InputMaybe<StringFilter>;
  entryDate?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  score?: InputMaybe<IntFilter>;
  sourceId?: InputMaybe<IdFilter>;
  sourceType?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  website?: InputMaybe<WebsiteFilter>;
  winning?: InputMaybe<PromotionFilter>;
  winningId?: InputMaybe<IdFilter>;
  winningType?: InputMaybe<StringFilter>;
};

export type EventEntryWinning = BaseModelInterface &
  Node & {
    __typename?: "EventEntryWinning";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    eventEntry: EventEntry;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    source?: Maybe<EventWinning>;
    sourceId?: Maybe<Scalars["ID"]["output"]>;
    sourceType?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type EventEntryWinningCanIArgs = {
  action: CanIAction;
};

export type EventInvite = BaseModelInterface &
  Node & {
    __typename?: "EventInvite";
    canI: Scalars["Boolean"]["output"];
    company: Scalars["String"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    eTickets?: Maybe<ETicketConnection>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    items?: Maybe<EventInviteItemConnection>;
    number: Scalars["String"]["output"];
    order?: Maybe<Order>;
    orderId?: Maybe<Scalars["ID"]["output"]>;
    product: Product;
    productId: Scalars["ID"]["output"];
    quantity?: Maybe<Scalars["Int"]["output"]>;
    references?: Maybe<Scalars["JSON"]["output"]>;
    status: Scalars["String"]["output"];
    ticketsCount?: Maybe<Scalars["Int"]["output"]>;
    total?: Maybe<Scalars["Float"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    usedTicketsCount?: Maybe<Scalars["Int"]["output"]>;
    user: User;
    userId: Scalars["ID"]["output"];
    website: Website;
    websiteId: Scalars["ID"]["output"];
  };

export type EventInviteCanIArgs = {
  action: CanIAction;
};

export type EventInviteETicketsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ETicketFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type EventInviteItemsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<EventInviteItemFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type EventInviteConnection = {
  __typename?: "EventInviteConnection";
  edges: Array<EventInviteEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<EventInvite>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type EventInviteConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type EventInviteConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type EventInviteEdge = {
  __typename?: "EventInviteEdge";
  cursor: Scalars["String"]["output"];
  node: EventInvite;
};

export type EventInviteFilter = {
  company?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  description?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  number?: InputMaybe<StringFilter>;
  order?: InputMaybe<OrderFilter>;
  product?: InputMaybe<ProductFilter>;
  status?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  userMobileOrUserEmail?: InputMaybe<StringFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type EventInviteItem = BaseModelInterface &
  Node & {
    __typename?: "EventInviteItem";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    eTickets: ETicketConnection;
    email: Scalars["String"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invite: EventInvite;
    inviteId: Scalars["ID"]["output"];
    mobile?: Maybe<Scalars["String"]["output"]>;
    quantity: Scalars["Int"]["output"];
    receiverName: Scalars["String"]["output"];
    status: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variant: Variant;
    variantId: Scalars["ID"]["output"];
  };

export type EventInviteItemCanIArgs = {
  action: CanIAction;
};

export type EventInviteItemETicketsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ETicketFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type EventInviteItemConnection = {
  __typename?: "EventInviteItemConnection";
  edges: Array<EventInviteItemEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<EventInviteItem>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type EventInviteItemConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type EventInviteItemConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type EventInviteItemEdge = {
  __typename?: "EventInviteItemEdge";
  cursor: Scalars["String"]["output"];
  node: EventInviteItem;
};

export type EventInviteItemFilter = {
  createdAt?: InputMaybe<DateFilter>;
  eTickets?: InputMaybe<ETicketFilter>;
  email?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  invite?: InputMaybe<EventInviteFilter>;
  inviteId?: InputMaybe<IdFilter>;
  receiverName?: InputMaybe<StringFilter>;
  status?: InputMaybe<EnumStringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  variant?: InputMaybe<VariantFilter>;
  variantId?: InputMaybe<IdFilter>;
};

export type EventWinning = Promotion | StoreCredit;

export type FeatureType = BaseModelInterface &
  Node & {
    __typename?: "FeatureType";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    feature: Scalars["String"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website: Website;
  };

export type FeatureTypeCanIArgs = {
  action: CanIAction;
};

export type Featured = BaseModelInterface &
  Node & {
    __typename?: "Featured";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    createdUser?: Maybe<User>;
    description?: Maybe<Scalars["String"]["output"]>;
    from?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    isActive: Scalars["Boolean"]["output"];
    target?: Maybe<FeaturedTarget>;
    targetId: Scalars["ID"]["output"];
    targetType: Scalars["String"]["output"];
    to?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type FeaturedCanIArgs = {
  action: CanIAction;
};

export type FeaturedConnection = {
  __typename?: "FeaturedConnection";
  edges: Array<FeaturedEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Featured>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type FeaturedConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type FeaturedConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type FeaturedEdge = {
  __typename?: "FeaturedEdge";
  cursor: Scalars["String"]["output"];
  node: Featured;
};

export type FeaturedFilter = {
  createdAt?: InputMaybe<DateFilter>;
  description?: InputMaybe<StringFilter>;
  from?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  isActive?: InputMaybe<BoolFilter>;
  targetId?: InputMaybe<IntFilter>;
  targetType?: InputMaybe<StringFilter>;
  to?: InputMaybe<DateFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type FeaturedTarget = Brand | Listing | Merchant;

export type FeedbackFilter = {
  body?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  description?: InputMaybe<StringFilter>;
  email?: InputMaybe<StringFilter>;
  firstName?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  imageFileName?: InputMaybe<StringFilter>;
  lastName?: InputMaybe<StringFilter>;
  mainType?: InputMaybe<StringFilter>;
  orderNumber?: InputMaybe<StringFilter>;
  phone?: InputMaybe<StringFilter>;
  phoneOrUserMobile?: InputMaybe<StringFilter>;
  resolver?: InputMaybe<UserFilter>;
  status?: InputMaybe<StringFilter>;
  topicParentTitle?: InputMaybe<StringFilter>;
  topicTitle?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  userEmailOrUserMobile?: InputMaybe<StringFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type FeedbackTopic = BaseModelInterface &
  Node & {
    __typename?: "FeedbackTopic";
    canI: Scalars["Boolean"]["output"];
    children: Array<FeedbackTopic>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    feedbacks: FeedbackTypeConnection;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    orderRequired: Scalars["Boolean"]["output"];
    parent?: Maybe<FeedbackTopic>;
    parentId?: Maybe<Scalars["ID"]["output"]>;
    position?: Maybe<Scalars["Int"]["output"]>;
    positive: Scalars["Boolean"]["output"];
    title?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website: Website;
    websiteId: Scalars["ID"]["output"];
  };

export type FeedbackTopicCanIArgs = {
  action: CanIAction;
};

export type FeedbackTopicFeedbacksArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<FeedbackFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type FeedbackTopicTitleArgs = {
  fallback?: InputMaybe<Scalars["String"]["input"]>;
  locale?: InputMaybe<Scalars["String"]["input"]>;
};

export type FeedbackTopicConnection = {
  __typename?: "FeedbackTopicConnection";
  edges: Array<FeedbackTopicEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<FeedbackTopic>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type FeedbackTopicConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type FeedbackTopicConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type FeedbackTopicEdge = {
  __typename?: "FeedbackTopicEdge";
  cursor: Scalars["String"]["output"];
  node: FeedbackTopic;
};

export type FeedbackTopicFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  orderRequired?: InputMaybe<BoolFilter>;
  parentId?: InputMaybe<StringFilter>;
  parentTitle?: InputMaybe<StringFilter>;
  positive?: InputMaybe<BoolFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  websiteId?: InputMaybe<StringFilter>;
};

export type FeedbackType = BaseModelInterface &
  Node & {
    __typename?: "FeedbackType";
    body: Scalars["String"]["output"];
    canI: Scalars["Boolean"]["output"];
    comments: CommentConnection;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    email?: Maybe<Scalars["String"]["output"]>;
    firstName?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    image?: Maybe<Scalars["String"]["output"]>;
    lastName?: Maybe<Scalars["String"]["output"]>;
    mainType?: Maybe<Scalars["String"]["output"]>;
    order?: Maybe<Order>;
    phone?: Maybe<Scalars["String"]["output"]>;
    resolver?: Maybe<User>;
    status?: Maybe<Scalars["String"]["output"]>;
    topic?: Maybe<FeedbackTopic>;
    totalComments?: Maybe<Scalars["Int"]["output"]>;
    unreadCommentsCount: Scalars["Int"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    website: Website;
  };

export type FeedbackTypeCanIArgs = {
  action: CanIAction;
};

export type FeedbackTypeCommentsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type FeedbackTypeConnection = {
  __typename?: "FeedbackTypeConnection";
  edges: Array<FeedbackTypeEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<FeedbackType>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type FeedbackTypeConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type FeedbackTypeConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type FeedbackTypeEdge = {
  __typename?: "FeedbackTypeEdge";
  cursor: Scalars["String"]["output"];
  node: FeedbackType;
};

export type FinanceInput = {
  businessIncome?: InputMaybe<Scalars["Float"]["input"]>;
  creditLimit?: InputMaybe<Scalars["Float"]["input"]>;
  groceryOutcome?: InputMaybe<Scalars["Float"]["input"]>;
  hasCreditcard?: InputMaybe<Scalars["Boolean"]["input"]>;
  hasLoan?: InputMaybe<Scalars["Boolean"]["input"]>;
  householdOutcome?: InputMaybe<Scalars["Float"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  income?: InputMaybe<Scalars["Float"]["input"]>;
  loanExceed60?: InputMaybe<Scalars["Boolean"]["input"]>;
  loanpaymentAmoutMonthly?: InputMaybe<Scalars["Float"]["input"]>;
  otherIncome?: InputMaybe<Scalars["Float"]["input"]>;
  otherOutcome?: InputMaybe<Scalars["Float"]["input"]>;
};

export type FirstOrder = Node &
  RuleInterface & {
    __typename?: "FirstOrder";
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    productGroupId?: Maybe<Scalars["ID"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type FlatPercentItemTotal = BaseModelInterface &
  CalculatorInterface &
  Node & {
    __typename?: "FlatPercentItemTotal";
    calculableId?: Maybe<Scalars["Int"]["output"]>;
    calculableType?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredFlatPercent: Scalars["Float"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type FlatPercentItemTotalCanIArgs = {
  action: CanIAction;
};

export type FlatPercentOrderTotal = BaseModelInterface &
  CalculatorInterface &
  Node & {
    __typename?: "FlatPercentOrderTotal";
    calculableId?: Maybe<Scalars["Int"]["output"]>;
    calculableType?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredFlatPercent: Scalars["Float"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type FlatPercentOrderTotalCanIArgs = {
  action: CanIAction;
};

export type FlatRate = BaseModelInterface &
  CalculatorInterface &
  Node & {
    __typename?: "FlatRate";
    calculableId?: Maybe<Scalars["Int"]["output"]>;
    calculableType?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredAmount: Scalars["Float"]["output"];
    preferredCurrency: Scalars["String"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type FlatRateCanIArgs = {
  action: CanIAction;
};

export type FlexiRate = BaseModelInterface &
  CalculatorInterface &
  Node & {
    __typename?: "FlexiRate";
    calculableId?: Maybe<Scalars["Int"]["output"]>;
    calculableType?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredAdditionalItem: Scalars["Float"]["output"];
    preferredCurrency: Scalars["String"]["output"];
    preferredFirstItem: Scalars["Float"]["output"];
    preferredMaxItems: Scalars["Int"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type FlexiRateCanIArgs = {
  action: CanIAction;
};

export type Follow = BaseModelInterface &
  Node & {
    __typename?: "Follow";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    followers: FollowerConnection;
    followersCount: Scalars["Int"]["output"];
    following: Scalars["Boolean"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    target?: Maybe<FollowTarget>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type FollowCanIArgs = {
  action: CanIAction;
};

export type FollowFollowersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<FollowerFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type FollowFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  targetId?: InputMaybe<StringFilter>;
  targetType?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  vendorName?: InputMaybe<Scalars["String"]["input"]>;
  website?: InputMaybe<WebsiteFilter>;
};

export type FollowTarget = Brand | Vendor;

export type Follower = BaseModelInterface &
  Node & {
    __typename?: "Follower";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    follow?: Maybe<Follow>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
  };

export type FollowerCanIArgs = {
  action: CanIAction;
};

export type FollowerConnection = {
  __typename?: "FollowerConnection";
  edges: Array<FollowerEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Follower>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type FollowerConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type FollowerConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type FollowerEdge = {
  __typename?: "FollowerEdge";
  cursor: Scalars["String"]["output"];
  node: Follower;
};

export type FollowerFilter = {
  createdAt?: InputMaybe<DateFilter>;
  follow?: InputMaybe<FollowFilter>;
  id?: InputMaybe<IdFilter>;
  status?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  vendorName?: InputMaybe<Scalars["String"]["input"]>;
};

export type Game = BaseModelInterface &
  Node & {
    __typename?: "Game";
    active?: Maybe<Scalars["Boolean"]["output"]>;
    audits: AuditConnection;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    creator?: Maybe<User>;
    description?: Maybe<Scalars["String"]["output"]>;
    expireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    icon?: Maybe<Scalars["String"]["output"]>;
    id: Scalars["ID"]["output"];
    leaderboard: Array<Scalars["JSON"]["output"]>;
    preferredFreeTryGiftCount?: Maybe<Scalars["Int"]["output"]>;
    preferredFreeTryGiftIntervalStartAt?: Maybe<
      Scalars["ISO8601DateTime"]["output"]
    >;
    preferredFreeTryGiftsEnabled?: Maybe<Scalars["Boolean"]["output"]>;
    preferredFreeTryInterval?: Maybe<Scalars["Int"]["output"]>;
    preferredMaxScoreOnSingleInstance?: Maybe<Scalars["Int"]["output"]>;
    preferredOrderTotalThreshold?: Maybe<Scalars["Int"]["output"]>;
    preferredOrderTryApplyOnEachInstance?: Maybe<Scalars["Boolean"]["output"]>;
    preferredOrderTryGiftCount?: Maybe<Scalars["Int"]["output"]>;
    preferredOrderTryGiftsEnabled?: Maybe<Scalars["Boolean"]["output"]>;
    preferredPrizeDistributionAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    preferredPrizeDistributionPool?: Maybe<Scalars["Int"]["output"]>;
    preferredPrizeDistributionType?: Maybe<Scalars["String"]["output"]>;
    preferredScoreThreshold?: Maybe<Scalars["Int"]["output"]>;
    preferredTotalPrizePool?: Maybe<Scalars["Int"]["output"]>;
    preferredTriesStoreEnabled?: Maybe<Scalars["Boolean"]["output"]>;
    preferredTryStorePrice?: Maybe<Scalars["Int"]["output"]>;
    preferredUserDailyUsageLimit?: Maybe<Scalars["Int"]["output"]>;
    preferredUserTryMaxLimit?: Maybe<Scalars["Int"]["output"]>;
    prizes: Array<GamePrize>;
    startAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    title?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type GameAuditsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AuditFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type GameCanIArgs = {
  action: CanIAction;
};

export type GameConnection = {
  __typename?: "GameConnection";
  edges: Array<GameEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Game>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type GameConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type GameConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type GameEdge = {
  __typename?: "GameEdge";
  cursor: Scalars["String"]["output"];
  node: Game;
};

export type GameFilter = {
  active?: InputMaybe<BoolFilter>;
  createdAt?: InputMaybe<DateFilter>;
  description?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type GamePrize = BaseModelInterface &
  Node & {
    __typename?: "GamePrize";
    availableFrom?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    availableUntil?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    preferredMaxEligibleRank?: Maybe<Scalars["Int"]["output"]>;
    preferredMinEligibleRank?: Maybe<Scalars["Int"]["output"]>;
    quantity?: Maybe<Scalars["Int"]["output"]>;
    source?: Maybe<PrizeSource>;
    sourceId?: Maybe<Scalars["ID"]["output"]>;
    sourceType?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type GamePrizeCanIArgs = {
  action: CanIAction;
};

export type GamePrizeInput = {
  _destroy?: InputMaybe<Scalars["Boolean"]["input"]>;
  availableFrom?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  availableUntil?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  preferredMaxEligibleRank?: InputMaybe<Scalars["Int"]["input"]>;
  preferredMinEligibleRank?: InputMaybe<Scalars["Int"]["input"]>;
  quantity?: InputMaybe<Scalars["Int"]["input"]>;
  sourceId: Scalars["ID"]["input"];
  sourceType: Scalars["String"]["input"];
};

export type Gamification = Node & {
  __typename?: "Gamification";
  actions: Array<GamificationAction>;
  active: Scalars["Boolean"]["output"];
  clientIds?: Maybe<Array<Scalars["ID"]["output"]>>;
  createdAt: Scalars["ISO8601DateTime"]["output"];
  description?: Maybe<Scalars["String"]["output"]>;
  expiresAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
  gid: Scalars["ID"]["output"];
  goalPolicy: Scalars["String"]["output"];
  goalProducts: ProductConnection;
  goalVariants: VariantConnection;
  goals: Array<GamificationGoal>;
  id: Scalars["ID"]["output"];
  name: Scalars["String"]["output"];
  participatingCount: Scalars["Int"]["output"];
  preferences: Scalars["JSON"]["output"];
  progresses: ProgressConnection;
  scope: Scalars["String"]["output"];
  segmentIds?: Maybe<Array<Scalars["ID"]["output"]>>;
  startsAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
  updatedAt: Scalars["ISO8601DateTime"]["output"];
  userIds?: Maybe<Array<Scalars["ID"]["output"]>>;
  vendorId?: Maybe<Scalars["ID"]["output"]>;
  vendorIds?: Maybe<Array<Scalars["ID"]["output"]>>;
  websiteId?: Maybe<Scalars["ID"]["output"]>;
};

export type GamificationGoalProductsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ProductFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type GamificationGoalVariantsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<VariantFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  permission?: InputMaybe<VariantsPermission>;
  sort?: InputMaybe<SortFilter>;
};

export type GamificationProgressesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<GamificationProgressFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type GamificationAction = {
  createdAt: Scalars["ISO8601DateTime"]["output"];
  gamificationId: Scalars["ID"]["output"];
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  preferences?: Maybe<Scalars["JSON"]["output"]>;
  type: Scalars["String"]["output"];
  updatedAt: Scalars["ISO8601DateTime"]["output"];
};

export type GamificationActionAddToSegment = GamificationAction &
  Node & {
    __typename?: "GamificationActionAddToSegment";
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gamificationId: Scalars["ID"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    type: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type GamificationActionCreatePromotion = GamificationAction &
  Node & {
    __typename?: "GamificationActionCreatePromotion";
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gamificationId: Scalars["ID"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    type: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type GamificationActionCreateWallet = GamificationAction &
  Node & {
    __typename?: "GamificationActionCreateWallet";
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gamificationId: Scalars["ID"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    type: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type GamificationActionSendNotification = GamificationAction &
  Node & {
    __typename?: "GamificationActionSendNotification";
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gamificationId: Scalars["ID"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    type: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type GamificationConnection = {
  __typename?: "GamificationConnection";
  edges: Array<GamificationEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Gamification>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type GamificationConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type GamificationConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type GamificationEdge = {
  __typename?: "GamificationEdge";
  cursor: Scalars["String"]["output"];
  node: Gamification;
};

export type GamificationFilter = {
  active?: InputMaybe<BoolFilter>;
  createdAt?: InputMaybe<DateFilter>;
  expiresAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  startsAt?: InputMaybe<DateFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  vendor?: InputMaybe<VendorFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type GamificationGoal = {
  accumulateBy:
    | GamificationGoalAccumulateBy
    | `${GamificationGoalAccumulateBy}`;
  createdAt: Scalars["ISO8601DateTime"]["output"];
  currentCycle: Scalars["String"]["output"];
  gamificationId: Scalars["ID"]["output"];
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  name: Scalars["String"]["output"];
  nextCycle: Scalars["String"]["output"];
  preferences?: Maybe<Scalars["JSON"]["output"]>;
  prevCycle: Scalars["String"]["output"];
  prevCycles: Array<Scalars["String"]["output"]>;
  progresses: ProgressConnection;
  repeat: GamificationGoalRepeat | `${GamificationGoalRepeat}`;
  type: Scalars["String"]["output"];
  updatedAt: Scalars["ISO8601DateTime"]["output"];
};

export type GamificationGoalPrevCyclesArgs = {
  size: Scalars["Int"]["input"];
};

export type GamificationGoalProgressesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<GamificationProgressFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export enum GamificationGoalAccumulateBy {
  Business = "business",
  User = "user",
}

export type GamificationGoalOrderTotal = GamificationGoal &
  Node & {
    __typename?: "GamificationGoalOrderTotal";
    accumulateBy:
      | GamificationGoalAccumulateBy
      | `${GamificationGoalAccumulateBy}`;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    currentCycle: Scalars["String"]["output"];
    gamificationId: Scalars["ID"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name: Scalars["String"]["output"];
    nextCycle: Scalars["String"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    prevCycle: Scalars["String"]["output"];
    prevCycles: Array<Scalars["String"]["output"]>;
    progresses: ProgressConnection;
    repeat: GamificationGoalRepeat | `${GamificationGoalRepeat}`;
    type: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type GamificationGoalOrderTotalPrevCyclesArgs = {
  size: Scalars["Int"]["input"];
};

export type GamificationGoalOrderTotalProgressesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<GamificationProgressFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type GamificationGoalProduct = GamificationGoal &
  Node & {
    __typename?: "GamificationGoalProduct";
    accumulateBy:
      | GamificationGoalAccumulateBy
      | `${GamificationGoalAccumulateBy}`;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    currentCycle: Scalars["String"]["output"];
    gamificationId: Scalars["ID"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name: Scalars["String"]["output"];
    nextCycle: Scalars["String"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    prevCycle: Scalars["String"]["output"];
    prevCycles: Array<Scalars["String"]["output"]>;
    productIds: Array<Scalars["ID"]["output"]>;
    progresses: ProgressConnection;
    repeat: GamificationGoalRepeat | `${GamificationGoalRepeat}`;
    storeIds: Array<Scalars["ID"]["output"]>;
    type: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variantIds: Array<Scalars["ID"]["output"]>;
  };

export type GamificationGoalProductPrevCyclesArgs = {
  size: Scalars["Int"]["input"];
};

export type GamificationGoalProductProgressesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<GamificationProgressFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type GamificationGoalProperty = GamificationGoal &
  Node & {
    __typename?: "GamificationGoalProperty";
    accumulateBy:
      | GamificationGoalAccumulateBy
      | `${GamificationGoalAccumulateBy}`;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    currentCycle: Scalars["String"]["output"];
    gamificationId: Scalars["ID"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name: Scalars["String"]["output"];
    nextCycle: Scalars["String"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    prevCycle: Scalars["String"]["output"];
    prevCycles: Array<Scalars["String"]["output"]>;
    progresses: ProgressConnection;
    repeat: GamificationGoalRepeat | `${GamificationGoalRepeat}`;
    type: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type GamificationGoalPropertyPrevCyclesArgs = {
  size: Scalars["Int"]["input"];
};

export type GamificationGoalPropertyProgressesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<GamificationProgressFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export enum GamificationGoalRepeat {
  Daily = "daily",
  Goal = "goal",
  Monthly = "monthly",
  NoRepeat = "no_repeat",
  Quarterly = "quarterly",
  Weekly = "weekly",
  Yearly = "yearly",
}

export type GamificationProgressFilter = {
  amount?: InputMaybe<IntFilter>;
  amountChange?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateFilter>;
  cycle?: InputMaybe<StringFilter>;
  date?: InputMaybe<DateFilter>;
  gamificationId?: InputMaybe<IdFilter>;
  goalId?: InputMaybe<IdFilter>;
  id?: InputMaybe<IdFilter>;
  lastRecords?: InputMaybe<Scalars["Boolean"]["input"]>;
  order?: InputMaybe<StringFilter>;
  percentage?: InputMaybe<IntFilter>;
  percentageChange?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<StringFilter>;
  vendor?: InputMaybe<StringFilter>;
};

export type GateProLog = BaseModelInterface &
  Node & {
    __typename?: "GateProLog";
    action?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["JSON"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    params?: Maybe<Scalars["JSON"]["output"]>;
    plateNumber?: Maybe<Scalars["String"]["output"]>;
    sessionId: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type GateProLogCanIArgs = {
  action: CanIAction;
};

export enum Gender {
  F = "F",
  M = "M",
}

export type GiftCard = BaseModelInterface &
  Node & {
    __typename?: "GiftCard";
    amount?: Maybe<Scalars["Int"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    currency?: Maybe<Scalars["String"]["output"]>;
    deactivatedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    giftMessage?: Maybe<Scalars["String"]["output"]>;
    id: Scalars["ID"]["output"];
    inventoryUnitId?: Maybe<Scalars["ID"]["output"]>;
    lineItem?: Maybe<LineItem>;
    number?: Maybe<Scalars["String"]["output"]>;
    order?: Maybe<Order>;
    payments: Array<Payment>;
    printed: Scalars["Boolean"]["output"];
    product?: Maybe<Product>;
    purchaserId?: Maybe<Scalars["ID"]["output"]>;
    purchaserName?: Maybe<Scalars["String"]["output"]>;
    recipientEmail?: Maybe<Scalars["String"]["output"]>;
    recipientName?: Maybe<Scalars["String"]["output"]>;
    recipientPhone?: Maybe<Scalars["String"]["output"]>;
    redeemable?: Maybe<Scalars["Boolean"]["output"]>;
    redeemedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    redeemer?: Maybe<User>;
    redeemerVendor?: Maybe<Vendor>;
    redemptionCode?: Maybe<Scalars["String"]["output"]>;
    sendEmailAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    sentAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    storeCredit?: Maybe<StoreCredit>;
    storeCreditId?: Maybe<Scalars["ID"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    usedOrders: Array<Order>;
  };

export type GiftCardCanIArgs = {
  action: CanIAction;
};

export type GiftCardConnection = {
  __typename?: "GiftCardConnection";
  edges: Array<GiftCardEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<GiftCard>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type GiftCardConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type GiftCardConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type GiftCardEdge = {
  __typename?: "GiftCardEdge";
  cursor: Scalars["String"]["output"];
  node: GiftCard;
};

export type GiftCardFilter = {
  amount?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateFilter>;
  deactivatedAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  number?: InputMaybe<StringFilter>;
  order?: InputMaybe<OrderFilter>;
  printed?: InputMaybe<BoolFilter>;
  product?: InputMaybe<ProductFilter>;
  purchaserName?: InputMaybe<StringFilter>;
  recipientEmail?: InputMaybe<StringFilter>;
  recipientName?: InputMaybe<StringFilter>;
  redeemable?: InputMaybe<BoolFilter>;
  redeemedAt?: InputMaybe<DateFilter>;
  redeemer?: InputMaybe<UserFilter>;
  redeemerEmailOrRedeemerMobile?: InputMaybe<StringFilter>;
  redemptionCode?: InputMaybe<StringFilter>;
  sendEmailAt?: InputMaybe<DateFilter>;
  sentAt?: InputMaybe<DateFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  usedOrderNumber?: InputMaybe<StringFilter>;
  usedOrders?: InputMaybe<OrderFilter>;
  variant?: InputMaybe<VariantFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type GiftCardManifest = Node &
  ProductManifestInterface & {
    __typename?: "GiftCardManifest";
    brand?: Maybe<Brand>;
    canSupply?: Maybe<Scalars["Boolean"]["output"]>;
    expireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    fulfillDuration?: Maybe<Scalars["Int"]["output"]>;
    gid: Scalars["ID"]["output"];
    giftCards?: Maybe<Array<GiftCard>>;
    id: Scalars["ID"]["output"];
    image?: Maybe<Scalars["String"]["output"]>;
    maxQty?: Maybe<Scalars["Int"]["output"]>;
    name: Scalars["String"]["output"];
    optionsText?: Maybe<Scalars["String"]["output"]>;
    price: Scalars["Float"]["output"];
    productCat?: Maybe<Scalars["String"]["output"]>;
    sku?: Maybe<Scalars["String"]["output"]>;
    slug: Scalars["String"]["output"];
    totalOnHand?: Maybe<Scalars["Int"]["output"]>;
    vendor?: Maybe<Vendor>;
    weight?: Maybe<Scalars["Float"]["output"]>;
  };

export type GolomtCard = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "GolomtCard";
    bank: Scalars["String"]["output"];
    canI: Scalars["Boolean"]["output"];
    cardHolder: Scalars["String"]["output"];
    cardNumber: Scalars["String"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    creditLimit?: Maybe<Scalars["Float"]["output"]>;
    currentBalance?: Maybe<Scalars["Float"]["output"]>;
    expiry?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    passwordSet?: Maybe<Scalars["Boolean"]["output"]>;
    paymentMethod?: Maybe<PaymentMethod>;
    paymentMethodId?: Maybe<Scalars["ID"]["output"]>;
    statements?: Maybe<Scalars["JSON"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type GolomtCardCanIArgs = {
  action: CanIAction;
};

export type GolomtCardStatementsArgs = {
  from: Scalars["String"]["input"];
  to?: InputMaybe<Scalars["String"]["input"]>;
};

export type GolomtDigitalInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "GolomtDigitalInvoice";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceId?: Maybe<Scalars["String"]["output"]>;
    registerNumber?: Maybe<Scalars["String"]["output"]>;
    requestId?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type GolomtDigitalInvoiceCanIArgs = {
  action: CanIAction;
};

export type GolomtKyc = KycInterface & {
  __typename?: "GolomtKYC";
  address1?: Maybe<Scalars["String"]["output"]>;
  address2?: Maybe<Scalars["String"]["output"]>;
  address3?: Maybe<Scalars["String"]["output"]>;
  apartment?: Maybe<Scalars["String"]["output"]>;
  appointment?: Maybe<Scalars["String"]["output"]>;
  branchId?: Maybe<Scalars["String"]["output"]>;
  city?: Maybe<Scalars["String"]["output"]>;
  country?: Maybe<Scalars["String"]["output"]>;
  createdAt: Scalars["ISO8601DateTime"]["output"];
  creditLimit?: Maybe<Scalars["Int"]["output"]>;
  degree?: Maybe<Scalars["String"]["output"]>;
  doorNo?: Maybe<Scalars["String"]["output"]>;
  embossName?: Maybe<Scalars["String"]["output"]>;
  enrollmentDate?: Maybe<Scalars["String"]["output"]>;
  entry?: Maybe<Scalars["String"]["output"]>;
  expireAt?: Maybe<Scalars["ISO8601Date"]["output"]>;
  isCustomer?: Maybe<Scalars["Boolean"]["output"]>;
  isEbankEnabled?: Maybe<Scalars["Boolean"]["output"]>;
  isMasterAgreement?: Maybe<Scalars["Boolean"]["output"]>;
  isPreApproved?: Maybe<Scalars["Boolean"]["output"]>;
  maritalStatus?: Maybe<Scalars["String"]["output"]>;
  schoolName?: Maybe<Scalars["String"]["output"]>;
  sector?: Maybe<Scalars["String"]["output"]>;
  startDate?: Maybe<Scalars["String"]["output"]>;
  state?: Maybe<Scalars["String"]["output"]>;
  status?: Maybe<KycStatus | `${KycStatus}`>;
  streetName?: Maybe<Scalars["String"]["output"]>;
  subDistrict?: Maybe<Scalars["String"]["output"]>;
  subSector?: Maybe<Scalars["String"]["output"]>;
  town?: Maybe<Scalars["String"]["output"]>;
  type?: Maybe<Scalars["String"]["output"]>;
  updatedAt: Scalars["ISO8601DateTime"]["output"];
  userId?: Maybe<Scalars["ID"]["output"]>;
  vendorId?: Maybe<Scalars["ID"]["output"]>;
  websiteId?: Maybe<Scalars["ID"]["output"]>;
  yearsWork?: Maybe<Scalars["Int"]["output"]>;
};

export type GolomtPosInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "GolomtPosInvoice";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    merchantId?: Maybe<Scalars["String"]["output"]>;
    pan?: Maybe<Scalars["String"]["output"]>;
    referenceNo?: Maybe<Scalars["String"]["output"]>;
    response?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type GolomtPosInvoiceCanIArgs = {
  action: CanIAction;
};

export type HandleCartItemInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  itemAction: ShopperCartItemAction | `${ShopperCartItemAction}`;
  notify?: InputMaybe<Scalars["Boolean"]["input"]>;
  number?: InputMaybe<Scalars["String"]["input"]>;
  quantity?: InputMaybe<Scalars["Int"]["input"]>;
  sku?: InputMaybe<Scalars["String"]["input"]>;
  token?: InputMaybe<Scalars["String"]["input"]>;
  variantId?: InputMaybe<Scalars["ID"]["input"]>;
  variantIndex?: InputMaybe<Scalars["Int"]["input"]>;
};

export type HandlebarTemplate = BaseModelInterface &
  Node & {
    __typename?: "HandlebarTemplate";
    canI: Scalars["Boolean"]["output"];
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    paperSize?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type HandlebarTemplateCanIArgs = {
  action: CanIAction;
};

export type HandlebarTemplateConnection = {
  __typename?: "HandlebarTemplateConnection";
  edges: Array<HandlebarTemplateEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<HandlebarTemplate>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type HandlebarTemplateConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type HandlebarTemplateConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type HandlebarTemplateEdge = {
  __typename?: "HandlebarTemplateEdge";
  cursor: Scalars["String"]["output"];
  node: HandlebarTemplate;
};

export type HandlebarTemplateFilter = {
  code?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  paperSize?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type HiPayInAppInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "HiPayInAppInvoice";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    checkoutId?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceNumber?: Maybe<Scalars["String"]["output"]>;
    requestId?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type HiPayInAppInvoiceCanIArgs = {
  action: CanIAction;
};

export type HiPayInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "HiPayInvoice";
    canI: Scalars["Boolean"]["output"];
    checkoutId?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    requestId?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type HiPayInvoiceCanIArgs = {
  action: CanIAction;
};

export type History = Node &
  RuleInterface & {
    __typename?: "History";
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    productGroupId?: Maybe<Scalars["ID"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type HotelManifest = Node &
  ProductManifestInterface & {
    __typename?: "HotelManifest";
    brand?: Maybe<Brand>;
    canSupply?: Maybe<Scalars["Boolean"]["output"]>;
    expireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    fulfillDuration?: Maybe<Scalars["Int"]["output"]>;
    gid: Scalars["ID"]["output"];
    hotel: Array<HotelProduct>;
    id: Scalars["ID"]["output"];
    image?: Maybe<Scalars["String"]["output"]>;
    maxQty?: Maybe<Scalars["Int"]["output"]>;
    name: Scalars["String"]["output"];
    optionsText?: Maybe<Scalars["String"]["output"]>;
    price: Scalars["Float"]["output"];
    productCat?: Maybe<Scalars["String"]["output"]>;
    sku?: Maybe<Scalars["String"]["output"]>;
    slug: Scalars["String"]["output"];
    totalOnHand?: Maybe<Scalars["Int"]["output"]>;
    vendor?: Maybe<Vendor>;
    weight?: Maybe<Scalars["Float"]["output"]>;
  };

export type HotelProduct = BaseModelInterface &
  Node & {
    __typename?: "HotelProduct";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    guest?: Maybe<Scalars["String"]["output"]>;
    hotel?: Maybe<Scalars["String"]["output"]>;
    id: Scalars["ID"]["output"];
    lineItem?: Maybe<LineItem>;
    name?: Maybe<Scalars["String"]["output"]>;
    price?: Maybe<Scalars["Float"]["output"]>;
    reserve?: Maybe<Scalars["String"]["output"]>;
    room?: Maybe<Scalars["String"]["output"]>;
    sku?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
    website?: Maybe<Website>;
  };

export type HotelProductCanIArgs = {
  action: CanIAction;
};

export type IdFilter = {
  blank?: InputMaybe<Scalars["Boolean"]["input"]>;
  eq?: InputMaybe<Scalars["ID"]["input"]>;
  gt?: InputMaybe<Scalars["Int"]["input"]>;
  gteq?: InputMaybe<Scalars["Int"]["input"]>;
  in?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  lt?: InputMaybe<Scalars["Int"]["input"]>;
  lteq?: InputMaybe<Scalars["Int"]["input"]>;
  notEq?: InputMaybe<Scalars["ID"]["input"]>;
  notIn?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  notNull?: InputMaybe<Scalars["Boolean"]["input"]>;
  null?: InputMaybe<Scalars["Boolean"]["input"]>;
  start?: InputMaybe<Scalars["Int"]["input"]>;
};

export type IkeaCreateProductInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  url: Scalars["String"]["input"];
};

export type IkeaCreateProductPayload = {
  __typename?: "IkeaCreateProductPayload";
  clientMutationId?: Maybe<Scalars["String"]["output"]>;
  errors?: Maybe<Array<Scalars["String"]["output"]>>;
  success: Scalars["Boolean"]["output"];
};

export type Image = BaseModelInterface &
  Node & {
    __typename?: "Image";
    alt?: Maybe<Scalars["String"]["output"]>;
    attachmentContentType?: Maybe<Scalars["String"]["output"]>;
    attachmentFileName?: Maybe<Scalars["String"]["output"]>;
    attachmentFileSize?: Maybe<Scalars["Int"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    endDate?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    group?: Maybe<Scalars["String"]["output"]>;
    id: Scalars["ID"]["output"];
    link?: Maybe<Scalars["String"]["output"]>;
    position?: Maybe<Scalars["Int"]["output"]>;
    title?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    url?: Maybe<Scalars["String"]["output"]>;
    user?: Maybe<User>;
    vendor?: Maybe<Vendor>;
    viewableId?: Maybe<Scalars["ID"]["output"]>;
    viewableType?: Maybe<Scalars["String"]["output"]>;
    website?: Maybe<Website>;
  };

export type ImageCanIArgs = {
  action: CanIAction;
};

export type ImageUrlArgs = {
  format?: InputMaybe<ImageFormat>;
  height: Scalars["Int"]["input"];
  width: Scalars["Int"]["input"];
};

export type ImageConnection = {
  __typename?: "ImageConnection";
  edges: Array<ImageEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Image>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type ImageConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type ImageConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type ImageEdge = {
  __typename?: "ImageEdge";
  cursor: Scalars["String"]["output"];
  node: Image;
};

export enum ImageFormat {
  Jpeg = "jpeg",
  Png = "png",
  Webp = "webp",
}

export type ImageVariation = Node & {
  __typename?: "ImageVariation";
  alt?: Maybe<Scalars["String"]["output"]>;
  attachmentContentType?: Maybe<Scalars["String"]["output"]>;
  attachmentFileName?: Maybe<Scalars["String"]["output"]>;
  attachmentFileSize?: Maybe<Scalars["Int"]["output"]>;
  attachmentId?: Maybe<Scalars["ID"]["output"]>;
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  large?: Maybe<Scalars["String"]["output"]>;
  medium?: Maybe<Scalars["String"]["output"]>;
  original?: Maybe<Scalars["String"]["output"]>;
  small?: Maybe<Scalars["String"]["output"]>;
  url: Scalars["String"]["output"];
};

export type ImageVariationUrlArgs = {
  crop?: InputMaybe<Array<Scalars["Int"]["input"]>>;
  format?: InputMaybe<ImageFormat>;
  quality?: InputMaybe<Scalars["Int"]["input"]>;
  resizeAndPad?: InputMaybe<Array<Scalars["Int"]["input"]>>;
  resizeToFill?: InputMaybe<Array<Scalars["Int"]["input"]>>;
  resizeToFit?: InputMaybe<Array<Scalars["Int"]["input"]>>;
  resizeToLimit?: InputMaybe<Array<Scalars["Int"]["input"]>>;
};

export type IntFilter = {
  blank?: InputMaybe<Scalars["Boolean"]["input"]>;
  eq?: InputMaybe<Scalars["Float"]["input"]>;
  gt?: InputMaybe<Scalars["Float"]["input"]>;
  gteq?: InputMaybe<Scalars["Float"]["input"]>;
  in?: InputMaybe<Array<Scalars["Float"]["input"]>>;
  lt?: InputMaybe<Scalars["Float"]["input"]>;
  lteq?: InputMaybe<Scalars["Float"]["input"]>;
  notEq?: InputMaybe<Scalars["Float"]["input"]>;
  notIn?: InputMaybe<Array<Scalars["Float"]["input"]>>;
  null?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type IntegrationRecord = BaseModelInterface &
  Node & {
    __typename?: "IntegrationRecord";
    body?: Maybe<Scalars["JSON"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    erpIntegration?: Maybe<ErpIntegration>;
    erpIntegrationId?: Maybe<Scalars["ID"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    idx?: Maybe<Scalars["String"]["output"]>;
    notFound?: Maybe<Scalars["Boolean"]["output"]>;
    preferences?: Maybe<Scalars["String"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type IntegrationRecordCanIArgs = {
  action: CanIAction;
};

export type IntegrationRecordConnection = {
  __typename?: "IntegrationRecordConnection";
  edges: Array<IntegrationRecordEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<IntegrationRecord>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type IntegrationRecordConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type IntegrationRecordConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type IntegrationRecordEdge = {
  __typename?: "IntegrationRecordEdge";
  cursor: Scalars["String"]["output"];
  node: IntegrationRecord;
};

export type IntegrationRecordFilter = {
  createdAt?: InputMaybe<DateFilter>;
  erpIntegration?: InputMaybe<ErpIntegrationFilter>;
  erpIntegrationId?: InputMaybe<IdFilter>;
  id?: InputMaybe<IdFilter>;
  idx?: InputMaybe<StringFilter>;
  notFound?: InputMaybe<BoolFilter>;
  preferences?: InputMaybe<StringFilter>;
  status?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type IntegrationReport = BaseModelInterface &
  Node & {
    __typename?: "IntegrationReport";
    body?: Maybe<Scalars["JSON"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    category?: Maybe<Scalars["String"]["output"]>;
    created?: Maybe<Scalars["Int"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["JSON"]["output"]>;
    description?: Maybe<Scalars["String"]["output"]>;
    direction: Scalars["Boolean"]["output"];
    endedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    excluded?: Maybe<Scalars["Int"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    message?: Maybe<Scalars["String"]["output"]>;
    notFound: Scalars["Int"]["output"];
    owner?: Maybe<IntegrationReportSource>;
    ownerId?: Maybe<Scalars["ID"]["output"]>;
    ownerType?: Maybe<Scalars["String"]["output"]>;
    received: Scalars["Int"]["output"];
    skipped: Scalars["Int"]["output"];
    source?: Maybe<IntegrationReportSource>;
    sourceId?: Maybe<Scalars["ID"]["output"]>;
    sourceType?: Maybe<Scalars["String"]["output"]>;
    startedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    synced: Scalars["Int"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type IntegrationReportCanIArgs = {
  action: CanIAction;
};

export type IntegrationReportConnection = {
  __typename?: "IntegrationReportConnection";
  edges: Array<IntegrationReportEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<IntegrationReport>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type IntegrationReportConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type IntegrationReportConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type IntegrationReportEdge = {
  __typename?: "IntegrationReportEdge";
  cursor: Scalars["String"]["output"];
  node: IntegrationReport;
};

export type IntegrationReportFilter = {
  category?: InputMaybe<StringFilter>;
  created?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateFilter>;
  data?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  endedAt?: InputMaybe<DateFilter>;
  excluded?: InputMaybe<IntFilter>;
  id?: InputMaybe<IdFilter>;
  message?: InputMaybe<StringFilter>;
  notFound?: InputMaybe<IntFilter>;
  ownerId?: InputMaybe<IdFilter>;
  ownerType?: InputMaybe<StringFilter>;
  received?: InputMaybe<IntFilter>;
  skipped?: InputMaybe<IntFilter>;
  source?: InputMaybe<OrderFilter>;
  sourceId?: InputMaybe<IdFilter>;
  sourceType?: InputMaybe<StringFilter>;
  startedAt?: InputMaybe<DateFilter>;
  status?: InputMaybe<StringFilter>;
  synced?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type IntegrationReportSource = Order | Vendor | Website;

export type IntendInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "IntendInvoice";
    bonus?: Maybe<Scalars["Int"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    fullName?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    installationPrice?: Maybe<Scalars["Int"]["output"]>;
    limit?: Maybe<Scalars["Int"]["output"]>;
    perMonthAmount?: Maybe<Scalars["Int"]["output"]>;
    phone?: Maybe<Scalars["String"]["output"]>;
    price?: Maybe<Scalars["Int"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    username?: Maybe<Scalars["String"]["output"]>;
  };

export type IntendInvoiceCanIArgs = {
  action: CanIAction;
};

export type Interval = BaseModelInterface &
  CalculatorInterface &
  Node & {
    __typename?: "Interval";
    calculableId?: Maybe<Scalars["Int"]["output"]>;
    calculableType?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredAmount: Scalars["Float"]["output"];
    preferredCurrency: Scalars["String"]["output"];
    preferredInterval: Scalars["Int"]["output"];
    preferredMatchPolicy: Scalars["String"]["output"];
    preferredRule: Scalars["String"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type IntervalCanIArgs = {
  action: CanIAction;
};

export type InventoryUnit = BaseModelInterface &
  Node & {
    __typename?: "InventoryUnit";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    inventoryUnitActions: Array<InventoryUnitAction>;
    lineItem?: Maybe<LineItem>;
    order?: Maybe<Order>;
    originalReturnItem?: Maybe<ReturnItem>;
    pending?: Maybe<Scalars["Boolean"]["output"]>;
    quantity?: Maybe<Scalars["Int"]["output"]>;
    shipment?: Maybe<Shipment>;
    state?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variant?: Maybe<Variant>;
  };

export type InventoryUnitCanIArgs = {
  action: CanIAction;
};

export type InventoryUnitAction = BaseModelInterface &
  Node & {
    __typename?: "InventoryUnitAction";
    action?: Maybe<Scalars["String"]["output"]>;
    actionBy: User;
    canI: Scalars["Boolean"]["output"];
    comment?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    inventoryUnit: InventoryUnit;
    lineItem: LineItem;
    location?: Maybe<StoreLocation>;
    order: Order;
    quantity?: Maybe<Scalars["Int"]["output"]>;
    shipment: Shipment;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variant: Variant;
  };

export type InventoryUnitActionCanIArgs = {
  action: CanIAction;
};

export type InventoryUnitActionConnection = {
  __typename?: "InventoryUnitActionConnection";
  edges: Array<InventoryUnitActionEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<InventoryUnitAction>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type InventoryUnitActionConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type InventoryUnitActionConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type InventoryUnitActionEdge = {
  __typename?: "InventoryUnitActionEdge";
  cursor: Scalars["String"]["output"];
  node: InventoryUnitAction;
};

export type InventoryUnitActionFilter = {
  actionBy?: InputMaybe<UserFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  inventoryUnit?: InputMaybe<InventoryUnitFilter>;
  lineItem?: InputMaybe<LineItemFilter>;
  location?: InputMaybe<StoreLocationFilter>;
  order?: InputMaybe<OrderFilter>;
  quantity?: InputMaybe<StringFilter>;
  shipment?: InputMaybe<ShipmentFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  variant?: InputMaybe<VariantFilter>;
};

export type InventoryUnitFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  lineItems?: InputMaybe<LineItemFilter>;
  order?: InputMaybe<OrderFilter>;
  pending?: InputMaybe<BoolFilter>;
  quantity?: InputMaybe<IntFilter>;
  state?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  variant?: InputMaybe<VariantFilter>;
};

export type Invitation = BaseModelInterface &
  Node & {
    __typename?: "Invitation";
    accepts: InvitationAcceptConnection;
    active?: Maybe<Scalars["Boolean"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    code: Scalars["String"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    endsAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name: Scalars["String"]["output"];
    preferences: Scalars["JSON"]["output"];
    startsAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    type: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userInvitations: UserInvitationConnection;
    website: Website;
    websiteId: Scalars["ID"]["output"];
  };

export type InvitationAcceptsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type InvitationCanIArgs = {
  action: CanIAction;
};

export type InvitationUserInvitationsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type InvitationAccept = BaseModelInterface &
  Node & {
    __typename?: "InvitationAccept";
    acceptedAt: Scalars["ISO8601DateTime"]["output"];
    acceptedUser: User;
    acceptedUserId: Scalars["ID"]["output"];
    active: Scalars["Boolean"]["output"];
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invitation: Invitation;
    invitationId: Scalars["ID"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userInvitation: UserInvitation;
    userInvitationId: Scalars["ID"]["output"];
    website: Website;
    websiteId: Scalars["ID"]["output"];
  };

export type InvitationAcceptCanIArgs = {
  action: CanIAction;
};

export type InvitationAcceptConnection = {
  __typename?: "InvitationAcceptConnection";
  edges: Array<InvitationAcceptEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<InvitationAccept>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type InvitationAcceptConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type InvitationAcceptConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type InvitationAcceptEdge = {
  __typename?: "InvitationAcceptEdge";
  cursor: Scalars["String"]["output"];
  node: InvitationAccept;
};

export type ItemTotal = Node &
  RuleInterface & {
    __typename?: "ItemTotal";
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredAmountMax: Scalars["Float"]["output"];
    preferredAmountMin: Scalars["Float"]["output"];
    preferredOperatorMax: Scalars["String"]["output"];
    preferredOperatorMin: Scalars["String"]["output"];
    productGroupId?: Maybe<Scalars["ID"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type ItineraryInput = {
  aap: Scalars["String"]["input"];
  aat?: InputMaybe<Scalars["String"]["input"]>;
  ad: Scalars["String"]["input"];
  at: Scalars["String"]["input"];
  dap: Scalars["String"]["input"];
  dat?: InputMaybe<Scalars["String"]["input"]>;
  dd: Scalars["String"]["input"];
  dt: Scalars["String"]["input"];
  dv?: InputMaybe<Scalars["Int"]["input"]>;
  eft?: InputMaybe<Scalars["Int"]["input"]>;
  flights?: InputMaybe<Array<SegmentInput>>;
  mcx?: InputMaybe<Scalars["String"]["input"]>;
  stops?: InputMaybe<Scalars["JSON"]["input"]>;
  vc?: InputMaybe<Scalars["String"]["input"]>;
};

export type JobLog = BaseModelInterface &
  Node & {
    __typename?: "JobLog";
    arguments?: Maybe<Scalars["JSON"]["output"]>;
    at?: Maybe<Scalars["Int"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    completedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    errorMessage?: Maybe<Scalars["String"]["output"]>;
    file?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    jobId?: Maybe<Scalars["String"]["output"]>;
    jobType?: Maybe<Scalars["String"]["output"]>;
    latency?: Maybe<Scalars["Int"]["output"]>;
    message?: Maybe<Scalars["String"]["output"]>;
    percentComplete?: Maybe<Scalars["Int"]["output"]>;
    startedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    total?: Maybe<Scalars["Int"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type JobLogCanIArgs = {
  action: CanIAction;
};

export type JobLogConnection = {
  __typename?: "JobLogConnection";
  edges: Array<JobLogEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<JobLog>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type JobLogConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type JobLogConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type JobLogEdge = {
  __typename?: "JobLogEdge";
  cursor: Scalars["String"]["output"];
  node: JobLog;
};

export type JobLogFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  jobId?: InputMaybe<StringFilter>;
  jobType?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  userId?: InputMaybe<IdFilter>;
  vendorId?: InputMaybe<IdFilter>;
  websiteId?: InputMaybe<IdFilter>;
};

export type KeyValue = {
  __typename?: "KeyValue";
  key: Scalars["String"]["output"];
  value: Scalars["String"]["output"];
};

export type KeyValueInput = {
  key: Scalars["String"]["input"];
  value: Scalars["String"]["input"];
};

export type Keyword = BaseModelInterface &
  Node & {
    __typename?: "Keyword";
    alias?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    full?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    gpc?: Maybe<Scalars["String"]["output"]>;
    grouping?: Maybe<Scalars["String"]["output"]>;
    id: Scalars["ID"]["output"];
    mn?: Maybe<Scalars["String"]["output"]>;
    name: Scalars["String"]["output"];
    products: ProductConnection;
    prototype?: Maybe<Prototype>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type KeywordCanIArgs = {
  action: CanIAction;
};

export type KeywordProductsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type KeywordConnection = {
  __typename?: "KeywordConnection";
  edges: Array<KeywordEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Keyword>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type KeywordConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type KeywordConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type KeywordEdge = {
  __typename?: "KeywordEdge";
  cursor: Scalars["String"]["output"];
  node: Keyword;
};

export type KeywordFilter = {
  alias?: InputMaybe<StringFilter>;
  byRelevance?: InputMaybe<Scalars["String"]["input"]>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  mn?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  prototype?: InputMaybe<PrototypeFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type KhaanLeasingInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "KhaanLeasingInvoice";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoice?: Maybe<Scalars["String"]["output"]>;
    invoiceNumber?: Maybe<Scalars["String"]["output"]>;
    qrLink?: Maybe<Scalars["String"]["output"]>;
    register?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type KhaanLeasingInvoiceCanIArgs = {
  action: CanIAction;
};

export type KycInterface = {
  createdAt: Scalars["ISO8601DateTime"]["output"];
  expireAt?: Maybe<Scalars["ISO8601Date"]["output"]>;
  status?: Maybe<KycStatus | `${KycStatus}`>;
  type?: Maybe<Scalars["String"]["output"]>;
  updatedAt: Scalars["ISO8601DateTime"]["output"];
  userId?: Maybe<Scalars["ID"]["output"]>;
  vendorId?: Maybe<Scalars["ID"]["output"]>;
  websiteId?: Maybe<Scalars["ID"]["output"]>;
};

export enum KycStatus {
  Approved = "approved",
  Pending = "pending",
  Rejected = "rejected",
}

export type LeaseBlackList = BaseModelInterface &
  Node & {
    __typename?: "LeaseBlackList";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    registerNum?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type LeaseBlackListCanIArgs = {
  action: CanIAction;
};

export type LeaseBlackListConnection = {
  __typename?: "LeaseBlackListConnection";
  edges: Array<LeaseBlackListEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<LeaseBlackList>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type LeaseBlackListConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type LeaseBlackListConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type LeaseBlackListEdge = {
  __typename?: "LeaseBlackListEdge";
  cursor: Scalars["String"]["output"];
  node: LeaseBlackList;
};

export type LeaseBlackListFilter = {
  createdAt?: InputMaybe<DateFilter>;
  description?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  registerNum?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type LeasingInfo = BaseModelInterface &
  Node & {
    __typename?: "LeasingInfo";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    customerFee?: Maybe<Scalars["Float"]["output"]>;
    gid: Scalars["ID"]["output"];
    hasQuickLoan?: Maybe<Scalars["Boolean"]["output"]>;
    id: Scalars["ID"]["output"];
    incomeConfirm?: Maybe<Scalars["Boolean"]["output"]>;
    interest?: Maybe<Scalars["Float"]["output"]>;
    maxAmount?: Maybe<Scalars["Float"]["output"]>;
    maxMonth?: Maybe<Scalars["Float"]["output"]>;
    merchantFee?: Maybe<Scalars["Float"]["output"]>;
    status?: Maybe<Scalars["Int"]["output"]>;
    tdbmCustomer?: Maybe<Scalars["Boolean"]["output"]>;
    tdbmEmployee?: Maybe<Scalars["Boolean"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type LeasingInfoCanIArgs = {
  action: CanIAction;
};

export type LendInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "LendInvoice";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceNumber?: Maybe<Scalars["String"]["output"]>;
    qrLink?: Maybe<Scalars["String"]["output"]>;
    qrString?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type LendInvoiceCanIArgs = {
  action: CanIAction;
};

export type License = BaseModelInterface &
  Node & {
    __typename?: "License";
    additionalData?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    claimedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    createdBy?: Maybe<User>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    inventoryUnitId?: Maybe<Scalars["ID"]["output"]>;
    lineItem: LineItem;
    lineItemId?: Maybe<Scalars["ID"]["output"]>;
    order?: Maybe<Order>;
    product: Product;
    serial?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    userId?: Maybe<Scalars["ID"]["output"]>;
    variant: Variant;
    variantId?: Maybe<Scalars["ID"]["output"]>;
  };

export type LicenseCanIArgs = {
  action: CanIAction;
};

export type LicenseConnection = {
  __typename?: "LicenseConnection";
  edges: Array<LicenseEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<License>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type LicenseConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type LicenseConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type LicenseEdge = {
  __typename?: "LicenseEdge";
  cursor: Scalars["String"]["output"];
  node: License;
};

export type LicenseFilter = {
  amount?: InputMaybe<IntFilter>;
  createBy?: InputMaybe<UserFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  lineItem?: InputMaybe<LineItemFilter>;
  number?: InputMaybe<StringFilter>;
  order?: InputMaybe<OrderFilter>;
  product?: InputMaybe<ProductFilter>;
  status?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  variant?: InputMaybe<VariantFilter>;
  vendor?: InputMaybe<VendorFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type Limitation = BaseModelInterface &
  Node & {
    __typename?: "Limitation";
    airline?: Maybe<Airline>;
    basedOn?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    quantity?: Maybe<Scalars["Int"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type LimitationCanIArgs = {
  action: CanIAction;
};

export type LimitationConnection = {
  __typename?: "LimitationConnection";
  edges: Array<LimitationEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Limitation>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type LimitationConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type LimitationConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type LimitationEdge = {
  __typename?: "LimitationEdge";
  cursor: Scalars["String"]["output"];
  node: Limitation;
};

export type LineItem = BaseModelInterface &
  Node & {
    __typename?: "LineItem";
    actn?: Maybe<Scalars["String"]["output"]>;
    additionalTaxTotal?: Maybe<Scalars["Float"]["output"]>;
    adjustmentTotal?: Maybe<Scalars["Float"]["output"]>;
    adjustments?: Maybe<Array<Adjustment>>;
    alibabaOrder?: Maybe<AlibabaOrder>;
    amount: Scalars["Float"]["output"];
    amountUsd?: Maybe<Scalars["Float"]["output"]>;
    article?: Maybe<TecArticle>;
    attachments: Array<Scalars["String"]["output"]>;
    basePrice?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    comment?: Maybe<Scalars["String"]["output"]>;
    comments: Array<Comment>;
    commission?: Maybe<Scalars["Float"]["output"]>;
    commissionUpdated?: Maybe<Scalars["Boolean"]["output"]>;
    costCurrency?: Maybe<Scalars["String"]["output"]>;
    costPrice?: Maybe<Scalars["Float"]["output"]>;
    costRate?: Maybe<Scalars["Float"]["output"]>;
    coupons: CouponConnection;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    currency?: Maybe<Scalars["String"]["output"]>;
    data?: Maybe<Scalars["JSON"]["output"]>;
    displayAmount: Scalars["String"]["output"];
    eTickets: Array<ETicket>;
    ebarimtType?: Maybe<Scalars["String"]["output"]>;
    fee?: Maybe<Scalars["Float"]["output"]>;
    gid: Scalars["ID"]["output"];
    giftOrigin?: Maybe<Scalars["JSON"]["output"]>;
    giftQuantity: Scalars["Int"]["output"];
    id: Scalars["ID"]["output"];
    imeiCodes?: Maybe<Array<Scalars["String"]["output"]>>;
    imeiCodesEnabled?: Maybe<Scalars["Boolean"]["output"]>;
    includedTaxTotal: Scalars["Float"]["output"];
    inventoryUnits: Array<InventoryUnit>;
    isDigital?: Maybe<Scalars["Boolean"]["output"]>;
    labelCodes?: Maybe<Array<Scalars["String"]["output"]>>;
    labelCodesEnabled?: Maybe<Scalars["Boolean"]["output"]>;
    listing?: Maybe<Listing>;
    location?: Maybe<Scalars["String"]["output"]>;
    manifest: ProductManifestInterface;
    movieTicket?: Maybe<MovieTicket>;
    name: Scalars["String"]["output"];
    nonTaxableAdjustmentTotal?: Maybe<Scalars["Float"]["output"]>;
    order: Order;
    packageCode?: Maybe<Scalars["String"]["output"]>;
    packedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    packedBy?: Maybe<User>;
    partLineItems: Array<PartLineItem>;
    preTaxAmount: Scalars["Float"]["output"];
    preferredCostPrice?: Maybe<Scalars["Float"]["output"]>;
    prevItem?: Maybe<LineItem>;
    price: Scalars["Float"]["output"];
    priceChannels: Scalars["JSON"]["output"];
    priceUsd?: Maybe<Scalars["Float"]["output"]>;
    product: Product;
    productCat: Scalars["String"]["output"];
    promoQuantity: Scalars["JSON"]["output"];
    promoQuantityDisplay: Scalars["JSON"]["output"];
    promoQuantityIntervals: Scalars["JSON"]["output"];
    promoTotal?: Maybe<Scalars["Float"]["output"]>;
    qty: Scalars["Int"]["output"];
    quantity: Scalars["Int"]["output"];
    receivedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    receivedBy?: Maybe<User>;
    returnAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    returnBy?: Maybe<User>;
    returnLocation?: Maybe<Scalars["String"]["output"]>;
    segment?: Maybe<SupplySegment>;
    segmentId?: Maybe<Scalars["ID"]["output"]>;
    shipmentAmount?: Maybe<Scalars["Float"]["output"]>;
    shipmentAmountUpdated?: Maybe<Scalars["Boolean"]["output"]>;
    shipmentPrice?: Maybe<Scalars["Float"]["output"]>;
    singleDisplayAmount: Scalars["String"]["output"];
    sku: Scalars["String"]["output"];
    storeVariantStatus?: Maybe<Scalars["String"]["output"]>;
    swappedItems?: Maybe<Array<LineItem>>;
    takeLocation?: Maybe<StoreLocation>;
    takenAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    takenBy?: Maybe<User>;
    takenLocation?: Maybe<StoreLocation>;
    takenStatus?: Maybe<Scalars["String"]["output"]>;
    taxCategoryId?: Maybe<Scalars["ID"]["output"]>;
    taxCode?: Maybe<Scalars["String"]["output"]>;
    taxableAdjustmentTotal?: Maybe<Scalars["Float"]["output"]>;
    total: Scalars["Float"]["output"];
    totalWeight?: Maybe<Scalars["Float"]["output"]>;
    totalWeightInKg?: Maybe<Scalars["Float"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variant: Variant;
    variantInfo?: Maybe<Scalars["JSON"]["output"]>;
    vatTotal?: Maybe<Scalars["Float"]["output"]>;
    vendor: Vendor;
    vendorId: Scalars["ID"]["output"];
    vendorName?: Maybe<Scalars["String"]["output"]>;
    vendorRegister?: Maybe<Scalars["String"]["output"]>;
    volume?: Maybe<Scalars["Float"]["output"]>;
    weight?: Maybe<Scalars["Float"]["output"]>;
    weightInKg?: Maybe<Scalars["Float"]["output"]>;
  };

export type LineItemCanIArgs = {
  action: CanIAction;
};

export type LineItemCouponsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<CouponFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export enum LineItemAction {
  NoStock = "no_stock",
  NotTaken = "not_taken",
  OnHand = "on_hand",
  Ready = "ready",
  Returned = "returned",
  Shipped = "shipped",
  Taken = "taken",
}

export type LineItemConnection = {
  __typename?: "LineItemConnection";
  edges: Array<LineItemEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<LineItem>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type LineItemConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type LineItemConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type LineItemEdge = {
  __typename?: "LineItemEdge";
  cursor: Scalars["String"]["output"];
  node: LineItem;
};

export type LineItemFilter = {
  VariantProductStoreCategoryType?: InputMaybe<StringFilter>;
  actn?: InputMaybe<StringFilter>;
  actnNull?: InputMaybe<Scalars["String"]["input"]>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  inventoryUnits?: InputMaybe<InventoryUnitFilter>;
  order?: InputMaybe<OrderFilter>;
  packedAt?: InputMaybe<DateFilter>;
  packedAtTime?: InputMaybe<StringFilter>;
  packedBy?: InputMaybe<UserFilter>;
  price?: InputMaybe<IntFilter>;
  product?: InputMaybe<ProductFilter>;
  quantity?: InputMaybe<IntFilter>;
  segment?: InputMaybe<SupplySegmentFilter>;
  segmentId?: InputMaybe<IdFilter>;
  takeLocation?: InputMaybe<StoreLocationFilter>;
  takenAt?: InputMaybe<DateFilter>;
  takenBy?: InputMaybe<UserFilter>;
  takenLocation?: InputMaybe<StoreLocationFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  variant?: InputMaybe<VariantFilter>;
  vendor?: InputMaybe<VendorFilter>;
  vendorId?: InputMaybe<IdFilter>;
};

export type LineItemInput = {
  options?: InputMaybe<Scalars["JSON"]["input"]>;
  quantity?: InputMaybe<Scalars["Int"]["input"]>;
  variantId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type LineItemReport = BaseModelInterface &
  Node & {
    __typename?: "LineItemReport";
    absTotal?: Maybe<Scalars["Float"]["output"]>;
    actn?: Maybe<Scalars["String"]["output"]>;
    addedNew?: Maybe<Scalars["String"]["output"]>;
    addedTotal?: Maybe<Scalars["Float"]["output"]>;
    additionalTaxTotal?: Maybe<Scalars["Float"]["output"]>;
    adjustPrice?: Maybe<Scalars["Float"]["output"]>;
    adjustmentTotal?: Maybe<Scalars["Float"]["output"]>;
    adjustments?: Maybe<Array<Adjustment>>;
    alibabaOrder?: Maybe<AlibabaOrder>;
    amount: Scalars["Float"]["output"];
    amountUsd?: Maybe<Scalars["Float"]["output"]>;
    article?: Maybe<TecArticle>;
    attachments: Array<Scalars["String"]["output"]>;
    basePrice?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    canceledTotal?: Maybe<Scalars["Float"]["output"]>;
    changed?: Maybe<Scalars["JSON"]["output"]>;
    checkSum?: Maybe<Scalars["Float"]["output"]>;
    comment?: Maybe<Scalars["String"]["output"]>;
    comments: Array<Comment>;
    commission?: Maybe<Scalars["Float"]["output"]>;
    commissionUpdated?: Maybe<Scalars["Boolean"]["output"]>;
    completeTotal?: Maybe<Scalars["Float"]["output"]>;
    computedFee?: Maybe<Scalars["Float"]["output"]>;
    costCurrency?: Maybe<Scalars["String"]["output"]>;
    costPrice?: Maybe<Scalars["Float"]["output"]>;
    costRate?: Maybe<Scalars["Float"]["output"]>;
    coupons: CouponConnection;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    currency?: Maybe<Scalars["String"]["output"]>;
    currencyRate?: Maybe<Scalars["String"]["output"]>;
    data?: Maybe<Scalars["JSON"]["output"]>;
    displayAmount: Scalars["String"]["output"];
    eTickets: Array<ETicket>;
    ebarimtType?: Maybe<Scalars["String"]["output"]>;
    fee?: Maybe<Scalars["Float"]["output"]>;
    finalCount?: Maybe<Scalars["Int"]["output"]>;
    finalTotal?: Maybe<Scalars["Float"]["output"]>;
    gid: Scalars["ID"]["output"];
    giftOrigin?: Maybe<Scalars["JSON"]["output"]>;
    giftQuantity: Scalars["Int"]["output"];
    id: Scalars["ID"]["output"];
    imeiCodes?: Maybe<Array<Scalars["String"]["output"]>>;
    imeiCodesEnabled?: Maybe<Scalars["Boolean"]["output"]>;
    includedTaxTotal: Scalars["Float"]["output"];
    inventoryUnits: Array<InventoryUnit>;
    isDigital?: Maybe<Scalars["Boolean"]["output"]>;
    labelCodes?: Maybe<Array<Scalars["String"]["output"]>>;
    labelCodesEnabled?: Maybe<Scalars["Boolean"]["output"]>;
    leaseLeft?: Maybe<Scalars["Int"]["output"]>;
    leaseTransactionDate?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    listing?: Maybe<Listing>;
    location?: Maybe<Scalars["String"]["output"]>;
    manifest: ProductManifestInterface;
    movieTicket?: Maybe<MovieTicket>;
    name: Scalars["String"]["output"];
    noStockTotal?: Maybe<Scalars["Float"]["output"]>;
    nonTaxableAdjustmentTotal?: Maybe<Scalars["Float"]["output"]>;
    onShip?: Maybe<Scalars["JSON"]["output"]>;
    order: Order;
    orderReport?: Maybe<OrderReport>;
    originalPrice?: Maybe<Scalars["Float"]["output"]>;
    packageCode?: Maybe<Scalars["String"]["output"]>;
    packedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    packedBy?: Maybe<User>;
    partLineItems: Array<PartLineItem>;
    preTaxAmount: Scalars["Float"]["output"];
    preferredCostPrice?: Maybe<Scalars["Float"]["output"]>;
    prevItem?: Maybe<LineItem>;
    price: Scalars["Float"]["output"];
    priceChannels: Scalars["JSON"]["output"];
    priceUsd?: Maybe<Scalars["Float"]["output"]>;
    product: Product;
    productCat: Scalars["String"]["output"];
    promoQuantity: Scalars["JSON"]["output"];
    promoQuantityDisplay: Scalars["JSON"]["output"];
    promoQuantityIntervals: Scalars["JSON"]["output"];
    promoTotal?: Maybe<Scalars["Float"]["output"]>;
    qty: Scalars["Int"]["output"];
    quantity: Scalars["Int"]["output"];
    receivedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    receivedBy?: Maybe<User>;
    returnAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    returnBy?: Maybe<User>;
    returnLocation?: Maybe<Scalars["String"]["output"]>;
    returnTotal?: Maybe<Scalars["Float"]["output"]>;
    segment?: Maybe<SupplySegment>;
    segmentId?: Maybe<Scalars["ID"]["output"]>;
    shipmentAmount?: Maybe<Scalars["Float"]["output"]>;
    shipmentAmountUpdated?: Maybe<Scalars["Boolean"]["output"]>;
    shipmentPrice?: Maybe<Scalars["Float"]["output"]>;
    shippedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    singleDisplayAmount: Scalars["String"]["output"];
    sku: Scalars["String"]["output"];
    storeCreditUsage?: Maybe<Scalars["Int"]["output"]>;
    storeVariantStatus?: Maybe<Scalars["String"]["output"]>;
    swappedItems?: Maybe<Array<LineItem>>;
    takeLocation?: Maybe<StoreLocation>;
    takenAmount?: Maybe<Scalars["Float"]["output"]>;
    takenAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    takenBy?: Maybe<User>;
    takenLocation?: Maybe<StoreLocation>;
    takenStatus?: Maybe<Scalars["String"]["output"]>;
    taxCategoryId?: Maybe<Scalars["ID"]["output"]>;
    taxCode?: Maybe<Scalars["String"]["output"]>;
    taxableAdjustmentTotal?: Maybe<Scalars["Float"]["output"]>;
    ticketInfo?: Maybe<Scalars["JSON"]["output"]>;
    total: Scalars["Float"]["output"];
    totalPercentage?: Maybe<Scalars["Int"]["output"]>;
    totalWeight?: Maybe<Scalars["Float"]["output"]>;
    totalWeightInKg?: Maybe<Scalars["Float"]["output"]>;
    transferAmount?: Maybe<Scalars["Float"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variant: Variant;
    variantInfo?: Maybe<Scalars["JSON"]["output"]>;
    vatTotal?: Maybe<Scalars["Float"]["output"]>;
    vendor: Vendor;
    vendorId: Scalars["ID"]["output"];
    vendorName?: Maybe<Scalars["String"]["output"]>;
    vendorRegister?: Maybe<Scalars["String"]["output"]>;
    volume?: Maybe<Scalars["Float"]["output"]>;
    weight?: Maybe<Scalars["Float"]["output"]>;
    weightInKg?: Maybe<Scalars["Float"]["output"]>;
  };

export type LineItemReportCanIArgs = {
  action: CanIAction;
};

export type LineItemReportCouponsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<CouponFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type LineItemReportConnection = {
  __typename?: "LineItemReportConnection";
  edges: Array<LineItemReportEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<LineItemReport>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type LineItemReportConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type LineItemReportConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type LineItemReportEdge = {
  __typename?: "LineItemReportEdge";
  cursor: Scalars["String"]["output"];
  node: LineItemReport;
};

export type Listing = BaseModelInterface &
  Node & {
    __typename?: "Listing";
    activeSince?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    activeUntil?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    afterPay: Scalars["Boolean"]["output"];
    approved?: Maybe<Scalars["Boolean"]["output"]>;
    audits: AuditConnection;
    averageRating: Scalars["Float"]["output"];
    badges: Array<Badge>;
    bonus?: Maybe<Scalars["Float"]["output"]>;
    campaigns?: Maybe<Array<Scalars["ID"]["output"]>>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    createdBy?: Maybe<User>;
    featured?: Maybe<Scalars["Boolean"]["output"]>;
    featuredUntil?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    fulfillDuration?: Maybe<Scalars["Int"]["output"]>;
    gid: Scalars["ID"]["output"];
    hideOnSearch: Scalars["Boolean"]["output"];
    id: Scalars["ID"]["output"];
    impressionsCount?: Maybe<Scalars["Int"]["output"]>;
    isBlocking?: Maybe<Scalars["Boolean"]["output"]>;
    isExcSelling?: Maybe<Scalars["Boolean"]["output"]>;
    maxQty?: Maybe<Scalars["Int"]["output"]>;
    minQty?: Maybe<Scalars["Int"]["output"]>;
    myReview?: Maybe<Review>;
    options?: Maybe<Scalars["JSON"]["output"]>;
    otherVendorsSelling?: Maybe<Scalars["Boolean"]["output"]>;
    product: Product;
    promotions?: Maybe<Array<Promotion>>;
    properties: Array<Property>;
    prototypes: Array<Prototype>;
    published?: Maybe<Scalars["Boolean"]["output"]>;
    relatedProducts?: Maybe<Array<Relation>>;
    reviews: ReviewConnection;
    seller?: Maybe<Merchant>;
    seoDescription?: Maybe<Scalars["String"]["output"]>;
    seoKeywords?: Maybe<Scalars["String"]["output"]>;
    seoTitle?: Maybe<Scalars["String"]["output"]>;
    shippingCategory?: Maybe<ShippingCategory>;
    shippingCategoryId?: Maybe<Scalars["ID"]["output"]>;
    sizingGuides: Array<SizingGuide>;
    slug?: Maybe<Scalars["String"]["output"]>;
    stepQty: Scalars["Int"]["output"];
    stockLocations?: Maybe<Array<StockLocation>>;
    storeListingId?: Maybe<Scalars["ID"]["output"]>;
    storeListings: StoreListingConnection;
    taxCategory?: Maybe<TaxCategory>;
    taxCategoryId?: Maybe<Scalars["ID"]["output"]>;
    taxons: Array<Taxon>;
    totalReviews: Scalars["Int"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    vendorIsSelling?: Maybe<Scalars["Boolean"]["output"]>;
    website: Website;
  };

export type ListingAuditsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AuditFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type ListingCanIArgs = {
  action: CanIAction;
};

export type ListingPromotionsArgs = {
  dateType?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PromotionFilter>;
  from?: InputMaybe<Scalars["String"]["input"]>;
  to?: InputMaybe<Scalars["String"]["input"]>;
};

export type ListingReviewsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ReviewsFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  isDeleted?: InputMaybe<Scalars["Boolean"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type ListingSizingGuidesArgs = {
  filter?: InputMaybe<SizingGuideFilter>;
};

export type ListingStoreListingsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<StoreListingFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type ListingConnection = {
  __typename?: "ListingConnection";
  edges: Array<ListingEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Listing>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type ListingConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type ListingConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type ListingEdge = {
  __typename?: "ListingEdge";
  cursor: Scalars["String"]["output"];
  node: Listing;
};

export type ListingFilter = {
  afterPay?: InputMaybe<BoolFilter>;
  approved?: InputMaybe<BoolFilter>;
  createdAt?: InputMaybe<DateFilter>;
  fulfillDuration?: InputMaybe<IntFilter>;
  hideOnSearch?: InputMaybe<BoolFilter>;
  id?: InputMaybe<IdFilter>;
  maxQty?: InputMaybe<IntFilter>;
  minQty?: InputMaybe<IntFilter>;
  product?: InputMaybe<ProductFilter>;
  published?: InputMaybe<BoolFilter>;
  seoDescription?: InputMaybe<StringFilter>;
  seoKeywords?: InputMaybe<StringFilter>;
  seoTitle?: InputMaybe<StringFilter>;
  shippingCategory?: InputMaybe<ShippingCategoryFilter>;
  slug?: InputMaybe<StringFilter>;
  stockLocations?: InputMaybe<StockLocationFilter>;
  taxons?: InputMaybe<TaxonFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  vendorListing?: InputMaybe<VendorListingFilter>;
  website?: InputMaybe<WebsiteFilter>;
  withSale?: InputMaybe<Scalars["Int"]["input"]>;
};

export type ListingSaleInput = {
  amount: Scalars["Float"]["input"];
  expireAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  id: Scalars["ID"]["input"];
  remove?: InputMaybe<Scalars["Boolean"]["input"]>;
  startAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
};

export type ListingVendorFilter = {
  listingId: Scalars["ID"]["input"];
  status: Scalars["String"]["input"];
};

export type LoanContractInput = {
  attachments?: InputMaybe<Array<Scalars["Upload"]["input"]>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
};

export type Log = BaseModelInterface &
  Node & {
    __typename?: "Log";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["JSON"]["output"]>;
    func?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    order?: Maybe<Order>;
    request?: Maybe<Scalars["JSON"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
  };

export type LogCanIArgs = {
  action: CanIAction;
};

export type LookBook = BaseModelInterface &
  Node & {
    __typename?: "LookBook";
    canI: Scalars["Boolean"]["output"];
    cover?: Maybe<Scalars["String"]["output"]>;
    coverContentType?: Maybe<Scalars["String"]["output"]>;
    coverFileName?: Maybe<Scalars["String"]["output"]>;
    coverSquare?: Maybe<Scalars["String"]["output"]>;
    coverSquareContentType?: Maybe<Scalars["String"]["output"]>;
    coverSquareFileName?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    isDraft?: Maybe<Scalars["Boolean"]["output"]>;
    lookBookImages: Array<LookBookImage>;
    tagList: Array<Scalars["String"]["output"]>;
    title?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type LookBookCanIArgs = {
  action: CanIAction;
};

export type LookBookCoverArgs = {
  format?: InputMaybe<ImageFormat>;
  height: Scalars["Int"]["input"];
  width: Scalars["Int"]["input"];
};

export type LookBookCoverSquareArgs = {
  format?: InputMaybe<ImageFormat>;
  height: Scalars["Int"]["input"];
  width: Scalars["Int"]["input"];
};

export type LookBookConnection = {
  __typename?: "LookBookConnection";
  edges: Array<LookBookEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<LookBook>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type LookBookConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type LookBookConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type LookBookEdge = {
  __typename?: "LookBookEdge";
  cursor: Scalars["String"]["output"];
  node: LookBook;
};

export type LookBookFilter = {
  createdAt?: InputMaybe<DateFilter>;
  description?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  isDraft?: InputMaybe<BoolFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type LookBookImage = BaseModelInterface &
  Node & {
    __typename?: "LookBookImage";
    attachment?: Maybe<Scalars["String"]["output"]>;
    attachmentContentType?: Maybe<Scalars["String"]["output"]>;
    attachmentFileName?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    lookBook?: Maybe<LookBook>;
    lookBookTags: Array<LookBookTag>;
    position?: Maybe<Scalars["Int"]["output"]>;
    title?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type LookBookImageAttachmentArgs = {
  format?: InputMaybe<ImageFormat>;
  height: Scalars["Int"]["input"];
  width: Scalars["Int"]["input"];
};

export type LookBookImageCanIArgs = {
  action: CanIAction;
};

export type LookBookTag = BaseModelInterface &
  Node & {
    __typename?: "LookBookTag";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    left?: Maybe<Scalars["Float"]["output"]>;
    lookBook?: Maybe<LookBook>;
    lookBookImage?: Maybe<LookBookImage>;
    position?: Maybe<Scalars["Int"]["output"]>;
    product?: Maybe<Product>;
    top?: Maybe<Scalars["Float"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type LookBookTagCanIArgs = {
  action: CanIAction;
};

export type LotteryEntree = Order | User;

export type LotteryWinning = Promotion | StoreCredit;

export type LoyaltyCard = BaseModelInterface &
  Node & {
    __typename?: "LoyaltyCard";
    active?: Maybe<Scalars["Boolean"]["output"]>;
    address?: Maybe<Scalars["String"]["output"]>;
    amount?: Maybe<Scalars["Float"]["output"]>;
    baseAmount?: Maybe<Scalars["Float"]["output"]>;
    birthDate?: Maybe<Scalars["String"]["output"]>;
    bonusAddedAmount?: Maybe<Scalars["Float"]["output"]>;
    bonusBalance?: Maybe<Scalars["Float"]["output"]>;
    bonusPaymentPercent?: Maybe<Scalars["Float"]["output"]>;
    bonusPercent?: Maybe<Scalars["Float"]["output"]>;
    bonusUsedAmount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    cardTemplateName?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    customerId?: Maybe<Scalars["String"]["output"]>;
    discountAmount?: Maybe<Scalars["Float"]["output"]>;
    discountPercent?: Maybe<Scalars["Float"]["output"]>;
    email?: Maybe<Scalars["String"]["output"]>;
    expireDate?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    firstName?: Maybe<Scalars["String"]["output"]>;
    gender?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    giftBalance?: Maybe<Scalars["Float"]["output"]>;
    giftUsedAmount?: Maybe<Scalars["Float"]["output"]>;
    homeAddress?: Maybe<Address>;
    id: Scalars["ID"]["output"];
    isChangeUseBonus?: Maybe<Scalars["Boolean"]["output"]>;
    isShowBirthDate?: Maybe<Scalars["Boolean"]["output"]>;
    itemBonusBalance?: Maybe<Scalars["Float"]["output"]>;
    lastName?: Maybe<Scalars["String"]["output"]>;
    loyaltyCardTransactions?: Maybe<Array<Scalars["JSON"]["output"]>>;
    loyaltyType?: Maybe<Scalars["String"]["output"]>;
    maritalStatus?: Maybe<Scalars["String"]["output"]>;
    notAddUseBonus?: Maybe<Scalars["Boolean"]["output"]>;
    note?: Maybe<Scalars["String"]["output"]>;
    number?: Maybe<Scalars["String"]["output"]>;
    phone?: Maybe<Scalars["String"]["output"]>;
    pointBalance?: Maybe<Scalars["Float"]["output"]>;
    purchaseAmount?: Maybe<Scalars["Float"]["output"]>;
    registerNumber?: Maybe<Scalars["String"]["output"]>;
    totalBonusBalance?: Maybe<Scalars["Float"]["output"]>;
    totalEarnedPoints?: Maybe<Scalars["Float"]["output"]>;
    totalUsedPoints?: Maybe<Scalars["Float"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    useBonus?: Maybe<Scalars["Boolean"]["output"]>;
    user?: Maybe<User>;
    voucherPaymentPercent?: Maybe<Scalars["Float"]["output"]>;
    website?: Maybe<Website>;
    workAddress?: Maybe<Scalars["String"]["output"]>;
  };

export type LoyaltyCardCanIArgs = {
  action: CanIAction;
};

export type MassMessage = BaseModelInterface &
  Node & {
    __typename?: "MassMessage";
    acceptedBy?: Maybe<User>;
    canI: Scalars["Boolean"]["output"];
    content?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    messagesCount: Scalars["Int"]["output"];
    roomIds?: Maybe<Array<Scalars["ID"]["output"]>>;
    segment?: Maybe<Scalars["String"]["output"]>;
    sendAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    sentIds?: Maybe<Array<Scalars["ID"]["output"]>>;
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user: User;
    website: Website;
  };

export type MassMessageCanIArgs = {
  action: CanIAction;
};

export type MassMessageConnection = {
  __typename?: "MassMessageConnection";
  edges: Array<MassMessageEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<MassMessage>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type MassMessageConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type MassMessageConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type MassMessageEdge = {
  __typename?: "MassMessageEdge";
  cursor: Scalars["String"]["output"];
  node: MassMessage;
};

export type MassMessageFilter = {
  acceptedBy?: InputMaybe<UserFilter>;
  content?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  segment?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringFilter>;
  type?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
};

export type MassPromoFilter = {
  createdAt?: InputMaybe<DateFilter>;
  createdBy?: InputMaybe<UserFilter>;
  finishedAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  promotion?: InputMaybe<PromotionFilter>;
  status?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  userCount?: InputMaybe<IntFilter>;
  users?: InputMaybe<StringFilter>;
};

export type MassPromotion = BaseModelInterface &
  Node & {
    __typename?: "MassPromotion";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    createdBy: User;
    finishedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    promotion: Promotion;
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userCount?: Maybe<Scalars["Int"]["output"]>;
    users?: Maybe<Scalars["String"]["output"]>;
  };

export type MassPromotionCanIArgs = {
  action: CanIAction;
};

export type MassPromotionConnection = {
  __typename?: "MassPromotionConnection";
  edges: Array<MassPromotionEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<MassPromotion>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type MassPromotionConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type MassPromotionConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type MassPromotionEdge = {
  __typename?: "MassPromotionEdge";
  cursor: Scalars["String"]["output"];
  node: MassPromotion;
};

export type MbankInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "MbankInvoice";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceNumber?: Maybe<Scalars["String"]["output"]>;
    invoiceUrl?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type MbankInvoiceCanIArgs = {
  action: CanIAction;
};

export type Member = BaseModelInterface &
  Node & {
    __typename?: "Member";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    messages: MessageConnection;
    role?: Maybe<Scalars["String"]["output"]>;
    room: Room;
    seenMessage?: Maybe<Message>;
    unreadMessages: MessageConnection;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
  };

export type MemberCanIArgs = {
  action: CanIAction;
};

export type MemberMessagesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type MemberUnreadMessagesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type MemberFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  role?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
};

export type Membership = BaseModelInterface &
  Node & {
    __typename?: "Membership";
    canI: Scalars["Boolean"]["output"];
    category?: Maybe<Scalars["String"]["output"]>;
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    storeLocation: StoreLocation;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    voucher?: Maybe<Scalars["String"]["output"]>;
    website: Website;
  };

export type MembershipCanIArgs = {
  action: CanIAction;
};

export type Merchant = BaseModelInterface &
  Node & {
    __typename?: "Merchant";
    address?: Maybe<Scalars["String"]["output"]>;
    afterPay: AfterPay | `${AfterPay}`;
    afterPayApprovedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    afterPayApprover?: Maybe<User>;
    afterPayTypes?: Maybe<Array<Scalars["String"]["output"]>>;
    alias?: Maybe<Scalars["String"]["output"]>;
    allowCampaign?: Maybe<Scalars["Boolean"]["output"]>;
    allowSelfBuy: Scalars["Boolean"]["output"];
    assetRoles: AssetRoleConnection;
    audits: AuditConnection;
    autoApprove?: Maybe<Scalars["Boolean"]["output"]>;
    background?: Maybe<Scalars["String"]["output"]>;
    banks: Array<Bank>;
    canI: Scalars["Boolean"]["output"];
    cartAmount?: Maybe<Scalars["Float"]["output"]>;
    category?: Maybe<SupplierCategory>;
    categoryId?: Maybe<Scalars["ID"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    deliveryType?: Maybe<Scalars["String"]["output"]>;
    description?: Maybe<Scalars["String"]["output"]>;
    ebarimtType?: Maybe<Scalars["String"]["output"]>;
    email?: Maybe<Scalars["String"]["output"]>;
    facebook?: Maybe<Scalars["String"]["output"]>;
    featured?: Maybe<Scalars["Boolean"]["output"]>;
    featuredFrom?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    featuredTo?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    follow: Follow;
    follows: Array<Follow>;
    fulfillmentDashboard?: Maybe<Scalars["JSON"]["output"]>;
    fulfillmentDays?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    impressionsCount: Scalars["Int"]["output"];
    listings: ListingConnection;
    listingsCount?: Maybe<Scalars["Int"]["output"]>;
    localId?: Maybe<Scalars["String"]["output"]>;
    maxCartAmount?: Maybe<Scalars["Float"]["output"]>;
    minStock?: Maybe<Scalars["Int"]["output"]>;
    orderDashboard?: Maybe<Scalars["JSON"]["output"]>;
    organizationId?: Maybe<Scalars["String"]["output"]>;
    page?: Maybe<DynamicPage>;
    pages: DynamicPageConnection;
    paymentMethods: Array<PaymentMethod>;
    phone?: Maybe<Scalars["String"]["output"]>;
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    receiveOrderNotifications: Scalars["Boolean"]["output"];
    shippingCategoryId?: Maybe<Scalars["Float"]["output"]>;
    state?: Maybe<Scalars["String"]["output"]>;
    totalSales: Scalars["Float"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    vatReceiverType?: Maybe<Scalars["String"]["output"]>;
    vatRegister?: Maybe<Scalars["String"]["output"]>;
    vendor: Vendor;
    vendorById?: Maybe<Scalars["ID"]["output"]>;
    web?: Maybe<Scalars["String"]["output"]>;
    website: Website;
    websiteById?: Maybe<Scalars["ID"]["output"]>;
  };

export type MerchantAssetRolesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AssetFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type MerchantAuditsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AuditFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type MerchantCanIArgs = {
  action: CanIAction;
};

export type MerchantFollowArgs = {
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type MerchantFulfillmentDashboardArgs = {
  filter?: InputMaybe<OrderFilter>;
};

export type MerchantListingsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ListingFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type MerchantOrderDashboardArgs = {
  filter?: InputMaybe<LineItemFilter>;
};

export type MerchantPageArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  slug?: InputMaybe<Scalars["String"]["input"]>;
};

export type MerchantPagesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PageFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type MerchantConnection = {
  __typename?: "MerchantConnection";
  edges: Array<MerchantEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Merchant>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type MerchantConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type MerchantConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type MerchantEdge = {
  __typename?: "MerchantEdge";
  cursor: Scalars["String"]["output"];
  node: Merchant;
};

export type MerchantFilter = {
  afterPayEq?: InputMaybe<AfterPay | `${AfterPay}`>;
  alias?: InputMaybe<StringFilter>;
  aliasOrVendorName?: InputMaybe<StringFilter>;
  allowCampaign?: InputMaybe<BoolFilter>;
  category?: InputMaybe<SupplierCategoryFilter>;
  createdAt?: InputMaybe<DateFilter>;
  featured?: InputMaybe<Scalars["Boolean"]["input"]>;
  id?: InputMaybe<IdFilter>;
  isActive?: InputMaybe<IntFilter>;
  listingsCount?: InputMaybe<IntFilter>;
  receiveOrderNotifications?: InputMaybe<BoolFilter>;
  searchState?: InputMaybe<Scalars["String"]["input"]>;
  updatedAt?: InputMaybe<DateFilter>;
  vendor?: InputMaybe<VendorFilter>;
  vendorNameOrVendorRegister?: InputMaybe<StringFilter>;
  vendorNameOrVendorRegisterOrVendorPhone?: InputMaybe<StringFilter>;
  website?: InputMaybe<WebsiteFilter>;
  websiteNameOrWebsiteDomain?: InputMaybe<StringFilter>;
  withListings?: InputMaybe<BoolFilter>;
  withTaxon?: InputMaybe<StringFilter>;
};

export type Message = BaseModelInterface &
  Node & {
    __typename?: "Message";
    attachments: Array<ChatAttachment>;
    canI: Scalars["Boolean"]["output"];
    content?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    mine?: Maybe<Scalars["Boolean"]["output"]>;
    room?: Maybe<Room>;
    roomId?: Maybe<Scalars["ID"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
  };

export type MessageCanIArgs = {
  action: CanIAction;
};

export type MessageConnection = {
  __typename?: "MessageConnection";
  edges: Array<MessageEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Message>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type MessageConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type MessageConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type MessageEdge = {
  __typename?: "MessageEdge";
  cursor: Scalars["String"]["output"];
  node: Message;
};

export type MessageFilter = {
  content?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type MessengerLoanInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "MessengerLoanInvoice";
    amount?: Maybe<Scalars["Int"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceId?: Maybe<Scalars["String"]["output"]>;
    invoiceNumber?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type MessengerLoanInvoiceCanIArgs = {
  action: CanIAction;
};

export enum MetricGranularity {
  Day = "day",
  Hour = "hour",
  Month = "month",
  Week = "week",
  Year = "year",
}

export type MetricResponse = {
  __typename?: "MetricResponse";
  label: Scalars["String"]["output"];
  value: Scalars["Float"]["output"];
};

export type MnCitizenIdentity = KycInterface & {
  __typename?: "MnCitizenIdentity";
  back?: Maybe<Scalars["String"]["output"]>;
  backVerifiedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
  createdAt: Scalars["ISO8601DateTime"]["output"];
  expireAt?: Maybe<Scalars["ISO8601Date"]["output"]>;
  front?: Maybe<Scalars["String"]["output"]>;
  frontVerifiedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
  selfie?: Maybe<Scalars["String"]["output"]>;
  selfieVerifiedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
  status?: Maybe<KycStatus | `${KycStatus}`>;
  type?: Maybe<Scalars["String"]["output"]>;
  updatedAt: Scalars["ISO8601DateTime"]["output"];
  userId?: Maybe<Scalars["ID"]["output"]>;
  vendorId?: Maybe<Scalars["ID"]["output"]>;
  websiteId?: Maybe<Scalars["ID"]["output"]>;
};

export type MongolChatInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "MongolChatInvoice";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceNumber?: Maybe<Scalars["String"]["output"]>;
    qrLink?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type MongolChatInvoiceCanIArgs = {
  action: CanIAction;
};

export type MoniSource = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "MoniSource";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    expireDate?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceId?: Maybe<Scalars["String"]["output"]>;
    merchantName?: Maybe<Scalars["String"]["output"]>;
    mobile?: Maybe<Scalars["String"]["output"]>;
    paymentMethod: PaymentMethod;
    paymentMethodId: Scalars["ID"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user: User;
    userId: Scalars["ID"]["output"];
  };

export type MoniSourceCanIArgs = {
  action: CanIAction;
};

export type MonpayInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "MonpayInvoice";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceNumber?: Maybe<Scalars["String"]["output"]>;
    qrLink?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    uuid?: Maybe<Scalars["String"]["output"]>;
  };

export type MonpayInvoiceCanIArgs = {
  action: CanIAction;
};

export type MonpayV2Invoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "MonpayV2Invoice";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceNumber?: Maybe<Scalars["String"]["output"]>;
    monpayId?: Maybe<Scalars["String"]["output"]>;
    qrLink?: Maybe<Scalars["String"]["output"]>;
    receiver?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type MonpayV2InvoiceCanIArgs = {
  action: CanIAction;
};

export type MostInAppInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "MostInAppInvoice";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    custToken?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    tranToken?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type MostInAppInvoiceCanIArgs = {
  action: CanIAction;
};

export type MostInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "MostInvoice";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    qpayAccountId?: Maybe<Scalars["Int"]["output"]>;
    qrCode?: Maybe<Scalars["String"]["output"]>;
    qrImage?: Maybe<Scalars["String"]["output"]>;
    traceNo?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type MostInvoiceCanIArgs = {
  action: CanIAction;
};

export type Movie = BaseModelInterface &
  Node & {
    __typename?: "Movie";
    attributes?: Maybe<Array<Scalars["String"]["output"]>>;
    canI: Scalars["Boolean"]["output"];
    cinemas?: Maybe<Array<Cinema>>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    genres?: Maybe<Array<Scalars["String"]["output"]>>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    idx?: Maybe<Scalars["String"]["output"]>;
    image?: Maybe<Scalars["String"]["output"]>;
    imdb?: Maybe<Scalars["String"]["output"]>;
    openingDate?: Maybe<Scalars["ISO8601Date"]["output"]>;
    rating?: Maybe<Scalars["String"]["output"]>;
    runtime?: Maybe<Scalars["Int"]["output"]>;
    sessions?: Maybe<Array<Session>>;
    synopsis?: Maybe<Scalars["String"]["output"]>;
    title?: Maybe<Scalars["String"]["output"]>;
    trailerUrl?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type MovieCanIArgs = {
  action: CanIAction;
};

export type MovieConnection = {
  __typename?: "MovieConnection";
  edges: Array<MovieEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Movie>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type MovieConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type MovieConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type MovieEdge = {
  __typename?: "MovieEdge";
  cursor: Scalars["String"]["output"];
  node: Movie;
};

export type MovieFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  idx?: InputMaybe<StringFilter>;
  imdb?: InputMaybe<IntFilter>;
  runtime?: InputMaybe<IntFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type MovieTicket = BaseModelInterface &
  Node & {
    __typename?: "MovieTicket";
    amount: Scalars["Float"]["output"];
    area: Scalars["Int"]["output"];
    areaCategoryCode?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    cinema: Cinema;
    colIndex: Scalars["Int"]["output"];
    column: Scalars["String"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["String"]["output"]>;
    errorDescription?: Maybe<Scalars["String"]["output"]>;
    expireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    historyId?: Maybe<Scalars["String"]["output"]>;
    id: Scalars["ID"]["output"];
    idx?: Maybe<Scalars["String"]["output"]>;
    movie: Movie;
    number?: Maybe<Scalars["String"]["output"]>;
    order?: Maybe<Order>;
    row: Scalars["String"]["output"];
    rowIndex: Scalars["Int"]["output"];
    screen: Screen;
    seat: Scalars["String"]["output"];
    session: Session;
    status?: Maybe<Scalars["String"]["output"]>;
    ticketType: TicketType;
    transNumber?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
  };

export type MovieTicketCanIArgs = {
  action: CanIAction;
};

export type MovieTicketConnection = {
  __typename?: "MovieTicketConnection";
  edges: Array<MovieTicketEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<MovieTicket>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type MovieTicketConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type MovieTicketConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type MovieTicketEdge = {
  __typename?: "MovieTicketEdge";
  cursor: Scalars["String"]["output"];
  node: MovieTicket;
};

export type MovieTicketFilter = {
  active?: InputMaybe<BoolFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  lineItem?: InputMaybe<LineItemFilter>;
  order?: InputMaybe<OrderFilter>;
  price?: InputMaybe<IntFilter>;
  product?: InputMaybe<ProductFilter>;
  seat?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  variant?: InputMaybe<VariantFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type MovieTicketManifest = Node &
  ProductManifestInterface & {
    __typename?: "MovieTicketManifest";
    areaCategoryCode?: Maybe<Scalars["String"]["output"]>;
    areaNumber?: Maybe<Scalars["String"]["output"]>;
    brand?: Maybe<Brand>;
    canSupply?: Maybe<Scalars["Boolean"]["output"]>;
    cinema: Cinema;
    column?: Maybe<Scalars["Int"]["output"]>;
    columnIndex?: Maybe<Scalars["Int"]["output"]>;
    data?: Maybe<Scalars["String"]["output"]>;
    expireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    fulfillDuration?: Maybe<Scalars["Int"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    image?: Maybe<Scalars["String"]["output"]>;
    maxQty?: Maybe<Scalars["Int"]["output"]>;
    name: Scalars["String"]["output"];
    optionsText?: Maybe<Scalars["String"]["output"]>;
    price: Scalars["Float"]["output"];
    productCat?: Maybe<Scalars["String"]["output"]>;
    row?: Maybe<Scalars["Int"]["output"]>;
    rowIndex?: Maybe<Scalars["Int"]["output"]>;
    seat?: Maybe<Scalars["String"]["output"]>;
    session: Session;
    sku?: Maybe<Scalars["String"]["output"]>;
    slug: Scalars["String"]["output"];
    status?: Maybe<Scalars["String"]["output"]>;
    ticketType?: Maybe<TicketType>;
    ticketTypeCode?: Maybe<Scalars["String"]["output"]>;
    totalOnHand?: Maybe<Scalars["Int"]["output"]>;
    vendor?: Maybe<Vendor>;
    weight?: Maybe<Scalars["Float"]["output"]>;
  };

export type MultiPercent = BaseModelInterface &
  CalculatorInterface &
  Node & {
    __typename?: "MultiPercent";
    calculableId?: Maybe<Scalars["Int"]["output"]>;
    calculableType?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredOrder: Scalars["String"]["output"];
    preferredPercents: Scalars["String"]["output"];
    preferredRule: Scalars["String"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type MultiPercentCanIArgs = {
  action: CanIAction;
};

export type Mutation = {
  __typename?: "Mutation";
  acceptDispatch?: Maybe<Dispatch>;
  acceptMassChatMessage?: Maybe<MassMessage>;
  acceptPrescription?: Maybe<Prescription>;
  actionCollect?: Maybe<Collect>;
  addBankAccount?: Maybe<Bank>;
  addBankToWallet?: Maybe<Wallet>;
  addBatchStoreListings?: Maybe<Scalars["Boolean"]["output"]>;
  addBtobEmployeeBankAccount?: Maybe<Employee>;
  addCampaignList?: Maybe<ShoppyCampaign>;
  addClientsToSegment?: Maybe<Array<SegmentClient>>;
  addComment?: Maybe<Comment>;
  addEmployee?: Maybe<Employee>;
  addEmployeeToSegment?: Maybe<SupplySegment>;
  addEventInviteItem?: Maybe<EventInvite>;
  addFeedback?: Maybe<FeedbackType>;
  addFeedbackTopic?: Maybe<FeedbackTopic>;
  addItemToCompleteOrder?: Maybe<Order>;
  addOrderNote?: Maybe<OrderComment>;
  addPrescriptionItem?: Maybe<PrescriptionItem>;
  addPrice?: Maybe<Price>;
  addPromotionNote?: Maybe<OrderComment>;
  addPrototypeToWebsite?: Maybe<Prototype>;
  addStockToLocation?: Maybe<StockItem>;
  addToCart?: Maybe<Order>;
  addToPosCart?: Maybe<Order>;
  addToWish?: Maybe<WishedProduct>;
  addUsersToSegment?: Maybe<Scalars["Boolean"]["output"]>;
  adminAddBtobEmployeeBankAccount?: Maybe<Employee>;
  adminCreateBtobBusinessClient?: Maybe<BusinessClient>;
  adminCreateCreditWallet?: Maybe<Wallet>;
  adminCreateDebitWallet?: Maybe<Wallet>;
  adminCreateRepaymentTransaction?: Maybe<Transaction>;
  adminCreateWalletTransaction?: Maybe<Transaction>;
  adminDecideBtobEmployeeBankAccount?: Maybe<Employee>;
  adminDecisionBtobBusinessClient?: Maybe<Scalars["Boolean"]["output"]>;
  adminRemoveBtobEmployeeBankAccount?: Maybe<Employee>;
  adminSyncBtobVendors?: Maybe<Scalars["Boolean"]["output"]>;
  adminUpdateBtobBusinessClient?: Maybe<BusinessClient>;
  airCompleteBooking?: Maybe<Order>;
  airCreateBooking?: Maybe<AirBooking>;
  airIssueTicket?: Maybe<AirBooking>;
  airPnrRetrieve?: Maybe<AirBooking>;
  airRestartBooking?: Maybe<AirBooking>;
  airSellBooking?: Maybe<AirBooking>;
  airUpdatePassengerForBooking?: Maybe<AirBooking>;
  applyCoupon?: Maybe<Order>;
  approveEventInvite?: Maybe<EventInvite>;
  approveOrders?: Maybe<Scalars["String"]["output"]>;
  assignCreditCard?: Maybe<CreditCard>;
  assignEmployees?: Maybe<User>;
  assignMassPromo?: Maybe<Scalars["Boolean"]["output"]>;
  assignSalesManagerByMsCode?: Maybe<Scalars["Boolean"]["output"]>;
  authChangePassword?: Maybe<Scalars["Boolean"]["output"]>;
  authChangePasswordWithOld?: Maybe<Scalars["Boolean"]["output"]>;
  authCheckLogin?: Maybe<Scalars["JSON"]["output"]>;
  authCheckPos?: Maybe<Scalars["JSON"]["output"]>;
  authRegister?: Maybe<Scalars["Boolean"]["output"]>;
  authResetPassword?: Maybe<Scalars["String"]["output"]>;
  authValidateOtp?: Maybe<Scalars["Boolean"]["output"]>;
  authorizeTransaction?: Maybe<Transaction>;
  batchCreateRelation?: Maybe<Scalars["Boolean"]["output"]>;
  batchEMailContactCreate?: Maybe<Array<Contact>>;
  batchUpdateVariants?: Maybe<Product>;
  blackFridayPromotion?: Maybe<LotteryEntry>;
  buyParking?: Maybe<Order>;
  cancelDispatch?: Maybe<Dispatch>;
  cancelETicket?: Maybe<ETicket>;
  cancelEventInvite?: Maybe<EventInvite>;
  cancelOrderTemplate?: Maybe<OrderTemplate>;
  capturePayment?: Maybe<Payment>;
  changeCustomerPos?: Maybe<Scalars["Boolean"]["output"]>;
  changeItem?: Maybe<Order>;
  changeLoyaltyCardPassword?: Maybe<LoyaltyCard>;
  chargeGiftCard?: Maybe<Order>;
  checkAlifPayCard?: Maybe<Scalars["Boolean"]["output"]>;
  checkBankAccount?: Maybe<Scalars["JSON"]["output"]>;
  checkGolomtCardPassword?: Maybe<Scalars["JSON"]["output"]>;
  checkIntendUser?: Maybe<Scalars["Boolean"]["output"]>;
  checkLoyaltyCardInfo?: Maybe<Scalars["JSON"]["output"]>;
  checkMobile?: Maybe<Scalars["Boolean"]["output"]>;
  checkPayment?: Maybe<Payment>;
  checkPosStageTicket?: Maybe<Scalars["JSON"]["output"]>;
  checkSegmentWhiteList?: Maybe<Scalars["Boolean"]["output"]>;
  checkSpic?: Maybe<Scalars["JSON"]["output"]>;
  checkTicketDuplicates?: Maybe<Scalars["JSON"]["output"]>;
  christmasSlotPromotion?: Maybe<LotteryEntry>;
  claimGift?: Maybe<Order>;
  claimOrderAsDriver?: Maybe<Order>;
  claimPromotion?: Maybe<Scalars["JSON"]["output"]>;
  clearViewTrack?: Maybe<Scalars["Boolean"]["output"]>;
  clearWish?: Maybe<Wishlist>;
  clonePage?: Maybe<DynamicPage>;
  cloneProduct?: Maybe<Product>;
  cloneTicketTemplate?: Maybe<TicketTemplate>;
  collectOrder?: Maybe<Collect>;
  confirmAlifPayCharge?: Maybe<Scalars["Boolean"]["output"]>;
  confirmGolomtVcc?: Maybe<Scalars["JSON"]["output"]>;
  confirmIntendInvoice?: Maybe<Scalars["Boolean"]["output"]>;
  confirmMerchant?: Maybe<Merchant>;
  confirmPosStageTicket?: Maybe<Scalars["JSON"]["output"]>;
  confirmPrescription?: Maybe<Prescription>;
  connectOrderToCgw?: Maybe<CorporateGateway>;
  convertDropshipProduct?: Maybe<Scalars["Boolean"]["output"]>;
  createAddress?: Maybe<Address>;
  createAdjustment?: Maybe<Adjustment>;
  createAgenda?: Maybe<Agenda>;
  createAirCommission?: Maybe<Commission>;
  createAirLimitation?: Maybe<Limitation>;
  createAircraft?: Maybe<Aircraft>;
  createAirline?: Maybe<Airline>;
  createAirport?: Maybe<Airport>;
  createApplication?: Maybe<Application>;
  createArticle?: Maybe<Article>;
  createAssemblyPart?: Maybe<AssemblyPart>;
  createAssetRole?: Maybe<AssetRole>;
  createAuthor?: Maybe<Author>;
  createBadge?: Maybe<Badge>;
  createBranch?: Maybe<Branch>;
  createBrand?: Maybe<Brand>;
  createBtobBusinessClient?: Maybe<BusinessClient>;
  createBusinessType?: Maybe<BusinessType>;
  createCampaign?: Maybe<ShoppyCampaign>;
  createCancelReason?: Maybe<CancelReason>;
  createCard?: Maybe<Card>;
  createChatRoom?: Maybe<Room>;
  createClientsStore?: Maybe<ClientsStore>;
  createClonedPrototype?: Maybe<Prototype>;
  createCorporateGateway?: Maybe<CorporateGateway>;
  createCountry?: Maybe<Country>;
  createCreditCard?: Maybe<CreditCard>;
  createDepartmentStore?: Maybe<DepartmentStore>;
  createDispatch?: Maybe<Dispatch>;
  createDistrict?: Maybe<District>;
  createDownloadableAttachment?: Maybe<DownloadableAttachment>;
  createDynamicMenu?: Maybe<DynamicMenu>;
  createEMailCampaign?: Maybe<Campaign>;
  createEMailContact?: Maybe<Contact>;
  createEMailSegment?: Maybe<Segment>;
  createEMailTemplate?: Maybe<EMailTemplate>;
  createErpIntegration?: Maybe<ErpIntegration>;
  createEventInvite?: Maybe<EventInvite>;
  createFeatured?: Maybe<Featured>;
  createGame?: Maybe<Game>;
  createHandlebarTemplate?: Maybe<HandlebarTemplate>;
  createInvitation?: Maybe<Invitation>;
  createKeyword?: Maybe<Keyword>;
  createLease?: Maybe<User>;
  createLeaseBlackList?: Maybe<LeaseBlackList>;
  createLicensePool?: Maybe<CreateLicensePoolPayload>;
  createListings?: Maybe<Scalars["Boolean"]["output"]>;
  createLookBook?: Maybe<LookBook>;
  createLoyaltyCard?: Maybe<LoyaltyCard>;
  createMTemplate?: Maybe<Template>;
  createMassChatMessage?: Maybe<MassMessage>;
  createNews?: Maybe<News>;
  createNotice?: Maybe<Notice>;
  createNutritionFact?: Maybe<NutritionFact>;
  createOneSignalNotification?: Maybe<Scalars["JSON"]["output"]>;
  createOneSignalSegment?: Maybe<OSegment>;
  createOptionType?: Maybe<OptionType>;
  createOptionValue?: Maybe<OptionValue>;
  createOptionValueImage?: Maybe<ProductImage>;
  createOrUpdateProduct?: Maybe<Product>;
  createOrUpdateStoreListing?: Maybe<Array<StoreListing>>;
  createOrder?: Maybe<Order>;
  createOrderTemplate?: Maybe<OrderTemplate>;
  createOrderTemplateFromOrder?: Maybe<OrderTemplate>;
  createPage?: Maybe<DynamicPage>;
  createParcelLabel: DeliveryPackage;
  createPayment?: Maybe<Payment>;
  createPaymentMethod?: Maybe<PaymentMethod>;
  createPaymentReturn?: Maybe<PaymentReturn>;
  createPaymentReturnReason?: Maybe<PaymentReturnReason>;
  createPaymentReturnSource?: Maybe<PaymentReturnSource>;
  createPoll?: Maybe<Poll>;
  createPosCustomer?: Maybe<User>;
  createPosListings?: Maybe<Scalars["Boolean"]["output"]>;
  createPrescription?: Maybe<Prescription>;
  createProduct?: Maybe<Product>;
  createProductDocument?: Maybe<ProductDocument>;
  createProductReturn?: Maybe<Array<ProductReturn>>;
  createPromotion?: Maybe<Promotion>;
  createProperty?: Maybe<Property>;
  createPropertyValue?: Maybe<Property>;
  createPrototype?: Maybe<Prototype>;
  createPushTemplate?: Maybe<PushTemplate>;
  createQuarter?: Maybe<Quarter>;
  createQuiz?: Maybe<Quiz>;
  createRelation?: Maybe<Scalars["Boolean"]["output"]>;
  createReport?: Maybe<Scalars["Boolean"]["output"]>;
  createReportReason?: Maybe<ReportReason>;
  createReview?: Maybe<Review>;
  createSalePrice?: Maybe<SalePrice>;
  createSegmentWhiteList?: Maybe<SegmentWhiteList>;
  createShipper?: Maybe<Shipper>;
  createShippingCategory?: Maybe<ShippingCategory>;
  createShippingMethod?: Maybe<ShippingMethod>;
  createShoppyImage?: Maybe<Image>;
  createSizingGuide?: Maybe<SizingGuide>;
  createSmartGrid?: Maybe<SmartGrid>;
  createSmsTemplate?: Maybe<SmsTemplate>;
  createState?: Maybe<State>;
  createStockLocation?: Maybe<StockLocation>;
  createStoreCredit?: Maybe<StoreCredit>;
  createStoreLocation?: Maybe<StoreLocation>;
  createSupplierCategory?: Maybe<SupplierCategory>;
  createSupplySegment?: Maybe<SupplySegment>;
  createSupplySegmentRestriction?: Maybe<SupplySegmentRestriction>;
  createTaxCategory?: Maybe<TaxCategory>;
  createTaxRate?: Maybe<TaxRate>;
  createTaxon?: Maybe<Taxon>;
  createTecAlliancePrice?: Maybe<TecArticle>;
  createTecAlliancePrices?: Maybe<Scalars["JSON"]["output"]>;
  createTicketTemplate?: Maybe<TicketTemplate>;
  createTracking?: Maybe<TrackingType>;
  createUser?: Maybe<Scalars["Boolean"]["output"]>;
  createUserAddress?: Maybe<UserAddress>;
  createUserArticle?: Maybe<UserArticle>;
  createVacationSchedule?: Maybe<VacationSchedule>;
  createVariant?: Maybe<Variant>;
  createVariantImage?: Maybe<ProductImage>;
  createVariantImagesFromUrl?: Maybe<Array<ProductImage>>;
  createVendor?: Maybe<Vendor>;
  createVendorContract?: Maybe<VendorContract>;
  createWallet?: Maybe<Wallet>;
  createWebhook?: Maybe<Webhook>;
  createWebsite?: Maybe<Website>;
  createWishlist?: Maybe<Wishlist>;
  createZone?: Maybe<Zone>;
  customActionPaymentReturn?: Maybe<PaymentReturn>;
  deactivateCard?: Maybe<Card>;
  deactivateVoucher?: Maybe<Order>;
  deleteCancelReason?: Maybe<CancelReason>;
  deleteLicensePool?: Maybe<DeleteLicensePoolPayload>;
  deliverPackage: DeliveryPackage;
  destroyAddress?: Maybe<Address>;
  destroyAdjustment?: Maybe<Order>;
  destroyAgenda?: Maybe<Agenda>;
  destroyAirCommission?: Maybe<Commission>;
  destroyAirLimitation?: Maybe<Limitation>;
  destroyAircraft?: Maybe<Aircraft>;
  destroyAirline?: Maybe<Scalars["Boolean"]["output"]>;
  destroyAirport?: Maybe<Airport>;
  destroyApplication?: Maybe<Application>;
  destroyArticle?: Maybe<Article>;
  destroyAssemblyPart?: Maybe<AssemblyPart>;
  destroyAssetRole?: Maybe<AssetRole>;
  destroyAuthor?: Maybe<Author>;
  destroyBadge?: Maybe<Badge>;
  destroyBankAccount?: Maybe<Bank>;
  destroyBatchVariants?: Maybe<Product>;
  destroyBranch?: Maybe<Branch>;
  destroyBrand?: Maybe<Scalars["Boolean"]["output"]>;
  destroyBusinessType?: Maybe<BusinessType>;
  destroyCorporateGateway?: Maybe<CorporateGateway>;
  destroyCountry?: Maybe<Country>;
  destroyDepartmentStore?: Maybe<DepartmentStore>;
  destroyDistrict?: Maybe<District>;
  destroyDownloadableAttachment?: Maybe<DownloadableAttachment>;
  destroyDynamicMenu?: Maybe<DynamicMenu>;
  destroyEMailBounce?: Maybe<Bounce>;
  destroyEMailCampaign?: Maybe<Campaign>;
  destroyEMailSegment?: Maybe<Segment>;
  destroyEMailTemplate?: Maybe<EMailTemplate>;
  destroyEmployee?: Maybe<Employee>;
  destroyErpIntegration?: Maybe<ErpIntegration>;
  destroyFeedbackTopic?: Maybe<FeedbackTopic>;
  destroyGame?: Maybe<Game>;
  destroyHandlebarTemplate?: Maybe<HandlebarTemplate>;
  destroyKeyword?: Maybe<Keyword>;
  destroyLeaseBlackList?: Maybe<LeaseBlackList>;
  destroyLineItem?: Maybe<LineItem>;
  destroyListings?: Maybe<Scalars["Boolean"]["output"]>;
  destroyLookBook?: Maybe<LookBook>;
  destroyMTemplate?: Maybe<Template>;
  destroyMerchant?: Maybe<Merchant>;
  destroyNews?: Maybe<News>;
  destroyNotice?: Maybe<Notice>;
  destroyNutritionFact?: Maybe<NutritionFact>;
  destroyOneSignalNotification?: Maybe<Scalars["JSON"]["output"]>;
  destroyOneSignalSegment?: Maybe<OSegment>;
  destroyOptionType?: Maybe<OptionType>;
  destroyOptionValue?: Maybe<OptionValue>;
  destroyOrderTemplate?: Maybe<OrderTemplate>;
  destroyPage?: Maybe<DynamicPage>;
  destroyPaymentMethod?: Maybe<Scalars["Boolean"]["output"]>;
  destroyPaymentReturn?: Maybe<PaymentReturn>;
  destroyPaymentReturnReason?: Maybe<PaymentReturnReason>;
  destroyPaymentReturnSource?: Maybe<PaymentReturnSource>;
  destroyPoll?: Maybe<Poll>;
  destroyPosListings?: Maybe<Scalars["Boolean"]["output"]>;
  destroyProduct?: Maybe<Product>;
  destroyProductDocument?: Maybe<ProductDocument>;
  destroyProductImage?: Maybe<ProductImage>;
  destroyProductOptionValueImage?: Maybe<ProductImage>;
  destroyProductReturn?: Maybe<ProductReturn>;
  destroyPromotion?: Maybe<Promotion>;
  destroyProperty?: Maybe<Property>;
  destroyPropertyValue?: Maybe<PropertyValue>;
  destroyPrototype?: Maybe<Prototype>;
  destroyPushTemplate?: Maybe<PushTemplate>;
  destroyQuarter?: Maybe<Quarter>;
  destroyQuiz?: Maybe<Quiz>;
  destroyRelation?: Maybe<Relation>;
  destroyReview?: Maybe<Review>;
  destroyReviews?: Maybe<Scalars["Boolean"]["output"]>;
  destroySalePrice?: Maybe<SalePrice>;
  destroySavedCard?: Maybe<Scalars["Boolean"]["output"]>;
  destroySegmentWhiteList?: Maybe<SupplySegment>;
  destroyShipper?: Maybe<Shipper>;
  destroyShippingCategory?: Maybe<ShippingCategory>;
  destroyShippingMethod?: Maybe<ShippingMethod>;
  destroyShoppyImage?: Maybe<Image>;
  destroySizingGuide?: Maybe<Scalars["Boolean"]["output"]>;
  destroySmartGrid?: Maybe<SmartGrid>;
  destroySmsTemplate?: Maybe<SmsTemplate>;
  destroyState?: Maybe<State>;
  destroyStockItem?: Maybe<StockItem>;
  destroyStockLocation?: Maybe<StockLocation>;
  destroyStoreListing?: Maybe<Scalars["Boolean"]["output"]>;
  destroyStoreLocation?: Maybe<Scalars["Boolean"]["output"]>;
  destroySupplierCategory?: Maybe<SupplierCategory>;
  destroySupplySegment?: Maybe<Scalars["Boolean"]["output"]>;
  destroySupplySegmentRestriction?: Maybe<Scalars["Boolean"]["output"]>;
  destroyTaxon?: Maybe<Scalars["Boolean"]["output"]>;
  destroyTicketTemplate?: Maybe<Scalars["Boolean"]["output"]>;
  destroyUserAddress?: Maybe<UserAddress>;
  destroyUserArticle?: Maybe<Scalars["Boolean"]["output"]>;
  destroyVacationSchedule?: Maybe<Scalars["Boolean"]["output"]>;
  destroyVariant?: Maybe<Scalars["Boolean"]["output"]>;
  destroyVendorContract?: Maybe<Scalars["Boolean"]["output"]>;
  destroyWebsite?: Maybe<Scalars["Boolean"]["output"]>;
  destroyWish?: Maybe<WishedProduct>;
  destroyWishlist?: Maybe<Wishlist>;
  destroyZone?: Maybe<Zone>;
  disableCurrentUser?: Maybe<User>;
  disableTotp?: Maybe<User>;
  dynamicSyncListings?: Maybe<Scalars["Boolean"]["output"]>;
  emptyCart?: Maybe<Order>;
  emptyWallet?: Maybe<Wallet>;
  enableTotp?: Maybe<User>;
  eventBuy?: Maybe<Scalars["Boolean"]["output"]>;
  findAlibabaOrder?: Maybe<AlibabaOrder>;
  gamificationCreate?: Maybe<Gamification>;
  gamificationDestroy?: Maybe<Scalars["Boolean"]["output"]>;
  gamificationRecalibrate?: Maybe<Scalars["Boolean"]["output"]>;
  gamificationUpdate?: Maybe<Gamification>;
  generateLoyaltyCardQr?: Maybe<Scalars["JSON"]["output"]>;
  generateUsageCodes?: Maybe<Promotion>;
  generateUserTokenQr?: Maybe<UserToken>;
  generateVariants?: Maybe<Product>;
  generateWebsiteReport?: Maybe<JobLog>;
  golomtOtp?: Maybe<Scalars["JSON"]["output"]>;
  halloweenPromotion?: Maybe<LotteryEntry>;
  handleCartItem?: Maybe<LineItem>;
  hikVisionReApplication?: Maybe<Scalars["JSON"]["output"]>;
  hikVisionSyncByDate?: Maybe<Scalars["JSON"]["output"]>;
  hikVisionSyncByOrders?: Maybe<Scalars["JSON"]["output"]>;
  ikeaCreateProduct?: Maybe<IkeaCreateProductPayload>;
  imageSearch?: Maybe<Scalars["JSON"]["output"]>;
  importShoppyImages?: Maybe<Array<Image>>;
  inviteBtobEmployee?: Maybe<Employee>;
  inviteEmployee?: Maybe<Employee>;
  inviteMerchant?: Maybe<Merchant>;
  joinBusiness?: Maybe<Employee>;
  leaseAcceptTerm?: Maybe<Scalars["Boolean"]["output"]>;
  leaseCancel?: Maybe<Scalars["Boolean"]["output"]>;
  leaseChangeName?: Maybe<Scalars["Boolean"]["output"]>;
  leaseComplete?: Maybe<Order>;
  leaseCompleteFix?: Maybe<User>;
  leaseDeclineTerm?: Maybe<Scalars["Boolean"]["output"]>;
  leaseMakeNormal?: Maybe<Scalars["Boolean"]["output"]>;
  leaseUpdateAddress?: Maybe<User>;
  leaseUpdateEducation?: Maybe<UserEducation>;
  leaseUpdateEmergency?: Maybe<Array<EmergencyContact>>;
  leaseUpdateEmployment?: Maybe<UserEmployment>;
  leaseUpdateFinance?: Maybe<UserFinance>;
  leaseUploadPassport?: Maybe<Scalars["Boolean"]["output"]>;
  leaveChatRoom?: Maybe<Room>;
  linkCorporateGateway?: Maybe<CorporateGateway>;
  linkDevice?: Maybe<Device>;
  lockWallet?: Maybe<Wallet>;
  markETicketAs?: Maybe<ETicket>;
  massCreateRepaymentTransaction?: Maybe<Array<Transaction>>;
  orderPay?: Maybe<Scalars["JSON"]["output"]>;
  passCoupon?: Maybe<Coupon>;
  passETicket?: Maybe<ETicket>;
  payCargoPrice?: Maybe<Order>;
  paymentAction?: Maybe<Scalars["JSON"]["output"]>;
  performId1?: Maybe<User>;
  performLineItemAction?: Maybe<LineItem>;
  performOrderAction?: Maybe<Order>;
  placePackage: DeliveryPackage;
  posEmployeeAccept?: Maybe<Scalars["Boolean"]["output"]>;
  posOrderAction?: Maybe<Order>;
  posOrderPay?: Maybe<Scalars["JSON"]["output"]>;
  posReturn?: Maybe<Order>;
  positionProductAttributes?: Maybe<Product>;
  positionProductVariants?: Maybe<Product>;
  printETickets?: Maybe<Scalars["String"]["output"]>;
  printOrders?: Maybe<Scalars["JSON"]["output"]>;
  productBatchSale?: Maybe<JobLog>;
  productBatchUpdate?: Maybe<JobLog>;
  productOutOfStock?: Maybe<Product>;
  productUpdateAttribute?: Maybe<Product>;
  quickBuy?: Maybe<Order>;
  readAllNotification?: Maybe<Scalars["Boolean"]["output"]>;
  readNotification?: Maybe<Notification>;
  readyShipment?: Maybe<Shipment>;
  rebuildPrototypeTree?: Maybe<Scalars["Boolean"]["output"]>;
  rebuildTaxonTree?: Maybe<Scalars["Boolean"]["output"]>;
  refreshOrderTrackings?: Maybe<Scalars["Boolean"]["output"]>;
  registerQPayCard?: Maybe<Scalars["JSON"]["output"]>;
  rejectDispatch?: Maybe<Dispatch>;
  removeBadgeListing?: Maybe<Badge>;
  removeBankFromWallet?: Maybe<Scalars["Boolean"]["output"]>;
  removeBtobEmployeeBankAccount?: Maybe<Employee>;
  removeCampaignList?: Maybe<CampaignListing>;
  removeChatMessage?: Maybe<Scalars["Boolean"]["output"]>;
  removeClientsFromSegment?: Maybe<Scalars["Boolean"]["output"]>;
  removeEmployeesFromSegment?: Maybe<Scalars["Boolean"]["output"]>;
  removeEventInviteItem?: Maybe<EventInvite>;
  removeInvitation?: Maybe<Invitation>;
  removePrescription?: Maybe<Prescription>;
  removePrescriptionItem?: Maybe<PrescriptionItem>;
  removePrice?: Maybe<Price>;
  removeTaxCategory?: Maybe<Scalars["Boolean"]["output"]>;
  removeTaxRate?: Maybe<Scalars["Boolean"]["output"]>;
  removeUsersFromSegment?: Maybe<Scalars["Boolean"]["output"]>;
  removeViewTrack?: Maybe<Scalars["Boolean"]["output"]>;
  removeWebhook?: Maybe<Webhook>;
  requestCardOtp?: Maybe<Scalars["Boolean"]["output"]>;
  requestGolomtVcc?: Maybe<Scalars["JSON"]["output"]>;
  requestListingOtp?: Maybe<Listing>;
  requestMerchant?: Maybe<Merchant>;
  requestPaymentReturn?: Maybe<PaymentReturn>;
  resendGiftCard?: Maybe<GiftCard>;
  resendIntendSms?: Maybe<Scalars["Boolean"]["output"]>;
  resendShipmentTracking?: Maybe<Order>;
  returnOrderEBarimt?: Maybe<Order>;
  reviewDriver?: Maybe<Review>;
  scheduleSendCampaign?: Maybe<Campaign>;
  searchAddress?: Maybe<Scalars["JSON"]["output"]>;
  searchParking?: Maybe<Scalars["JSON"]["output"]>;
  seenChatMessage?: Maybe<Room>;
  selectPrescriptionItem?: Maybe<PrescriptionItem>;
  sendCargoInvoice?: Maybe<Scalars["Boolean"]["output"]>;
  sendChangeLoyaltyCardPasswordOtp?: Maybe<Scalars["JSON"]["output"]>;
  sendChatMessage?: Maybe<Message>;
  sendCoupon?: Maybe<Coupon>;
  sendCreateLoyaltyCardOtp?: Maybe<Scalars["JSON"]["output"]>;
  sendErpLoyaltyRequest?: Maybe<Scalars["JSON"]["output"]>;
  sendEventInviteItem?: Maybe<Scalars["Boolean"]["output"]>;
  sendInvoice?: Maybe<Scalars["Boolean"]["output"]>;
  sendInvoiceNotification?: Maybe<Scalars["Boolean"]["output"]>;
  sendJobApplicationEmail?: Maybe<Scalars["Boolean"]["output"]>;
  sendMassEbarimt?: Maybe<Scalars["Boolean"]["output"]>;
  sendNotification?: Maybe<Scalars["Boolean"]["output"]>;
  sendOrderEBarimt?: Maybe<Order>;
  sendSms?: Maybe<Sms>;
  sendTutPackage: DeliveryPackage;
  sendUserTokenQr?: Maybe<UserToken>;
  sendWalletWithdrawToken?: Maybe<Transaction>;
  setAvailability?: Maybe<TrackableType>;
  setGolomtCardPassword?: Maybe<Scalars["JSON"]["output"]>;
  shipShipment?: Maybe<Shipment>;
  shoppyBox?: Maybe<EventEntry>;
  submitAnswer?: Maybe<QuizResult>;
  swapOrderDriver?: Maybe<Order>;
  syncAlibabaOrder?: Maybe<Scalars["Boolean"]["output"]>;
  syncAllCreditCard?: Maybe<Scalars["Boolean"]["output"]>;
  syncBrand?: Maybe<Scalars["Boolean"]["output"]>;
  syncCreditCard?: Maybe<CreditCard>;
  syncListings?: Maybe<Scalars["Boolean"]["output"]>;
  syncListingsSeo?: Maybe<Scalars["Boolean"]["output"]>;
  syncPosListings?: Maybe<Scalars["Boolean"]["output"]>;
  syncReport?: Maybe<Scalars["Boolean"]["output"]>;
  testEmailCampaign?: Maybe<Campaign>;
  toggleFollow?: Maybe<Follow>;
  toggleWish?: Maybe<Wishlist>;
  topUpCreditCard?: Maybe<CreditCard>;
  topUpGiftCard?: Maybe<GiftCard>;
  trackTutPackage: Scalars["JSON"]["output"];
  trackTutPackageLog: Scalars["JSON"]["output"];
  trackTutStatus?: Maybe<DeliveryPackage>;
  transferPaymentReturn?: Maybe<PaymentReturn>;
  transferShipment?: Maybe<Shipment>;
  translateProduct?: Maybe<Product>;
  unlockWallet?: Maybe<Wallet>;
  updateAddress?: Maybe<Address>;
  updateAdjustment?: Maybe<Adjustment>;
  updateAfterPay?: Maybe<Merchant>;
  updateAgenda?: Maybe<Agenda>;
  updateAirCommission?: Maybe<Commission>;
  updateAirLimitation?: Maybe<Limitation>;
  updateAircraft?: Maybe<Aircraft>;
  updateAirline?: Maybe<Airline>;
  updateAirport?: Maybe<Airport>;
  updateAlibabaCargoStatus?: Maybe<Scalars["Boolean"]["output"]>;
  updateApplication?: Maybe<Application>;
  updateArticle?: Maybe<Article>;
  updateArticleImages?: Maybe<Article>;
  updateAssemblyPart?: Maybe<AssemblyPart>;
  updateAssetRole?: Maybe<AssetRole>;
  updateAssetRoleBatch?: Maybe<Array<AssetRole>>;
  updateAuthor?: Maybe<Author>;
  updateAvatar?: Maybe<User>;
  updateBadge?: Maybe<Badge>;
  updateBankAccount?: Maybe<Bank>;
  updateBranch?: Maybe<Branch>;
  updateBrand?: Maybe<Brand>;
  updateBrandListing?: Maybe<Brand>;
  updateBtobBusinessClient?: Maybe<BusinessClient>;
  updateBtobOrderTemplate?: Maybe<OrderTemplate>;
  updateBusinessClient?: Maybe<BusinessClient>;
  updateBusinessType?: Maybe<BusinessType>;
  updateCampaign?: Maybe<ShoppyCampaign>;
  updateCampaignList?: Maybe<CampaignListing>;
  updateCancelReason?: Maybe<CancelReason>;
  updateCard?: Maybe<Card>;
  updateChannel?: Maybe<Cinema>;
  updateCheckoutOrder?: Maybe<Order>;
  updateCinema?: Maybe<Cinema>;
  updateCinemaScreen?: Maybe<Screen>;
  updateClientsStore?: Maybe<ClientsStore>;
  updateClientsStoreStatus?: Maybe<ClientsStore>;
  updateCompleteOrder?: Maybe<Order>;
  updateCorporateGateway?: Maybe<CorporateGateway>;
  updateCountry?: Maybe<Country>;
  updateDepartmentStore?: Maybe<DepartmentStore>;
  updateDistrict?: Maybe<District>;
  updateDropshipCategory?: Maybe<Scalars["Boolean"]["output"]>;
  updateDynamicMenu?: Maybe<DynamicMenu>;
  updateEMailCampaign?: Maybe<Campaign>;
  updateEMailContactTagList?: Maybe<Contact>;
  updateEMailSegment?: Maybe<Segment>;
  updateEMailTemplate?: Maybe<EMailTemplate>;
  updateEmployee?: Maybe<Employee>;
  updateErpIntegration?: Maybe<ErpIntegration>;
  updateEventInvite?: Maybe<EventInvite>;
  updateFeatured?: Maybe<Featured>;
  updateFeedback?: Maybe<FeedbackType>;
  updateFeedbackTopic?: Maybe<FeedbackTopic>;
  updateGame?: Maybe<Game>;
  updateHandlebarTemplate?: Maybe<HandlebarTemplate>;
  updateInvitation?: Maybe<Invitation>;
  updateInvitedBtobEmployee?: Maybe<Employee>;
  updateItem?: Maybe<Order>;
  updateKeyword?: Maybe<Keyword>;
  updateKyc?: Maybe<User>;
  updateKycGolomt?: Maybe<GolomtKyc>;
  updateLeaseBlackList?: Maybe<LeaseBlackList>;
  updateLineItem?: Maybe<LineItemReport>;
  updateListing?: Maybe<Listing>;
  updateListingBatch?: Maybe<Scalars["Boolean"]["output"]>;
  updateListingEs?: Maybe<Scalars["Boolean"]["output"]>;
  updateListingOptions?: Maybe<Listing>;
  updateLogin?: Maybe<User>;
  updateLookBook?: Maybe<LookBook>;
  updateMTemplate?: Maybe<Template>;
  updateMassChatMessage?: Maybe<MassMessage>;
  updateMerchant?: Maybe<Merchant>;
  updateMerchantVatSettings?: Maybe<Merchant>;
  updateMovie?: Maybe<Movie>;
  updateNews?: Maybe<News>;
  updateNotice?: Maybe<Notice>;
  updateNutritionFact?: Maybe<NutritionFact>;
  updateNutritionFactBatch?: Maybe<Array<NutritionFact>>;
  updateOneSignalSegment?: Maybe<OSegment>;
  updateOptionType?: Maybe<OptionType>;
  updateOptionValue?: Maybe<OptionValue>;
  updateOrder?: Maybe<Order>;
  updateOrderTemplate?: Maybe<OrderTemplate>;
  updatePage?: Maybe<DynamicPage>;
  updatePaymentMethod?: Maybe<PaymentMethod>;
  updatePaymentReturn?: Maybe<PaymentReturn>;
  updatePaymentReturnReason?: Maybe<PaymentReturnReason>;
  updatePaymentReturnSource?: Maybe<PaymentReturnSource>;
  updatePoll?: Maybe<Poll>;
  updatePosCustomer?: Maybe<User>;
  updatePosListing?: Maybe<PosListing>;
  updatePositionDownloadableAttachment?: Maybe<Variant>;
  updatePositionOptionValueImage?: Maybe<ProductOptionValue>;
  updatePositionSalePrices?: Maybe<Variant>;
  updatePositionVariantImage?: Maybe<Variant>;
  updatePrescription?: Maybe<Prescription>;
  updatePrescriptionItem?: Maybe<PrescriptionItem>;
  updatePrice?: Maybe<Price>;
  updateProduct?: Maybe<Product>;
  updateProductBooking?: Maybe<Product>;
  updateProductOptionType?: Maybe<Product>;
  updateProductReturn?: Maybe<ProductReturn>;
  updateProductStage?: Maybe<Product>;
  updatePromotion?: Maybe<Promotion>;
  updateProperty?: Maybe<Property>;
  updatePropertyValue?: Maybe<PropertyValue>;
  updatePrototype?: Maybe<Prototype>;
  updatePushTemplate?: Maybe<PushTemplate>;
  updateQuarter?: Maybe<Quarter>;
  updateQuiz?: Maybe<Quiz>;
  updateRelationDiscount?: Maybe<Scalars["Boolean"]["output"]>;
  updateReportReason?: Maybe<ReportReason>;
  updateSaleListing?: Maybe<Array<Listing>>;
  updateSalePrice?: Maybe<SalePrice>;
  updateShipmentTracking?: Maybe<Scalars["Boolean"]["output"]>;
  updateShipper?: Maybe<Shipper>;
  updateShippingCategory?: Maybe<ShippingCategory>;
  updateShippingMethod?: Maybe<ShippingMethod>;
  updateSizingGuide?: Maybe<SizingGuide>;
  updateSmartGrid?: Maybe<SmartGrid>;
  updateSmsTemplate?: Maybe<SmsTemplate>;
  updateState?: Maybe<State>;
  updateStockItem?: Maybe<StockItem>;
  updateStockLocation?: Maybe<StockLocation>;
  updateStoreCredit?: Maybe<StoreCredit>;
  updateStoreLocation?: Maybe<StoreLocation>;
  updateSupplierCategory?: Maybe<SupplierCategory>;
  updateSupplySegment?: Maybe<SupplySegment>;
  updateTaxCategory?: Maybe<TaxCategory>;
  updateTaxRate?: Maybe<TaxRate>;
  updateTaxon?: Maybe<Taxon>;
  updateTecAssemblyGroup?: Maybe<TecAssemblyGroup>;
  updateTicketTemplate?: Maybe<TicketTemplate>;
  updateUserAddress?: Maybe<UserAddress>;
  updateUserProfile?: Maybe<User>;
  updateVacationSchedule?: Maybe<VacationSchedule>;
  updateVariant?: Maybe<Variant>;
  updateVariantImage?: Maybe<ProductImage>;
  updateVendor?: Maybe<Vendor>;
  updateVendorContract?: Maybe<VendorContract>;
  updateVendorLogo?: Maybe<Vendor>;
  updateWalletVerification?: Maybe<UserVerification>;
  updateWebhook?: Maybe<Webhook>;
  updateWebsite?: Maybe<Website>;
  updateWebsiteFeatures?: Maybe<Website>;
  updateWishedProduct?: Maybe<WishedProduct>;
  updateWishlist?: Maybe<Wishlist>;
  updateZone?: Maybe<Zone>;
  uploadArticleImage?: Maybe<Scalars["JSON"]["output"]>;
  uploadProductStage?: Maybe<Product>;
  uploadSegmentWhiteList?: Maybe<SegmentWhiteListReport>;
  useCoupon?: Maybe<Coupon>;
  useGiftCard?: Maybe<GiftCard>;
  useLoyaltyCard?: Maybe<Order>;
  usePosGiftCard?: Maybe<Order>;
  usePosVoucher?: Maybe<Order>;
  useStoreCredit?: Maybe<Order>;
  useStoreCreditById?: Maybe<Order>;
  useUserTokenQr?: Maybe<UserToken>;
  useVoucher?: Maybe<Order>;
  verifyCard?: Maybe<Card>;
  verifyLogin?: Maybe<User>;
  verifyMnCitizenIdentity?: Maybe<MnCitizenIdentity>;
  verifyPayment?: Maybe<Payment>;
  verifyShipmentPinCode?: Maybe<Order>;
  verifyWallet?: Maybe<Scalars["JSON"]["output"]>;
  verifyWalletWithdraw?: Maybe<Transaction>;
  viewTrack?: Maybe<RecentlyViewedListing>;
  voidPayment?: Maybe<Payment>;
  voidWalletTransaction?: Maybe<Transaction>;
  walletTransaction?: Maybe<Transaction>;
  walletWithdraw?: Maybe<Transaction>;
  wishlistAction?: Maybe<Scalars["Boolean"]["output"]>;
  zaryBox?: Maybe<Scalars["String"]["output"]>;
};

export type MutationAcceptDispatchArgs = {
  input: AcceptDispatchInput;
};

export type MutationAcceptMassChatMessageArgs = {
  input: AcceptMassChatMessageInput;
};

export type MutationAcceptPrescriptionArgs = {
  input: AcceptPrescriptionInput;
};

export type MutationActionCollectArgs = {
  input: ActionCollectInput;
};

export type MutationAddBankAccountArgs = {
  input: AddBankAccountInput;
};

export type MutationAddBankToWalletArgs = {
  input: AddBankToWalletInput;
};

export type MutationAddBatchStoreListingsArgs = {
  input: AddBatchStoreListingsInput;
};

export type MutationAddBtobEmployeeBankAccountArgs = {
  input: AddBtobEmployeeBankAccountInput;
};

export type MutationAddCampaignListArgs = {
  input: AddCampaignListInput;
};

export type MutationAddClientsToSegmentArgs = {
  input: AddClientsToSegmentInput;
};

export type MutationAddCommentArgs = {
  input: AddCommentInput;
};

export type MutationAddEmployeeArgs = {
  input: AddEmployeeInput;
};

export type MutationAddEmployeeToSegmentArgs = {
  input: AddEmployeeToSegmentInput;
};

export type MutationAddEventInviteItemArgs = {
  input: AddEventInviteItemInput;
};

export type MutationAddFeedbackArgs = {
  input: AddFeedbackInput;
};

export type MutationAddFeedbackTopicArgs = {
  input: AddFeedbackTopicInput;
};

export type MutationAddItemToCompleteOrderArgs = {
  input: AddItemToCompleteOrderInput;
};

export type MutationAddOrderNoteArgs = {
  input: AddOrderNoteInput;
};

export type MutationAddPrescriptionItemArgs = {
  input: AddPrescriptionItemInput;
};

export type MutationAddPriceArgs = {
  input: AddPriceInput;
};

export type MutationAddPromotionNoteArgs = {
  input: AddPromotionNoteInput;
};

export type MutationAddPrototypeToWebsiteArgs = {
  input: AddPrototypeToWebsiteInput;
};

export type MutationAddStockToLocationArgs = {
  input: AddStockToLocationInput;
};

export type MutationAddToCartArgs = {
  input: AddToCartInput;
};

export type MutationAddToPosCartArgs = {
  input: AddToPosCartInput;
};

export type MutationAddToWishArgs = {
  input: AddToWishInput;
};

export type MutationAddUsersToSegmentArgs = {
  input: AddUsersToSegmentInput;
};

export type MutationAdminAddBtobEmployeeBankAccountArgs = {
  input: AdminAddBtobEmployeeBankAccountInput;
};

export type MutationAdminCreateBtobBusinessClientArgs = {
  input: AdminCreateBtobBusinessClientInput;
};

export type MutationAdminCreateCreditWalletArgs = {
  input: AdminCreateCreditWalletInput;
};

export type MutationAdminCreateDebitWalletArgs = {
  input: AdminCreateDebitWalletInput;
};

export type MutationAdminCreateRepaymentTransactionArgs = {
  input: AdminCreateRepaymentTransactionInput;
};

export type MutationAdminCreateWalletTransactionArgs = {
  input: AdminCreateWalletTransactionInput;
};

export type MutationAdminDecideBtobEmployeeBankAccountArgs = {
  input: AdminDecideBtobEmployeeBankAccountInput;
};

export type MutationAdminDecisionBtobBusinessClientArgs = {
  input: AdminDecisionBtobBusinessClientInput;
};

export type MutationAdminRemoveBtobEmployeeBankAccountArgs = {
  input: AdminRemoveBtobEmployeeBankAccountInput;
};

export type MutationAdminSyncBtobVendorsArgs = {
  input: AdminSyncBtobVendorsInput;
};

export type MutationAdminUpdateBtobBusinessClientArgs = {
  input: AdminUpdateBtobBusinessClientInput;
};

export type MutationAirCompleteBookingArgs = {
  input: AirCompleteBookingInput;
};

export type MutationAirCreateBookingArgs = {
  input: AirCreateBookingInput;
};

export type MutationAirIssueTicketArgs = {
  input: AirIssueTicketInput;
};

export type MutationAirPnrRetrieveArgs = {
  input: AirPnrRetrieveInput;
};

export type MutationAirRestartBookingArgs = {
  input: AirRestartBookingInput;
};

export type MutationAirSellBookingArgs = {
  input: AirSellBookingInput;
};

export type MutationAirUpdatePassengerForBookingArgs = {
  input: AirUpdatePassengerForBookingInput;
};

export type MutationApplyCouponArgs = {
  input: ApplyCouponInput;
};

export type MutationApproveEventInviteArgs = {
  input: ApproveEventInviteInput;
};

export type MutationApproveOrdersArgs = {
  input: ApproveOrdersInput;
};

export type MutationAssignCreditCardArgs = {
  input: AssignCreditCardInput;
};

export type MutationAssignEmployeesArgs = {
  input: AssignEmployeesInput;
};

export type MutationAssignMassPromoArgs = {
  input: AssignMassPromoInput;
};

export type MutationAssignSalesManagerByMsCodeArgs = {
  input: AssignSalesManagerByMsCodeInput;
};

export type MutationAuthChangePasswordArgs = {
  input: AuthChangePasswordInput;
};

export type MutationAuthChangePasswordWithOldArgs = {
  input: AuthChangePasswordWithOldInput;
};

export type MutationAuthCheckLoginArgs = {
  input: AuthCheckLoginInput;
};

export type MutationAuthCheckPosArgs = {
  input: AuthCheckPosInput;
};

export type MutationAuthRegisterArgs = {
  input: AuthRegisterInput;
};

export type MutationAuthResetPasswordArgs = {
  input: AuthResetPasswordInput;
};

export type MutationAuthValidateOtpArgs = {
  input: AuthValidateOtpInput;
};

export type MutationAuthorizeTransactionArgs = {
  input: AuthorizeTransactionInput;
};

export type MutationBatchCreateRelationArgs = {
  input: BatchCreateRelationInput;
};

export type MutationBatchEMailContactCreateArgs = {
  input: BatchEMailContactCreateInput;
};

export type MutationBatchUpdateVariantsArgs = {
  input: BatchUpdateVariantsInput;
};

export type MutationBlackFridayPromotionArgs = {
  input: BlackFridayPromotionInput;
};

export type MutationBuyParkingArgs = {
  input: BuyParkingInput;
};

export type MutationCancelDispatchArgs = {
  input: CancelDispatchInput;
};

export type MutationCancelETicketArgs = {
  input: CancelETicketInput;
};

export type MutationCancelEventInviteArgs = {
  input: CancelEventInviteInput;
};

export type MutationCancelOrderTemplateArgs = {
  input: CancelOrderTemplateInput;
};

export type MutationCapturePaymentArgs = {
  input: CapturePaymentInput;
};

export type MutationChangeCustomerPosArgs = {
  input: ChangeCustomerPosInput;
};

export type MutationChangeItemArgs = {
  input: ChangeItemInput;
};

export type MutationChangeLoyaltyCardPasswordArgs = {
  input: ChangeLoyaltyCardPasswordInput;
};

export type MutationChargeGiftCardArgs = {
  input: ChargeGiftCardInput;
};

export type MutationCheckAlifPayCardArgs = {
  input: CheckAlifPayCardInput;
};

export type MutationCheckBankAccountArgs = {
  input: CheckBankAccountInput;
};

export type MutationCheckGolomtCardPasswordArgs = {
  input: CheckGolomtCardPasswordInput;
};

export type MutationCheckIntendUserArgs = {
  input: CheckIntendUserInput;
};

export type MutationCheckLoyaltyCardInfoArgs = {
  input: CheckLoyaltyCardInfoInput;
};

export type MutationCheckMobileArgs = {
  input: CheckMobileInput;
};

export type MutationCheckPaymentArgs = {
  input: CheckPaymentInput;
};

export type MutationCheckPosStageTicketArgs = {
  input: CheckPosStageTicketInput;
};

export type MutationCheckSegmentWhiteListArgs = {
  input: CheckSegmentWhiteListInput;
};

export type MutationCheckSpicArgs = {
  input: CheckSpicInput;
};

export type MutationCheckTicketDuplicatesArgs = {
  input: CheckTicketDuplicatesInput;
};

export type MutationChristmasSlotPromotionArgs = {
  input: ChristmasSlotPromotionInput;
};

export type MutationClaimGiftArgs = {
  input: ClaimGiftInput;
};

export type MutationClaimOrderAsDriverArgs = {
  input: ClaimOrderAsDriverInput;
};

export type MutationClaimPromotionArgs = {
  input: ClaimPromotionInput;
};

export type MutationClearViewTrackArgs = {
  input: ClearViewTrackInput;
};

export type MutationClearWishArgs = {
  input: ClearWishInput;
};

export type MutationClonePageArgs = {
  input: ClonePageInput;
};

export type MutationCloneProductArgs = {
  input: CloneProductInput;
};

export type MutationCloneTicketTemplateArgs = {
  input: CloneTicketTemplateInput;
};

export type MutationCollectOrderArgs = {
  input: CollectOrderInput;
};

export type MutationConfirmAlifPayChargeArgs = {
  input: ConfirmAlifPayChargeInput;
};

export type MutationConfirmGolomtVccArgs = {
  input: ConfirmGolomtVccInput;
};

export type MutationConfirmIntendInvoiceArgs = {
  input: ConfirmIntendInvoiceInput;
};

export type MutationConfirmMerchantArgs = {
  input: ConfirmMerchantInput;
};

export type MutationConfirmPosStageTicketArgs = {
  input: ConfirmPosStageTicketInput;
};

export type MutationConfirmPrescriptionArgs = {
  input: ConfirmPrescriptionInput;
};

export type MutationConnectOrderToCgwArgs = {
  input: ConnectOrderToCgwInput;
};

export type MutationConvertDropshipProductArgs = {
  input: ConvertDropshipProductInput;
};

export type MutationCreateAddressArgs = {
  input: CreateAddressInput;
};

export type MutationCreateAdjustmentArgs = {
  input: CreateAdjustmentInput;
};

export type MutationCreateAgendaArgs = {
  input: CreateAgendaInput;
};

export type MutationCreateAirCommissionArgs = {
  input: CreateAirCommissionInput;
};

export type MutationCreateAirLimitationArgs = {
  input: CreateAirLimitationInput;
};

export type MutationCreateAircraftArgs = {
  input: CreateAircraftInput;
};

export type MutationCreateAirlineArgs = {
  input: CreateAirlineInput;
};

export type MutationCreateAirportArgs = {
  input: CreateAirportInput;
};

export type MutationCreateApplicationArgs = {
  input: CreateApplicationInput;
};

export type MutationCreateArticleArgs = {
  input: CreateArticleInput;
};

export type MutationCreateAssemblyPartArgs = {
  input: CreateAssemblyPartInput;
};

export type MutationCreateAssetRoleArgs = {
  input: CreateAssetRoleInput;
};

export type MutationCreateAuthorArgs = {
  input: CreateAuthorInput;
};

export type MutationCreateBadgeArgs = {
  input: CreateBadgeInput;
};

export type MutationCreateBranchArgs = {
  input: CreateBranchInput;
};

export type MutationCreateBrandArgs = {
  input: CreateBrandInput;
};

export type MutationCreateBtobBusinessClientArgs = {
  input: CreateBtobBusinessClientInput;
};

export type MutationCreateBusinessTypeArgs = {
  input: CreateBusinessTypeInput;
};

export type MutationCreateCampaignArgs = {
  input: CreateCampaignInput;
};

export type MutationCreateCancelReasonArgs = {
  input: CreateCancelReasonInput;
};

export type MutationCreateCardArgs = {
  input: CreateCardInput;
};

export type MutationCreateChatRoomArgs = {
  input: CreateChatRoomInput;
};

export type MutationCreateClientsStoreArgs = {
  input: CreateClientsStoreInput;
};

export type MutationCreateClonedPrototypeArgs = {
  input: CreateClonedPrototypeInput;
};

export type MutationCreateCorporateGatewayArgs = {
  input: CreateCorporateGatewayInput;
};

export type MutationCreateCountryArgs = {
  input: CreateCountryInput;
};

export type MutationCreateCreditCardArgs = {
  input: CreateCreditCardInput;
};

export type MutationCreateDepartmentStoreArgs = {
  input: CreateDepartmentStoreInput;
};

export type MutationCreateDispatchArgs = {
  input: CreateDispatchInput;
};

export type MutationCreateDistrictArgs = {
  input: CreateDistrictInput;
};

export type MutationCreateDownloadableAttachmentArgs = {
  input: CreateDownloadableAttachmentInput;
};

export type MutationCreateDynamicMenuArgs = {
  input: CreateDynamicMenuInput;
};

export type MutationCreateEMailCampaignArgs = {
  input: CreateEMailCampaignInput;
};

export type MutationCreateEMailContactArgs = {
  input: CreateEMailContactInput;
};

export type MutationCreateEMailSegmentArgs = {
  input: CreateEMailSegmentInput;
};

export type MutationCreateEMailTemplateArgs = {
  input: CreateEMailTemplateInput;
};

export type MutationCreateErpIntegrationArgs = {
  input: CreateErpIntegrationInput;
};

export type MutationCreateEventInviteArgs = {
  input: CreateEventInviteInput;
};

export type MutationCreateFeaturedArgs = {
  input: CreateFeaturedInput;
};

export type MutationCreateGameArgs = {
  input: CreateGameInput;
};

export type MutationCreateHandlebarTemplateArgs = {
  input: CreateHandlebarTemplateInput;
};

export type MutationCreateInvitationArgs = {
  input: CreateInvitationInput;
};

export type MutationCreateKeywordArgs = {
  input: CreateKeywordInput;
};

export type MutationCreateLeaseArgs = {
  input: CreateLeaseInput;
};

export type MutationCreateLeaseBlackListArgs = {
  input: CreateLeaseBlackListInput;
};

export type MutationCreateLicensePoolArgs = {
  input: CreateLicensePoolInput;
};

export type MutationCreateListingsArgs = {
  input: CreateListingsInput;
};

export type MutationCreateLookBookArgs = {
  input: CreateLookBookInput;
};

export type MutationCreateLoyaltyCardArgs = {
  input: CreateLoyaltyCardInput;
};

export type MutationCreateMTemplateArgs = {
  input: CreateMTemplateInput;
};

export type MutationCreateMassChatMessageArgs = {
  input: CreateMassChatMessageInput;
};

export type MutationCreateNewsArgs = {
  input: CreateNewsInput;
};

export type MutationCreateNoticeArgs = {
  input: CreateNoticeInput;
};

export type MutationCreateNutritionFactArgs = {
  input: CreateNutritionFactInput;
};

export type MutationCreateOneSignalNotificationArgs = {
  input: CreateOneSignalNotificationInput;
};

export type MutationCreateOneSignalSegmentArgs = {
  input: CreateOneSignalSegmentInput;
};

export type MutationCreateOptionTypeArgs = {
  input: CreateOptionTypeInput;
};

export type MutationCreateOptionValueArgs = {
  input: CreateOptionValueInput;
};

export type MutationCreateOptionValueImageArgs = {
  input: CreateOptionValueImageInput;
};

export type MutationCreateOrUpdateProductArgs = {
  input: CreateOrUpdateProductInput;
};

export type MutationCreateOrUpdateStoreListingArgs = {
  input: CreateOrUpdateStoreListingInput;
};

export type MutationCreateOrderArgs = {
  input: CreateOrderInput;
};

export type MutationCreateOrderTemplateArgs = {
  input: CreateOrderTemplateInput;
};

export type MutationCreateOrderTemplateFromOrderArgs = {
  input: CreateOrderTemplateFromOrderInput;
};

export type MutationCreatePageArgs = {
  input: CreatePageInput;
};

export type MutationCreateParcelLabelArgs = {
  input: CreateParcelLabelInput;
};

export type MutationCreatePaymentArgs = {
  input: CreatePaymentInput;
};

export type MutationCreatePaymentMethodArgs = {
  input: CreatePaymentMethodInput;
};

export type MutationCreatePaymentReturnArgs = {
  input: CreatePaymentReturnInput;
};

export type MutationCreatePaymentReturnReasonArgs = {
  input: CreatePaymentReturnReasonInput;
};

export type MutationCreatePaymentReturnSourceArgs = {
  input: CreatePaymentReturnSourceInput;
};

export type MutationCreatePollArgs = {
  input: CreatePollInput;
};

export type MutationCreatePosCustomerArgs = {
  input: CreatePosCustomerInput;
};

export type MutationCreatePosListingsArgs = {
  input: CreatePosListingsInput;
};

export type MutationCreatePrescriptionArgs = {
  input: CreatePrescriptionInput;
};

export type MutationCreateProductArgs = {
  input: CreateProductInput;
};

export type MutationCreateProductDocumentArgs = {
  input: CreateProductDocumentInput;
};

export type MutationCreateProductReturnArgs = {
  input: CreateProductReturnInput;
};

export type MutationCreatePromotionArgs = {
  input: CreatePromotionInput;
};

export type MutationCreatePropertyArgs = {
  input: CreatePropertyInput;
};

export type MutationCreatePropertyValueArgs = {
  input: CreatePropertyValueInput;
};

export type MutationCreatePrototypeArgs = {
  input: CreatePrototypeInput;
};

export type MutationCreatePushTemplateArgs = {
  input: CreatePushTemplateInput;
};

export type MutationCreateQuarterArgs = {
  input: CreateQuarterInput;
};

export type MutationCreateQuizArgs = {
  input: CreateQuizInput;
};

export type MutationCreateRelationArgs = {
  input: CreateRelationInput;
};

export type MutationCreateReportArgs = {
  input: CreateReportInput;
};

export type MutationCreateReportReasonArgs = {
  input: CreateReportReasonInput;
};

export type MutationCreateReviewArgs = {
  input: CreateReviewInput;
};

export type MutationCreateSalePriceArgs = {
  input: CreateSalePriceInput;
};

export type MutationCreateSegmentWhiteListArgs = {
  input: CreateSegmentWhiteListInput;
};

export type MutationCreateShipperArgs = {
  input: CreateShipperInput;
};

export type MutationCreateShippingCategoryArgs = {
  input: CreateShippingCategoryInput;
};

export type MutationCreateShippingMethodArgs = {
  input: CreateShippingMethodInput;
};

export type MutationCreateShoppyImageArgs = {
  input: CreateShoppyImageInput;
};

export type MutationCreateSizingGuideArgs = {
  input: CreateSizingGuideInput;
};

export type MutationCreateSmartGridArgs = {
  input: CreateSmartGridInput;
};

export type MutationCreateSmsTemplateArgs = {
  input: CreateSmsTemplateInput;
};

export type MutationCreateStateArgs = {
  input: CreateStateInput;
};

export type MutationCreateStockLocationArgs = {
  input: CreateStockLocationInput;
};

export type MutationCreateStoreCreditArgs = {
  input: CreateStoreCreditInput;
};

export type MutationCreateStoreLocationArgs = {
  input: CreateStoreLocationInput;
};

export type MutationCreateSupplierCategoryArgs = {
  input: CreateSupplierCategoryInput;
};

export type MutationCreateSupplySegmentArgs = {
  input: CreateSupplySegmentInput;
};

export type MutationCreateSupplySegmentRestrictionArgs = {
  input: CreateSupplySegmentRestrictionInput;
};

export type MutationCreateTaxCategoryArgs = {
  input: CreateTaxCategoryInput;
};

export type MutationCreateTaxRateArgs = {
  input: CreateTaxRateInput;
};

export type MutationCreateTaxonArgs = {
  input: CreateTaxonInput;
};

export type MutationCreateTecAlliancePriceArgs = {
  input: CreateTecAlliancePriceInput;
};

export type MutationCreateTecAlliancePricesArgs = {
  input: CreateTecAlliancePricesInput;
};

export type MutationCreateTicketTemplateArgs = {
  input: CreateTicketTemplateInput;
};

export type MutationCreateTrackingArgs = {
  input: CreateTrackingInput;
};

export type MutationCreateUserArgs = {
  input: CreateUserInput;
};

export type MutationCreateUserAddressArgs = {
  input: CreateUserAddressInput;
};

export type MutationCreateUserArticleArgs = {
  input: CreateUserArticleInput;
};

export type MutationCreateVacationScheduleArgs = {
  input: CreateVacationScheduleInput;
};

export type MutationCreateVariantArgs = {
  input: CreateVariantInput;
};

export type MutationCreateVariantImageArgs = {
  input: CreateVariantImageInput;
};

export type MutationCreateVariantImagesFromUrlArgs = {
  input: CreateVariantImagesFromUrlInput;
};

export type MutationCreateVendorArgs = {
  input: CreateVendorInput;
};

export type MutationCreateVendorContractArgs = {
  input: CreateVendorContractInput;
};

export type MutationCreateWalletArgs = {
  input: CreateWalletInput;
};

export type MutationCreateWebhookArgs = {
  input: CreateWebhookInput;
};

export type MutationCreateWebsiteArgs = {
  input: CreateWebsiteInput;
};

export type MutationCreateWishlistArgs = {
  input: CreateWishlistInput;
};

export type MutationCreateZoneArgs = {
  input: CreateZoneInput;
};

export type MutationCustomActionPaymentReturnArgs = {
  input: CustomActionPaymentReturnInput;
};

export type MutationDeactivateCardArgs = {
  input: DeactivateCardInput;
};

export type MutationDeactivateVoucherArgs = {
  input: DeactivateVoucherInput;
};

export type MutationDeleteCancelReasonArgs = {
  input: DeleteCancelReasonInput;
};

export type MutationDeleteLicensePoolArgs = {
  input: DeleteLicensePoolInput;
};

export type MutationDeliverPackageArgs = {
  input: DeliverPackageInput;
};

export type MutationDestroyAddressArgs = {
  input: DestroyAddressInput;
};

export type MutationDestroyAdjustmentArgs = {
  input: DestroyAdjustmentInput;
};

export type MutationDestroyAgendaArgs = {
  input: DestroyAgendaInput;
};

export type MutationDestroyAirCommissionArgs = {
  input: DestroyAirCommissionInput;
};

export type MutationDestroyAirLimitationArgs = {
  input: DestroyAirLimitationInput;
};

export type MutationDestroyAircraftArgs = {
  input: DestroyAircraftInput;
};

export type MutationDestroyAirlineArgs = {
  input: DestroyAirlineInput;
};

export type MutationDestroyAirportArgs = {
  input: DestroyAirportInput;
};

export type MutationDestroyApplicationArgs = {
  input: DestroyApplicationInput;
};

export type MutationDestroyArticleArgs = {
  input: DestroyArticleInput;
};

export type MutationDestroyAssemblyPartArgs = {
  input: DestroyAssemblyPartInput;
};

export type MutationDestroyAssetRoleArgs = {
  input: DestroyAssetRoleInput;
};

export type MutationDestroyAuthorArgs = {
  input: DestroyAuthorInput;
};

export type MutationDestroyBadgeArgs = {
  input: DestroyBadgeInput;
};

export type MutationDestroyBankAccountArgs = {
  input: DestroyBankAccountInput;
};

export type MutationDestroyBatchVariantsArgs = {
  input: DestroyBatchVariantsInput;
};

export type MutationDestroyBranchArgs = {
  input: DestroyBranchInput;
};

export type MutationDestroyBrandArgs = {
  input: DestroyBrandInput;
};

export type MutationDestroyBusinessTypeArgs = {
  input: DestroyBusinessTypeInput;
};

export type MutationDestroyCorporateGatewayArgs = {
  input: DestroyCorporateGatewayInput;
};

export type MutationDestroyCountryArgs = {
  input: DestroyCountryInput;
};

export type MutationDestroyDepartmentStoreArgs = {
  input: DestroyDepartmentStoreInput;
};

export type MutationDestroyDistrictArgs = {
  input: DestroyDistrictInput;
};

export type MutationDestroyDownloadableAttachmentArgs = {
  input: DestroyDownloadableAttachmentInput;
};

export type MutationDestroyDynamicMenuArgs = {
  input: DestroyDynamicMenuInput;
};

export type MutationDestroyEMailBounceArgs = {
  input: DestroyEMailBounceInput;
};

export type MutationDestroyEMailCampaignArgs = {
  input: DestroyEMailCampaignInput;
};

export type MutationDestroyEMailSegmentArgs = {
  input: DestroyEMailSegmentInput;
};

export type MutationDestroyEMailTemplateArgs = {
  input: DestroyEMailTemplateInput;
};

export type MutationDestroyEmployeeArgs = {
  input: DestroyEmployeeInput;
};

export type MutationDestroyErpIntegrationArgs = {
  input: DestroyErpIntegrationInput;
};

export type MutationDestroyFeedbackTopicArgs = {
  input: DestroyFeedbackTopicInput;
};

export type MutationDestroyGameArgs = {
  input: DestroyGameInput;
};

export type MutationDestroyHandlebarTemplateArgs = {
  input: DestroyHandlebarTemplateInput;
};

export type MutationDestroyKeywordArgs = {
  input: DestroyKeywordInput;
};

export type MutationDestroyLeaseBlackListArgs = {
  input: DestroyLeaseBlackListInput;
};

export type MutationDestroyLineItemArgs = {
  input: DestroyLineItemInput;
};

export type MutationDestroyListingsArgs = {
  input: DestroyListingsInput;
};

export type MutationDestroyLookBookArgs = {
  input: DestroyLookBookInput;
};

export type MutationDestroyMTemplateArgs = {
  input: DestroyMTemplateInput;
};

export type MutationDestroyMerchantArgs = {
  input: DestroyMerchantInput;
};

export type MutationDestroyNewsArgs = {
  input: DestroyNewsInput;
};

export type MutationDestroyNoticeArgs = {
  input: DestroyNoticeInput;
};

export type MutationDestroyNutritionFactArgs = {
  input: DestroyNutritionFactInput;
};

export type MutationDestroyOneSignalNotificationArgs = {
  input: DestroyOneSignalNotificationInput;
};

export type MutationDestroyOneSignalSegmentArgs = {
  input: DestroyOneSignalSegmentInput;
};

export type MutationDestroyOptionTypeArgs = {
  input: DestroyOptionTypeInput;
};

export type MutationDestroyOptionValueArgs = {
  input: DestroyOptionValueInput;
};

export type MutationDestroyOrderTemplateArgs = {
  input: DestroyOrderTemplateInput;
};

export type MutationDestroyPageArgs = {
  input: DestroyPageInput;
};

export type MutationDestroyPaymentMethodArgs = {
  input: DestroyPaymentMethodInput;
};

export type MutationDestroyPaymentReturnArgs = {
  input: DestroyPaymentReturnInput;
};

export type MutationDestroyPaymentReturnReasonArgs = {
  input: DestroyPaymentReturnReasonInput;
};

export type MutationDestroyPaymentReturnSourceArgs = {
  input: DestroyPaymentReturnSourceInput;
};

export type MutationDestroyPollArgs = {
  input: DestroyPollInput;
};

export type MutationDestroyPosListingsArgs = {
  input: DestroyPosListingsInput;
};

export type MutationDestroyProductArgs = {
  input: DestroyProductInput;
};

export type MutationDestroyProductDocumentArgs = {
  input: DestroyProductDocumentInput;
};

export type MutationDestroyProductImageArgs = {
  input: DestroyProductImageInput;
};

export type MutationDestroyProductOptionValueImageArgs = {
  input: DestroyProductOptionValueImageInput;
};

export type MutationDestroyProductReturnArgs = {
  input: DestroyProductReturnInput;
};

export type MutationDestroyPromotionArgs = {
  input: DestroyPromotionInput;
};

export type MutationDestroyPropertyArgs = {
  input: DestroyPropertyInput;
};

export type MutationDestroyPropertyValueArgs = {
  input: DestroyPropertyValueInput;
};

export type MutationDestroyPrototypeArgs = {
  input: DestroyPrototypeInput;
};

export type MutationDestroyPushTemplateArgs = {
  input: DestroyPushTemplateInput;
};

export type MutationDestroyQuarterArgs = {
  input: DestroyQuarterInput;
};

export type MutationDestroyQuizArgs = {
  input: DestroyQuizInput;
};

export type MutationDestroyRelationArgs = {
  input: DestroyRelationInput;
};

export type MutationDestroyReviewArgs = {
  input: DestroyReviewInput;
};

export type MutationDestroyReviewsArgs = {
  input: DestroyReviewsInput;
};

export type MutationDestroySalePriceArgs = {
  input: DestroySalePriceInput;
};

export type MutationDestroySavedCardArgs = {
  input: DestroySavedCardInput;
};

export type MutationDestroySegmentWhiteListArgs = {
  input: DestroySegmentWhiteListInput;
};

export type MutationDestroyShipperArgs = {
  input: DestroyShipperInput;
};

export type MutationDestroyShippingCategoryArgs = {
  input: DestroyShippingCategoryInput;
};

export type MutationDestroyShippingMethodArgs = {
  input: DestroyShippingMethodInput;
};

export type MutationDestroyShoppyImageArgs = {
  input: DestroyShoppyImageInput;
};

export type MutationDestroySizingGuideArgs = {
  input: DestroySizingGuideInput;
};

export type MutationDestroySmartGridArgs = {
  input: DestroySmartGridInput;
};

export type MutationDestroySmsTemplateArgs = {
  input: DestroySmsTemplateInput;
};

export type MutationDestroyStateArgs = {
  input: DestroyStateInput;
};

export type MutationDestroyStockItemArgs = {
  input: DestroyStockItemInput;
};

export type MutationDestroyStockLocationArgs = {
  input: DestroyStockLocationInput;
};

export type MutationDestroyStoreListingArgs = {
  input: DestroyStoreListingInput;
};

export type MutationDestroyStoreLocationArgs = {
  input: DestroyStoreLocationInput;
};

export type MutationDestroySupplierCategoryArgs = {
  input: DestroySupplierCategoryInput;
};

export type MutationDestroySupplySegmentArgs = {
  input: DestroySupplySegmentInput;
};

export type MutationDestroySupplySegmentRestrictionArgs = {
  input: DestroySupplySegmentRestrictionInput;
};

export type MutationDestroyTaxonArgs = {
  input: DestroyTaxonInput;
};

export type MutationDestroyTicketTemplateArgs = {
  input: DestroyTicketTemplateInput;
};

export type MutationDestroyUserAddressArgs = {
  input: DestroyUserAddressInput;
};

export type MutationDestroyUserArticleArgs = {
  input: DestroyUserArticleInput;
};

export type MutationDestroyVacationScheduleArgs = {
  input: DestroyVacationScheduleInput;
};

export type MutationDestroyVariantArgs = {
  input: DestroyVariantInput;
};

export type MutationDestroyVendorContractArgs = {
  input: DestroyVendorContractInput;
};

export type MutationDestroyWebsiteArgs = {
  input: DestroyWebsiteInput;
};

export type MutationDestroyWishArgs = {
  input: DestroyWishInput;
};

export type MutationDestroyWishlistArgs = {
  input: DestroyWishlistInput;
};

export type MutationDestroyZoneArgs = {
  input: DestroyZoneInput;
};

export type MutationDisableCurrentUserArgs = {
  input: DisableCurrentUserInput;
};

export type MutationDisableTotpArgs = {
  input: DisableTotpInput;
};

export type MutationDynamicSyncListingsArgs = {
  input: DynamicSyncListingsInput;
};

export type MutationEmptyCartArgs = {
  input: EmptyCartInput;
};

export type MutationEmptyWalletArgs = {
  input: EmptyWalletInput;
};

export type MutationEnableTotpArgs = {
  input: EnableTotpInput;
};

export type MutationEventBuyArgs = {
  input: EventBuyInput;
};

export type MutationFindAlibabaOrderArgs = {
  input: FindAlibabaOrderInput;
};

export type MutationGamificationCreateArgs = {
  input: GamificationCreateInput;
};

export type MutationGamificationDestroyArgs = {
  input: GamificationDestroyInput;
};

export type MutationGamificationRecalibrateArgs = {
  input: GamificationRecalibrateInput;
};

export type MutationGamificationUpdateArgs = {
  input: GamificationUpdateInput;
};

export type MutationGenerateLoyaltyCardQrArgs = {
  input: GenerateLoyaltyCardQrInput;
};

export type MutationGenerateUsageCodesArgs = {
  input: GenerateUsageCodesInput;
};

export type MutationGenerateUserTokenQrArgs = {
  input: GenerateUserTokenQrInput;
};

export type MutationGenerateVariantsArgs = {
  input: GenerateVariantsInput;
};

export type MutationGenerateWebsiteReportArgs = {
  input: GenerateWebsiteReportInput;
};

export type MutationGolomtOtpArgs = {
  input: GolomtOtpInput;
};

export type MutationHalloweenPromotionArgs = {
  input: HalloweenPromotionInput;
};

export type MutationHandleCartItemArgs = {
  input: HandleCartItemInput;
};

export type MutationHikVisionReApplicationArgs = {
  input: HikVisionReApplicationInput;
};

export type MutationHikVisionSyncByDateArgs = {
  input: HikVisionSyncByDateInput;
};

export type MutationHikVisionSyncByOrdersArgs = {
  input: HikVisionSyncByOrdersInput;
};

export type MutationIkeaCreateProductArgs = {
  input: IkeaCreateProductInput;
};

export type MutationImageSearchArgs = {
  input: ImageSearchInput;
};

export type MutationImportShoppyImagesArgs = {
  input: ImportShoppyImagesInput;
};

export type MutationInviteBtobEmployeeArgs = {
  input: InviteBtobEmployeeInput;
};

export type MutationInviteEmployeeArgs = {
  input: InviteEmployeeInput;
};

export type MutationInviteMerchantArgs = {
  input: InviteMerchantInput;
};

export type MutationJoinBusinessArgs = {
  input: JoinBusinessInput;
};

export type MutationLeaseAcceptTermArgs = {
  input: LeaseAcceptTermInput;
};

export type MutationLeaseCancelArgs = {
  input: LeaseCancelInput;
};

export type MutationLeaseChangeNameArgs = {
  input: LeaseChangeNameInput;
};

export type MutationLeaseCompleteArgs = {
  input: LeaseCompleteInput;
};

export type MutationLeaseCompleteFixArgs = {
  input: LeaseCompleteFixInput;
};

export type MutationLeaseDeclineTermArgs = {
  input: LeaseDeclineTermInput;
};

export type MutationLeaseMakeNormalArgs = {
  input: LeaseMakeNormalInput;
};

export type MutationLeaseUpdateAddressArgs = {
  input: LeaseUpdateAddressInput;
};

export type MutationLeaseUpdateEducationArgs = {
  input: LeaseUpdateEducationInput;
};

export type MutationLeaseUpdateEmergencyArgs = {
  input: LeaseUpdateEmergencyInput;
};

export type MutationLeaseUpdateEmploymentArgs = {
  input: LeaseUpdateEmploymentInput;
};

export type MutationLeaseUpdateFinanceArgs = {
  input: LeaseUpdateFinanceInput;
};

export type MutationLeaseUploadPassportArgs = {
  input: LeaseUploadPassportInput;
};

export type MutationLeaveChatRoomArgs = {
  input: LeaveChatRoomInput;
};

export type MutationLinkCorporateGatewayArgs = {
  input: LinkCorporateGatewayInput;
};

export type MutationLinkDeviceArgs = {
  input: LinkDeviceInput;
};

export type MutationLockWalletArgs = {
  input: LockWalletInput;
};

export type MutationMarkETicketAsArgs = {
  input: MarkETicketAsInput;
};

export type MutationMassCreateRepaymentTransactionArgs = {
  input: MassCreateRepaymentTransactionInput;
};

export type MutationOrderPayArgs = {
  input: OrderPayInput;
};

export type MutationPassCouponArgs = {
  input: PassCouponInput;
};

export type MutationPassETicketArgs = {
  input: PassETicketInput;
};

export type MutationPayCargoPriceArgs = {
  input: PayCargoPriceInput;
};

export type MutationPaymentActionArgs = {
  input: PaymentActionInput;
};

export type MutationPerformId1Args = {
  input: PerformId1Input;
};

export type MutationPerformLineItemActionArgs = {
  input: PerformLineItemActionInput;
};

export type MutationPerformOrderActionArgs = {
  input: PerformOrderActionInput;
};

export type MutationPlacePackageArgs = {
  input: PlacePackageInput;
};

export type MutationPosEmployeeAcceptArgs = {
  input: PosEmployeeAcceptInput;
};

export type MutationPosOrderActionArgs = {
  input: PosOrderActionInput;
};

export type MutationPosOrderPayArgs = {
  input: PosOrderPayInput;
};

export type MutationPosReturnArgs = {
  input: PosReturnInput;
};

export type MutationPositionProductAttributesArgs = {
  input: PositionProductAttributesInput;
};

export type MutationPositionProductVariantsArgs = {
  input: PositionProductVariantsInput;
};

export type MutationPrintETicketsArgs = {
  input: PrintETicketsInput;
};

export type MutationPrintOrdersArgs = {
  input: PrintOrdersInput;
};

export type MutationProductBatchSaleArgs = {
  input: ProductBatchSaleInput;
};

export type MutationProductBatchUpdateArgs = {
  input: ProductBatchUpdateInput;
};

export type MutationProductOutOfStockArgs = {
  input: ProductOutOfStockInput;
};

export type MutationProductUpdateAttributeArgs = {
  input: ProductUpdateAttributeInput;
};

export type MutationQuickBuyArgs = {
  input: QuickBuyInput;
};

export type MutationReadAllNotificationArgs = {
  input: ReadAllNotificationInput;
};

export type MutationReadNotificationArgs = {
  input: ReadNotificationInput;
};

export type MutationReadyShipmentArgs = {
  input: ReadyShipmentInput;
};

export type MutationRebuildPrototypeTreeArgs = {
  input: RebuildPrototypeTreeInput;
};

export type MutationRebuildTaxonTreeArgs = {
  input: RebuildTaxonTreeInput;
};

export type MutationRefreshOrderTrackingsArgs = {
  input: RefreshOrderTrackingsInput;
};

export type MutationRegisterQPayCardArgs = {
  input: RegisterQPayCardInput;
};

export type MutationRejectDispatchArgs = {
  input: RejectDispatchInput;
};

export type MutationRemoveBadgeListingArgs = {
  input: RemoveBadgeListingInput;
};

export type MutationRemoveBankFromWalletArgs = {
  input: RemoveBankFromWalletInput;
};

export type MutationRemoveBtobEmployeeBankAccountArgs = {
  input: RemoveBtobEmployeeBankAccountInput;
};

export type MutationRemoveCampaignListArgs = {
  input: RemoveCampaignListInput;
};

export type MutationRemoveChatMessageArgs = {
  input: RemoveChatMessageInput;
};

export type MutationRemoveClientsFromSegmentArgs = {
  input: RemoveClientsFromSegmentInput;
};

export type MutationRemoveEmployeesFromSegmentArgs = {
  input: RemoveEmployeesFromSegmentInput;
};

export type MutationRemoveEventInviteItemArgs = {
  input: RemoveEventInviteItemInput;
};

export type MutationRemoveInvitationArgs = {
  input: RemoveInvitationInput;
};

export type MutationRemovePrescriptionArgs = {
  input: RemovePrescriptionInput;
};

export type MutationRemovePrescriptionItemArgs = {
  input: RemovePrescriptionItemInput;
};

export type MutationRemovePriceArgs = {
  input: RemovePriceInput;
};

export type MutationRemoveTaxCategoryArgs = {
  input: RemoveTaxCategoryInput;
};

export type MutationRemoveTaxRateArgs = {
  input: RemoveTaxRateInput;
};

export type MutationRemoveUsersFromSegmentArgs = {
  input: RemoveUsersFromSegmentInput;
};

export type MutationRemoveViewTrackArgs = {
  input: RemoveViewTrackInput;
};

export type MutationRemoveWebhookArgs = {
  input: RemoveWebhookInput;
};

export type MutationRequestCardOtpArgs = {
  input: RequestCardOtpInput;
};

export type MutationRequestGolomtVccArgs = {
  input: RequestGolomtVccInput;
};

export type MutationRequestListingOtpArgs = {
  input: RequestListingOtpInput;
};

export type MutationRequestMerchantArgs = {
  input: RequestMerchantInput;
};

export type MutationRequestPaymentReturnArgs = {
  input: RequestPaymentReturnInput;
};

export type MutationResendGiftCardArgs = {
  input: ResendGiftCardInput;
};

export type MutationResendIntendSmsArgs = {
  input: ResendIntendSmsInput;
};

export type MutationResendShipmentTrackingArgs = {
  input: ResendShipmentTrackingInput;
};

export type MutationReturnOrderEBarimtArgs = {
  input: ReturnOrderEBarimtInput;
};

export type MutationReviewDriverArgs = {
  input: ReviewDriverInput;
};

export type MutationScheduleSendCampaignArgs = {
  input: ScheduleSendCampaignInput;
};

export type MutationSearchAddressArgs = {
  input: SearchAddressInput;
};

export type MutationSearchParkingArgs = {
  input: SearchParkingInput;
};

export type MutationSeenChatMessageArgs = {
  input: SeenChatMessageInput;
};

export type MutationSelectPrescriptionItemArgs = {
  input: SelectPrescriptionItemInput;
};

export type MutationSendCargoInvoiceArgs = {
  input: SendCargoInvoiceInput;
};

export type MutationSendChangeLoyaltyCardPasswordOtpArgs = {
  input: SendChangeLoyaltyCardPasswordOtpInput;
};

export type MutationSendChatMessageArgs = {
  input: SendChatMessageInput;
};

export type MutationSendCouponArgs = {
  input: SendCouponInput;
};

export type MutationSendCreateLoyaltyCardOtpArgs = {
  input: SendCreateLoyaltyCardOtpInput;
};

export type MutationSendErpLoyaltyRequestArgs = {
  input: SendErpLoyaltyRequestInput;
};

export type MutationSendEventInviteItemArgs = {
  input: SendEventInviteItemInput;
};

export type MutationSendInvoiceArgs = {
  input: SendInvoiceInput;
};

export type MutationSendInvoiceNotificationArgs = {
  input: SendInvoiceNotificationInput;
};

export type MutationSendJobApplicationEmailArgs = {
  input: SendJobApplicationEmailInput;
};

export type MutationSendMassEbarimtArgs = {
  input: SendMassEbarimtInput;
};

export type MutationSendNotificationArgs = {
  input: SendNotificationInput;
};

export type MutationSendOrderEBarimtArgs = {
  input: SendOrderEBarimtInput;
};

export type MutationSendSmsArgs = {
  input: SendSmsInput;
};

export type MutationSendTutPackageArgs = {
  input: SendTutPackageInput;
};

export type MutationSendUserTokenQrArgs = {
  input: SendUserTokenQrInput;
};

export type MutationSendWalletWithdrawTokenArgs = {
  input: SendWalletWithdrawTokenInput;
};

export type MutationSetAvailabilityArgs = {
  input: SetAvailabilityInput;
};

export type MutationSetGolomtCardPasswordArgs = {
  input: SetGolomtCardPasswordInput;
};

export type MutationShipShipmentArgs = {
  input: ShipShipmentInput;
};

export type MutationShoppyBoxArgs = {
  input: ShoppyBoxInput;
};

export type MutationSubmitAnswerArgs = {
  input: SubmitAnswerInput;
};

export type MutationSwapOrderDriverArgs = {
  input: SwapOrderDriverInput;
};

export type MutationSyncAlibabaOrderArgs = {
  input: SyncAlibabaOrderInput;
};

export type MutationSyncAllCreditCardArgs = {
  input: SyncAllCreditCardInput;
};

export type MutationSyncBrandArgs = {
  input: SyncBrandInput;
};

export type MutationSyncCreditCardArgs = {
  input: SyncCreditCardInput;
};

export type MutationSyncListingsArgs = {
  input: SyncListingsInput;
};

export type MutationSyncListingsSeoArgs = {
  input: SyncListingsSeoInput;
};

export type MutationSyncPosListingsArgs = {
  input: SyncPosListingsInput;
};

export type MutationSyncReportArgs = {
  input: SyncReportInput;
};

export type MutationTestEmailCampaignArgs = {
  input: TestEmailCampaignInput;
};

export type MutationToggleFollowArgs = {
  input: ToggleFollowInput;
};

export type MutationToggleWishArgs = {
  input: ToggleWishInput;
};

export type MutationTopUpCreditCardArgs = {
  input: TopUpCreditCardInput;
};

export type MutationTopUpGiftCardArgs = {
  input: TopUpGiftCardInput;
};

export type MutationTrackTutPackageArgs = {
  input: TrackTutPackageInput;
};

export type MutationTrackTutPackageLogArgs = {
  input: TrackTutPackageLogInput;
};

export type MutationTrackTutStatusArgs = {
  input: TrackTutStatusInput;
};

export type MutationTransferPaymentReturnArgs = {
  input: TransferPaymentReturnInput;
};

export type MutationTransferShipmentArgs = {
  input: TransferShipmentInput;
};

export type MutationTranslateProductArgs = {
  input: TranslateProductInput;
};

export type MutationUnlockWalletArgs = {
  input: UnlockWalletInput;
};

export type MutationUpdateAddressArgs = {
  input: UpdateAddressInput;
};

export type MutationUpdateAdjustmentArgs = {
  input: UpdateAdjustmentInput;
};

export type MutationUpdateAfterPayArgs = {
  input: UpdateAfterPayInput;
};

export type MutationUpdateAgendaArgs = {
  input: UpdateAgendaInput;
};

export type MutationUpdateAirCommissionArgs = {
  input: UpdateAirCommissionInput;
};

export type MutationUpdateAirLimitationArgs = {
  input: UpdateAirLimitationInput;
};

export type MutationUpdateAircraftArgs = {
  input: UpdateAircraftInput;
};

export type MutationUpdateAirlineArgs = {
  input: UpdateAirlineInput;
};

export type MutationUpdateAirportArgs = {
  input: UpdateAirportInput;
};

export type MutationUpdateAlibabaCargoStatusArgs = {
  input: UpdateAlibabaCargoStatusInput;
};

export type MutationUpdateApplicationArgs = {
  input: UpdateApplicationInput;
};

export type MutationUpdateArticleArgs = {
  input: UpdateArticleInput;
};

export type MutationUpdateArticleImagesArgs = {
  input: UpdateArticleImagesInput;
};

export type MutationUpdateAssemblyPartArgs = {
  input: UpdateAssemblyPartInput;
};

export type MutationUpdateAssetRoleArgs = {
  input: UpdateAssetRoleInput;
};

export type MutationUpdateAssetRoleBatchArgs = {
  input: UpdateAssetRoleBatchInput;
};

export type MutationUpdateAuthorArgs = {
  input: UpdateAuthorInput;
};

export type MutationUpdateAvatarArgs = {
  input: UpdateAvatarInput;
};

export type MutationUpdateBadgeArgs = {
  input: UpdateBadgeInput;
};

export type MutationUpdateBankAccountArgs = {
  input: UpdateBankAccountInput;
};

export type MutationUpdateBranchArgs = {
  input: UpdateBranchInput;
};

export type MutationUpdateBrandArgs = {
  input: UpdateBrandInput;
};

export type MutationUpdateBrandListingArgs = {
  input: UpdateBrandListingInput;
};

export type MutationUpdateBtobBusinessClientArgs = {
  input: UpdateBtobBusinessClientInput;
};

export type MutationUpdateBtobOrderTemplateArgs = {
  input: UpdateBtobOrderTemplateInput;
};

export type MutationUpdateBusinessClientArgs = {
  input: UpdateBusinessClientInput;
};

export type MutationUpdateBusinessTypeArgs = {
  input: UpdateBusinessTypeInput;
};

export type MutationUpdateCampaignArgs = {
  input: UpdateCampaignInput;
};

export type MutationUpdateCampaignListArgs = {
  input: UpdateCampaignListInput;
};

export type MutationUpdateCancelReasonArgs = {
  input: UpdateCancelReasonInput;
};

export type MutationUpdateCardArgs = {
  input: UpdateCardInput;
};

export type MutationUpdateChannelArgs = {
  input: UpdateChannelInput;
};

export type MutationUpdateCheckoutOrderArgs = {
  input: UpdateCheckoutOrderInput;
};

export type MutationUpdateCinemaArgs = {
  input: UpdateCinemaInput;
};

export type MutationUpdateCinemaScreenArgs = {
  input: UpdateCinemaScreenInput;
};

export type MutationUpdateClientsStoreArgs = {
  input: UpdateClientsStoreInput;
};

export type MutationUpdateClientsStoreStatusArgs = {
  input: UpdateClientsStoreStatusInput;
};

export type MutationUpdateCompleteOrderArgs = {
  input: UpdateCompleteOrderInput;
};

export type MutationUpdateCorporateGatewayArgs = {
  input: UpdateCorporateGatewayInput;
};

export type MutationUpdateCountryArgs = {
  input: UpdateCountryInput;
};

export type MutationUpdateDepartmentStoreArgs = {
  input: UpdateDepartmentStoreInput;
};

export type MutationUpdateDistrictArgs = {
  input: UpdateDistrictInput;
};

export type MutationUpdateDropshipCategoryArgs = {
  input: UpdateDropshipCategoryInput;
};

export type MutationUpdateDynamicMenuArgs = {
  input: UpdateDynamicMenuInput;
};

export type MutationUpdateEMailCampaignArgs = {
  input: UpdateEMailCampaignInput;
};

export type MutationUpdateEMailContactTagListArgs = {
  input: UpdateEMailContactTagListInput;
};

export type MutationUpdateEMailSegmentArgs = {
  input: UpdateEMailSegmentInput;
};

export type MutationUpdateEMailTemplateArgs = {
  input: UpdateEMailTemplateInput;
};

export type MutationUpdateEmployeeArgs = {
  input: UpdateEmployeeInput;
};

export type MutationUpdateErpIntegrationArgs = {
  input: UpdateErpIntegrationInput;
};

export type MutationUpdateEventInviteArgs = {
  input: UpdateEventInviteInput;
};

export type MutationUpdateFeaturedArgs = {
  input: UpdateFeaturedInput;
};

export type MutationUpdateFeedbackArgs = {
  input: UpdateFeedbackInput;
};

export type MutationUpdateFeedbackTopicArgs = {
  input: UpdateFeedbackTopicInput;
};

export type MutationUpdateGameArgs = {
  input: UpdateGameInput;
};

export type MutationUpdateHandlebarTemplateArgs = {
  input: UpdateHandlebarTemplateInput;
};

export type MutationUpdateInvitationArgs = {
  input: UpdateInvitationInput;
};

export type MutationUpdateInvitedBtobEmployeeArgs = {
  input: UpdateInvitedBtobEmployeeInput;
};

export type MutationUpdateItemArgs = {
  input: UpdateItemInput;
};

export type MutationUpdateKeywordArgs = {
  input: UpdateKeywordInput;
};

export type MutationUpdateKycArgs = {
  input: UpdateKycInput;
};

export type MutationUpdateKycGolomtArgs = {
  input: UpdateKycGolomtInput;
};

export type MutationUpdateLeaseBlackListArgs = {
  input: UpdateLeaseBlackListInput;
};

export type MutationUpdateLineItemArgs = {
  input: UpdateLineItemInput;
};

export type MutationUpdateListingArgs = {
  input: UpdateListingInput;
};

export type MutationUpdateListingBatchArgs = {
  input: UpdateListingBatchInput;
};

export type MutationUpdateListingEsArgs = {
  input: UpdateListingEsInput;
};

export type MutationUpdateListingOptionsArgs = {
  input: UpdateListingOptionsInput;
};

export type MutationUpdateLoginArgs = {
  input: UpdateLoginInput;
};

export type MutationUpdateLookBookArgs = {
  input: UpdateLookBookInput;
};

export type MutationUpdateMTemplateArgs = {
  input: UpdateMTemplateInput;
};

export type MutationUpdateMassChatMessageArgs = {
  input: UpdateMassChatMessageInput;
};

export type MutationUpdateMerchantArgs = {
  input: UpdateMerchantInput;
};

export type MutationUpdateMerchantVatSettingsArgs = {
  input: UpdateMerchantVatSettingsInput;
};

export type MutationUpdateMovieArgs = {
  input: UpdateMovieInput;
};

export type MutationUpdateNewsArgs = {
  input: UpdateNewsInput;
};

export type MutationUpdateNoticeArgs = {
  input: UpdateNoticeInput;
};

export type MutationUpdateNutritionFactArgs = {
  input: UpdateNutritionFactInput;
};

export type MutationUpdateNutritionFactBatchArgs = {
  input: UpdateNutritionFactBatchInput;
};

export type MutationUpdateOneSignalSegmentArgs = {
  input: UpdateOneSignalSegmentInput;
};

export type MutationUpdateOptionTypeArgs = {
  input: UpdateOptionTypeInput;
};

export type MutationUpdateOptionValueArgs = {
  input: UpdateOptionValueInput;
};

export type MutationUpdateOrderArgs = {
  input: UpdateOrderInput;
};

export type MutationUpdateOrderTemplateArgs = {
  input: UpdateOrderTemplateInput;
};

export type MutationUpdatePageArgs = {
  input: UpdatePageInput;
};

export type MutationUpdatePaymentMethodArgs = {
  input: UpdatePaymentMethodInput;
};

export type MutationUpdatePaymentReturnArgs = {
  input: UpdatePaymentReturnInput;
};

export type MutationUpdatePaymentReturnReasonArgs = {
  input: UpdatePaymentReturnReasonInput;
};

export type MutationUpdatePaymentReturnSourceArgs = {
  input: UpdatePaymentReturnSourceInput;
};

export type MutationUpdatePollArgs = {
  input: UpdatePollInput;
};

export type MutationUpdatePosCustomerArgs = {
  input: UpdatePosCustomerInput;
};

export type MutationUpdatePosListingArgs = {
  input: UpdatePosListingInput;
};

export type MutationUpdatePositionDownloadableAttachmentArgs = {
  input: UpdatePositionDownloadableAttachmentInput;
};

export type MutationUpdatePositionOptionValueImageArgs = {
  input: UpdatePositionOptionValueImageInput;
};

export type MutationUpdatePositionSalePricesArgs = {
  input: UpdatePositionSalePricesInput;
};

export type MutationUpdatePositionVariantImageArgs = {
  input: UpdatePositionVariantImageInput;
};

export type MutationUpdatePrescriptionArgs = {
  input: UpdatePrescriptionInput;
};

export type MutationUpdatePrescriptionItemArgs = {
  input: UpdatePrescriptionItemInput;
};

export type MutationUpdatePriceArgs = {
  input: UpdatePriceInput;
};

export type MutationUpdateProductArgs = {
  input: UpdateProductInput;
};

export type MutationUpdateProductBookingArgs = {
  input: UpdateProductBookingInput;
};

export type MutationUpdateProductOptionTypeArgs = {
  input: UpdateProductOptionTypeInput;
};

export type MutationUpdateProductReturnArgs = {
  input: UpdateProductReturnInput;
};

export type MutationUpdateProductStageArgs = {
  input: UpdateProductStageInput;
};

export type MutationUpdatePromotionArgs = {
  input: UpdatePromotionInput;
};

export type MutationUpdatePropertyArgs = {
  input: UpdatePropertyInput;
};

export type MutationUpdatePropertyValueArgs = {
  input: UpdatePropertyValueInput;
};

export type MutationUpdatePrototypeArgs = {
  input: UpdatePrototypeInput;
};

export type MutationUpdatePushTemplateArgs = {
  input: UpdatePushTemplateInput;
};

export type MutationUpdateQuarterArgs = {
  input: UpdateQuarterInput;
};

export type MutationUpdateQuizArgs = {
  input: UpdateQuizInput;
};

export type MutationUpdateRelationDiscountArgs = {
  input: UpdateRelationDiscountInput;
};

export type MutationUpdateReportReasonArgs = {
  input: UpdateReportReasonInput;
};

export type MutationUpdateSaleListingArgs = {
  input: UpdateSaleListingInput;
};

export type MutationUpdateSalePriceArgs = {
  input: UpdateSalePriceInput;
};

export type MutationUpdateShipmentTrackingArgs = {
  input: UpdateShipmentTrackingInput;
};

export type MutationUpdateShipperArgs = {
  input: UpdateShipperInput;
};

export type MutationUpdateShippingCategoryArgs = {
  input: UpdateShippingCategoryInput;
};

export type MutationUpdateShippingMethodArgs = {
  input: UpdateShippingMethodInput;
};

export type MutationUpdateSizingGuideArgs = {
  input: UpdateSizingGuideInput;
};

export type MutationUpdateSmartGridArgs = {
  input: UpdateSmartGridInput;
};

export type MutationUpdateSmsTemplateArgs = {
  input: UpdateSmsTemplateInput;
};

export type MutationUpdateStateArgs = {
  input: UpdateStateInput;
};

export type MutationUpdateStockItemArgs = {
  input: UpdateStockItemInput;
};

export type MutationUpdateStockLocationArgs = {
  input: UpdateStockLocationInput;
};

export type MutationUpdateStoreCreditArgs = {
  input: UpdateStoreCreditInput;
};

export type MutationUpdateStoreLocationArgs = {
  input: UpdateStoreLocationInput;
};

export type MutationUpdateSupplierCategoryArgs = {
  input: UpdateSupplierCategoryInput;
};

export type MutationUpdateSupplySegmentArgs = {
  input: UpdateSupplySegmentInput;
};

export type MutationUpdateTaxCategoryArgs = {
  input: UpdateTaxCategoryInput;
};

export type MutationUpdateTaxRateArgs = {
  input: UpdateTaxRateInput;
};

export type MutationUpdateTaxonArgs = {
  input: UpdateTaxonInput;
};

export type MutationUpdateTecAssemblyGroupArgs = {
  input: UpdateTecAssemblyGroupInput;
};

export type MutationUpdateTicketTemplateArgs = {
  input: UpdateTicketTemplateInput;
};

export type MutationUpdateUserAddressArgs = {
  input: UpdateUserAddressInput;
};

export type MutationUpdateUserProfileArgs = {
  input: UpdateUserProfileInput;
};

export type MutationUpdateVacationScheduleArgs = {
  input: UpdateVacationScheduleInput;
};

export type MutationUpdateVariantArgs = {
  input: UpdateVariantInput;
};

export type MutationUpdateVariantImageArgs = {
  input: UpdateVariantImageInput;
};

export type MutationUpdateVendorArgs = {
  input: UpdateVendorInput;
};

export type MutationUpdateVendorContractArgs = {
  input: UpdateVendorContractInput;
};

export type MutationUpdateVendorLogoArgs = {
  input: UpdateVendorLogoInput;
};

export type MutationUpdateWalletVerificationArgs = {
  input: UpdateWalletVerificationInput;
};

export type MutationUpdateWebhookArgs = {
  input: UpdateWebhookInput;
};

export type MutationUpdateWebsiteArgs = {
  input: UpdateWebsiteInput;
};

export type MutationUpdateWebsiteFeaturesArgs = {
  input: UpdateWebsiteFeaturesInput;
};

export type MutationUpdateWishedProductArgs = {
  input: UpdateWishedProductInput;
};

export type MutationUpdateWishlistArgs = {
  input: UpdateWishlistInput;
};

export type MutationUpdateZoneArgs = {
  input: UpdateZoneInput;
};

export type MutationUploadArticleImageArgs = {
  input: UploadArticleImageInput;
};

export type MutationUploadProductStageArgs = {
  input: UploadProductStageInput;
};

export type MutationUploadSegmentWhiteListArgs = {
  input: UploadSegmentWhiteListInput;
};

export type MutationUseCouponArgs = {
  input: UseCouponInput;
};

export type MutationUseGiftCardArgs = {
  input: UseGiftCardInput;
};

export type MutationUseLoyaltyCardArgs = {
  input: UseLoyaltyCardInput;
};

export type MutationUsePosGiftCardArgs = {
  input: UsePosGiftCardInput;
};

export type MutationUsePosVoucherArgs = {
  input: UsePosVoucherInput;
};

export type MutationUseStoreCreditArgs = {
  input: UseStoreCreditInput;
};

export type MutationUseStoreCreditByIdArgs = {
  input: UseStoreCreditByIdInput;
};

export type MutationUseUserTokenQrArgs = {
  input: UseUserTokenQrInput;
};

export type MutationUseVoucherArgs = {
  input: UseVoucherInput;
};

export type MutationVerifyCardArgs = {
  input: VerifyCardInput;
};

export type MutationVerifyLoginArgs = {
  input: VerifyLoginInput;
};

export type MutationVerifyMnCitizenIdentityArgs = {
  input: VerifyMnCitizenIdentityInput;
};

export type MutationVerifyPaymentArgs = {
  input: VerifyPaymentInput;
};

export type MutationVerifyShipmentPinCodeArgs = {
  input: VerifyShipmentPinCodeInput;
};

export type MutationVerifyWalletArgs = {
  input: VerifyWalletInput;
};

export type MutationVerifyWalletWithdrawArgs = {
  input: VerifyWalletWithdrawInput;
};

export type MutationViewTrackArgs = {
  input: ViewTrackInput;
};

export type MutationVoidPaymentArgs = {
  input: VoidPaymentInput;
};

export type MutationVoidWalletTransactionArgs = {
  input: VoidWalletTransactionInput;
};

export type MutationWalletTransactionArgs = {
  input: WalletTransactionInput;
};

export type MutationWalletWithdrawArgs = {
  input: WalletWithdrawInput;
};

export type MutationWishlistActionArgs = {
  input: WishlistActionInput;
};

export type MutationZaryBoxArgs = {
  input: ZaryBoxInput;
};

export type NetCapitalInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "NetCapitalInvoice";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    contractNo?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    payday?: Maybe<Scalars["String"]["output"]>;
    phone?: Maybe<Scalars["String"]["output"]>;
    tanCode?: Maybe<Scalars["String"]["output"]>;
    term?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type NetCapitalInvoiceCanIArgs = {
  action: CanIAction;
};

export type News = BaseModelInterface &
  Node & {
    __typename?: "News";
    active?: Maybe<Scalars["Boolean"]["output"]>;
    author?: Maybe<User>;
    body?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    cat?: Maybe<Scalars["String"]["output"]>;
    cover?: Maybe<Scalars["JSON"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["JSON"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    impressionsCount?: Maybe<Scalars["Int"]["output"]>;
    tagList: Array<Scalars["String"]["output"]>;
    tags: Array<Tag>;
    thumbnail?: Maybe<Scalars["JSON"]["output"]>;
    title?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type NewsCanIArgs = {
  action: CanIAction;
};

export type NewsConnection = {
  __typename?: "NewsConnection";
  edges: Array<NewsEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<News>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type NewsConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type NewsConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type NewsEdge = {
  __typename?: "NewsEdge";
  cursor: Scalars["String"]["output"];
  node: News;
};

export type NewsFilter = {
  active?: InputMaybe<BoolFilter>;
  cat?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  taggedWith?: InputMaybe<Scalars["String"]["input"]>;
  tags?: InputMaybe<TagFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type Node = {
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
};

export type Notice = BaseModelInterface &
  Node & {
    __typename?: "Notice";
    body?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    expireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    link?: Maybe<Scalars["String"]["output"]>;
    linkName?: Maybe<Scalars["String"]["output"]>;
    path?: Maybe<Scalars["String"]["output"]>;
    position?: Maybe<Scalars["Int"]["output"]>;
    startAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    title?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type NoticeCanIArgs = {
  action: CanIAction;
};

export type NoticeConnection = {
  __typename?: "NoticeConnection";
  edges: Array<NoticeEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Notice>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type NoticeConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type NoticeConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type NoticeEdge = {
  __typename?: "NoticeEdge";
  cursor: Scalars["String"]["output"];
  node: Notice;
};

export type NoticeFilter = {
  createdAt?: InputMaybe<DateFilter>;
  expireAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  link?: InputMaybe<StringFilter>;
  linkName?: InputMaybe<StringFilter>;
  path?: InputMaybe<StringFilter>;
  startAt?: InputMaybe<DateFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type Notification = BaseModelInterface &
  Node & {
    __typename?: "Notification";
    activityType?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    isRead?: Maybe<Scalars["Boolean"]["output"]>;
    record?: Maybe<NotificationObject>;
    sender?: Maybe<NotificationSender>;
    title?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    website?: Maybe<Website>;
  };

export type NotificationCanIArgs = {
  action: CanIAction;
};

export type NotificationConnection = {
  __typename?: "NotificationConnection";
  edges: Array<NotificationEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Notification>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type NotificationConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type NotificationConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type NotificationEdge = {
  __typename?: "NotificationEdge";
  cursor: Scalars["String"]["output"];
  node: Notification;
};

export type NotificationFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  read?: InputMaybe<Scalars["Boolean"]["input"]>;
  unread?: InputMaybe<Scalars["Boolean"]["input"]>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type NotificationObject =
  | BusinessClient
  | ClientsStore
  | Comment
  | Employee
  | FeedbackType
  | Merchant
  | OneSignalNotification
  | Order
  | OrderComment
  | Prescription
  | Vendor
  | Website;

export type NotificationSender = User | Vendor | Website;

export type NumurInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "NumurInvoice";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceNumber?: Maybe<Scalars["String"]["output"]>;
    transNumber?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type NumurInvoiceCanIArgs = {
  action: CanIAction;
};

export type NutritionFact = BaseModelInterface &
  Node & {
    __typename?: "NutritionFact";
    altMeasures?: Maybe<Scalars["JSON"]["output"]>;
    brand?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    fullNutrients?: Maybe<Scalars["JSON"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    nfCalories?: Maybe<Scalars["Float"]["output"]>;
    nfCholesterol?: Maybe<Scalars["Float"]["output"]>;
    nfDietaryFiber?: Maybe<Scalars["Float"]["output"]>;
    nfP?: Maybe<Scalars["Float"]["output"]>;
    nfPotassium?: Maybe<Scalars["Float"]["output"]>;
    nfProtein?: Maybe<Scalars["Float"]["output"]>;
    nfSaturatedFat?: Maybe<Scalars["Float"]["output"]>;
    nfSodium?: Maybe<Scalars["Float"]["output"]>;
    nfSugars?: Maybe<Scalars["Float"]["output"]>;
    nfTotalCarbohydrate?: Maybe<Scalars["Float"]["output"]>;
    nfTotalFat?: Maybe<Scalars["Float"]["output"]>;
    servingQty?: Maybe<Scalars["Float"]["output"]>;
    servingUnit?: Maybe<Scalars["String"]["output"]>;
    servingWeightGrams?: Maybe<Scalars["Float"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    vendor?: Maybe<Vendor>;
  };

export type NutritionFactCanIArgs = {
  action: CanIAction;
};

export type NutritionFactConnection = {
  __typename?: "NutritionFactConnection";
  edges: Array<NutritionFactEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<NutritionFact>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type NutritionFactConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type NutritionFactConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type NutritionFactEdge = {
  __typename?: "NutritionFactEdge";
  cursor: Scalars["String"]["output"];
  node: NutritionFact;
};

export type NutritionFactFilter = {
  code?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  vendor?: InputMaybe<VendorFilter>;
};

export type NutritionFactInput = {
  altMeasures?: InputMaybe<Scalars["JSON"]["input"]>;
  brand?: InputMaybe<Scalars["String"]["input"]>;
  code?: InputMaybe<Scalars["String"]["input"]>;
  fullNutrients?: InputMaybe<Scalars["JSON"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  nfCalories?: InputMaybe<Scalars["Float"]["input"]>;
  nfCholesterol?: InputMaybe<Scalars["Float"]["input"]>;
  nfDietaryFiber?: InputMaybe<Scalars["Float"]["input"]>;
  nfP?: InputMaybe<Scalars["Float"]["input"]>;
  nfPotassium?: InputMaybe<Scalars["Float"]["input"]>;
  nfProtein?: InputMaybe<Scalars["Float"]["input"]>;
  nfSaturatedFat?: InputMaybe<Scalars["Float"]["input"]>;
  nfSodium?: InputMaybe<Scalars["Float"]["input"]>;
  nfSugars?: InputMaybe<Scalars["Float"]["input"]>;
  nfTotalCarbohydrate?: InputMaybe<Scalars["Float"]["input"]>;
  nfTotalFat?: InputMaybe<Scalars["Float"]["input"]>;
  servingQty?: InputMaybe<Scalars["Float"]["input"]>;
  servingUnit?: InputMaybe<Scalars["String"]["input"]>;
  servingWeightGrams?: InputMaybe<Scalars["Float"]["input"]>;
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type OSegment = BaseModelInterface &
  Node & {
    __typename?: "OSegment";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["JSON"]["output"]>;
    deviceCount?: Maybe<Scalars["Int"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    operator?: Maybe<Scalars["String"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type OSegmentCanIArgs = {
  action: CanIAction;
};

export type OSegmentConnection = {
  __typename?: "OSegmentConnection";
  edges: Array<OSegmentEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<OSegment>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type OSegmentConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type OSegmentConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type OSegmentEdge = {
  __typename?: "OSegmentEdge";
  cursor: Scalars["String"]["output"];
  node: OSegment;
};

export type OmniwayInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "OmniwayInvoice";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceNumber?: Maybe<Scalars["String"]["output"]>;
    qrContent?: Maybe<Scalars["String"]["output"]>;
    qrImage?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type OmniwayInvoiceCanIArgs = {
  action: CanIAction;
};

export type OneSignalDeviceFilter = {
  adId?: InputMaybe<StringFilter>;
  amountSpent?: InputMaybe<StringFilter>;
  badgeCount?: InputMaybe<StringFilter>;
  country?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  deviceModel?: InputMaybe<StringFilter>;
  deviceOs?: InputMaybe<StringFilter>;
  deviceType?: InputMaybe<StringFilter>;
  gameVersion?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  identifier?: InputMaybe<StringFilter>;
  ip?: InputMaybe<StringFilter>;
  lang?: InputMaybe<StringFilter>;
  language?: InputMaybe<StringFilter>;
  lastActive?: InputMaybe<StringFilter>;
  oneSignalId?: InputMaybe<StringFilter>;
  sessionCount?: InputMaybe<StringFilter>;
  subscribed?: InputMaybe<IntFilter>;
  tags?: InputMaybe<StringFilter>;
  timezone?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  webAuth?: InputMaybe<StringFilter>;
  webP256?: InputMaybe<StringFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type OneSignalNotification = BaseModelInterface &
  Node & {
    __typename?: "OneSignalNotification";
    appUrl?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    contents?: Maybe<Scalars["JSON"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    deliveryType?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    headings?: Maybe<Scalars["JSON"]["output"]>;
    id: Scalars["ID"]["output"];
    image?: Maybe<Scalars["String"]["output"]>;
    sendAfter?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    webUrl?: Maybe<Scalars["String"]["output"]>;
  };

export type OneSignalNotificationCanIArgs = {
  action: CanIAction;
};

export type OneSignalSegmentFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  operator?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type OneUsePerUser = Node &
  RuleInterface & {
    __typename?: "OneUsePerUser";
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredPerUserLimit?: Maybe<Scalars["Int"]["output"]>;
    productGroupId?: Maybe<Scalars["ID"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type OptionType = BaseModelInterface &
  Node & {
    __typename?: "OptionType";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name: Scalars["String"]["output"];
    optionValues: OptionValueConnection;
    position: Scalars["Int"]["output"];
    presentation?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type OptionTypeCanIArgs = {
  action: CanIAction;
};

export type OptionTypeOptionValuesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OptionValueFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type OptionTypePresentationArgs = {
  fallback?: InputMaybe<Scalars["String"]["input"]>;
  locale?: InputMaybe<Scalars["String"]["input"]>;
};

export type OptionTypeConnection = {
  __typename?: "OptionTypeConnection";
  edges: Array<OptionTypeEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<OptionType>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type OptionTypeConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type OptionTypeConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type OptionTypeEdge = {
  __typename?: "OptionTypeEdge";
  cursor: Scalars["String"]["output"];
  node: OptionType;
};

export type OptionTypeFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  nameOrPresentation?: InputMaybe<StringFilter>;
  presentation?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  websiteId?: InputMaybe<IdFilter>;
};

export type OptionValue = BaseModelInterface &
  Node & {
    __typename?: "OptionValue";
    canI: Scalars["Boolean"]["output"];
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name: Scalars["String"]["output"];
    optionType: OptionType;
    optionTypeId: Scalars["ID"]["output"];
    position?: Maybe<Scalars["Int"]["output"]>;
    presentation?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type OptionValueCanIArgs = {
  action: CanIAction;
};

export type OptionValuePresentationArgs = {
  fallback?: InputMaybe<Scalars["String"]["input"]>;
  locale?: InputMaybe<Scalars["String"]["input"]>;
};

export type OptionValueConnection = {
  __typename?: "OptionValueConnection";
  edges: Array<OptionValueEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<OptionValue>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type OptionValueConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type OptionValueConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type OptionValueEdge = {
  __typename?: "OptionValueEdge";
  cursor: Scalars["String"]["output"];
  node: OptionValue;
};

export type OptionValueFilter = {
  byRelevance?: InputMaybe<Scalars["String"]["input"]>;
  code?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  nameOrPresentation?: InputMaybe<StringFilter>;
  optionType?: InputMaybe<OptionTypeFilter>;
  presentation?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type Order = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "Order";
    additionalTaxTotal?: Maybe<Scalars["Float"]["output"]>;
    adjustmentTotal: Scalars["Float"]["output"];
    adjustments: Array<Adjustment>;
    airBookings: Array<AirBooking>;
    airTickets: Array<AirTicket>;
    alertSentAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    alibabaOrders: Array<AlibabaOrder>;
    allAdjustments: Array<Adjustment>;
    approvedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    approvedOrder?: Maybe<Order>;
    approvedOrderId?: Maybe<Scalars["ID"]["output"]>;
    approver?: Maybe<User>;
    archived: Scalars["Boolean"]["output"];
    audits: AuditConnection;
    billAddress?: Maybe<Address>;
    branch?: Maybe<Branch>;
    canI: Scalars["Boolean"]["output"];
    canPurchase: Scalars["Boolean"]["output"];
    cancelNote?: Maybe<Scalars["String"]["output"]>;
    cancelReason?: Maybe<CancelReason>;
    canceledAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    canceler?: Maybe<User>;
    cancellable: Scalars["Boolean"]["output"];
    cargoFee?: Maybe<Scalars["Float"]["output"]>;
    cashier?: Maybe<User>;
    categoryId?: Maybe<Scalars["ID"]["output"]>;
    channel?: Maybe<Scalars["String"]["output"]>;
    chatRoom?: Maybe<Room>;
    clientsStore?: Maybe<ClientsStore>;
    collect?: Maybe<Collect>;
    collectStartedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    comments: Array<OrderComment>;
    completedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    confirmationDelivered?: Maybe<Scalars["Boolean"]["output"]>;
    consideredRisky?: Maybe<Scalars["Boolean"]["output"]>;
    containsFragile?: Maybe<Scalars["Boolean"]["output"]>;
    contractStatus?: Maybe<Scalars["Int"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    createdBy?: Maybe<User>;
    creditOwed?: Maybe<Scalars["Float"]["output"]>;
    currency?: Maybe<Scalars["String"]["output"]>;
    customerCreditData?: Maybe<Scalars["JSON"]["output"]>;
    deliveryLocation?: Maybe<Scalars["String"]["output"]>;
    deliverySignature?: Maybe<Array<Scalars["String"]["output"]>>;
    deliveryStatusTut?: Maybe<Array<Scalars["JSON"]["output"]>>;
    digital: Scalars["Boolean"]["output"];
    dispatches: Array<Dispatch>;
    displayAdjustmentTotal?: Maybe<Scalars["String"]["output"]>;
    displayItemTotal: Scalars["String"]["output"];
    displayPromoTotal: Scalars["String"]["output"];
    displayShipTotal: Scalars["String"]["output"];
    displayTaxTotal: Scalars["String"]["output"];
    displayTotal: Scalars["String"]["output"];
    distance?: Maybe<Scalars["Float"]["output"]>;
    driver?: Maybe<User>;
    driverCode?: Maybe<Scalars["String"]["output"]>;
    driverShippingAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    driverTakenAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    driverUrl?: Maybe<Scalars["String"]["output"]>;
    dropship: Scalars["Boolean"]["output"];
    ebarimt?: Maybe<Scalars["Boolean"]["output"]>;
    ebarimtDate?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    ebarimtId?: Maybe<Scalars["String"]["output"]>;
    ebarimtLogs: Array<Log>;
    ebarimtPreview?: Maybe<Scalars["JSON"]["output"]>;
    editable: Scalars["Boolean"]["output"];
    email?: Maybe<Scalars["String"]["output"]>;
    extraData?: Maybe<Scalars["JSON"]["output"]>;
    feedbacks: FeedbackTypeConnection;
    flag?: Maybe<Scalars["String"]["output"]>;
    flaggedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    flaggedBy?: Maybe<User>;
    gid: Scalars["ID"]["output"];
    giftOrigin?: Maybe<Scalars["JSON"]["output"]>;
    id: Scalars["ID"]["output"];
    images: Array<ProductImage>;
    includedTaxTotal: Scalars["Float"]["output"];
    initialTotal?: Maybe<Scalars["Float"]["output"]>;
    integrationReports: IntegrationReportConnection;
    isBuyer: Scalars["Boolean"]["output"];
    isGreen: Scalars["Boolean"]["output"];
    isSeller: Scalars["Boolean"]["output"];
    itemCount?: Maybe<Scalars["Int"]["output"]>;
    itemTotal: Scalars["Float"]["output"];
    key?: Maybe<Scalars["String"]["output"]>;
    khanId?: Maybe<Scalars["String"]["output"]>;
    lastIpAddress?: Maybe<Scalars["String"]["output"]>;
    latestNote?: Maybe<Scalars["String"]["output"]>;
    leaseBank?: Maybe<Scalars["Float"]["output"]>;
    leaseDownPayment?: Maybe<Scalars["Float"]["output"]>;
    leaseLeft?: Maybe<Scalars["Float"]["output"]>;
    leaseSource?: Maybe<TdbmLeaseSource>;
    leaseState?: Maybe<Scalars["String"]["output"]>;
    leasingContract?: Maybe<DigitalContract>;
    lineItems: Array<LineItem>;
    lineItemsAd?: Maybe<LineItemConnection>;
    localShippingFee?: Maybe<Scalars["Float"]["output"]>;
    nonTaxableAdjustmentTotal?: Maybe<Scalars["Float"]["output"]>;
    notes?: Maybe<Scalars["Int"]["output"]>;
    number: Scalars["String"]["output"];
    outstandingBalance: Scalars["Float"]["output"];
    package?: Maybe<DeliveryPackage>;
    packages: Array<DeliveryPackage>;
    paidAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    parcels: Array<Parcel>;
    payment?: Maybe<Scalars["String"]["output"]>;
    paymentAccountData?: Maybe<Scalars["JSON"]["output"]>;
    paymentDataByMethod?: Maybe<Scalars["JSON"]["output"]>;
    paymentReturns: Array<PaymentReturn>;
    paymentState?: Maybe<Scalars["String"]["output"]>;
    paymentTotal: Scalars["Float"]["output"];
    paymentTypes: Array<Scalars["String"]["output"]>;
    payments: Array<Payment>;
    pickPackAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    pickPackBy?: Maybe<User>;
    pickPackCompletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    pickPackNumber?: Maybe<Scalars["Int"]["output"]>;
    pickPackOtp?: Maybe<Scalars["String"]["output"]>;
    pickPackStatus?: Maybe<Scalars["String"]["output"]>;
    pickPackTrackingNumber?: Maybe<Scalars["String"]["output"]>;
    posData?: Maybe<Scalars["JSON"]["output"]>;
    preferredShippingSlipData?: Maybe<Scalars["JSON"]["output"]>;
    promoTotal?: Maybe<Scalars["Float"]["output"]>;
    promotionActionPromises: PromotionActionPromiseConnection;
    promotionIds: Array<Scalars["ID"]["output"]>;
    promotionLineItems: PromotionActionLineItemConnection;
    promotions: Array<Promotion>;
    qPayInvoice?: Maybe<QPayInvoice>;
    readyCount: Scalars["Int"]["output"];
    registerNum?: Maybe<Scalars["String"]["output"]>;
    segment?: Maybe<SupplySegment>;
    shipAddress?: Maybe<Address>;
    shipmentState?: Maybe<Scalars["String"]["output"]>;
    shipmentTotal: Scalars["Float"]["output"];
    shipmentTrackings: Array<ShipmentTracking>;
    shipments: Array<Shipment>;
    shippedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    shipperManifest: Array<ShipperManifest>;
    shippingMethod?: Maybe<ShippingMethod>;
    shippingMethodNames?: Maybe<Scalars["String"]["output"]>;
    shippingMethods: ShippingMethodConnection;
    shippingSlipTemplate?: Maybe<HandlebarTemplate>;
    sms: Array<Sms>;
    specialInstructions?: Maybe<Scalars["String"]["output"]>;
    state: Scalars["String"]["output"];
    stateChanges: Array<StateChange>;
    stateLockVersion: Scalars["Int"]["output"];
    status: OrderStatusType;
    storeLocation?: Maybe<StoreLocation>;
    stores: Array<Brand>;
    subOrders: Array<Order>;
    supplierStockLocation?: Maybe<StockLocation>;
    takenItemsCount?: Maybe<Scalars["Int"]["output"]>;
    taxTotal?: Maybe<Scalars["Float"]["output"]>;
    taxableAdjustmentTotal?: Maybe<Scalars["Float"]["output"]>;
    template?: Maybe<OrderTemplate>;
    templateId?: Maybe<Scalars["ID"]["output"]>;
    token: Scalars["String"]["output"];
    total: Scalars["Float"]["output"];
    totalAfterStoreCredit: Scalars["Float"]["output"];
    totalAppliedStoreCredit: Scalars["Float"]["output"];
    totalAppliedWalletAmount: Scalars["Float"]["output"];
    totalAppliedWalletBonus: Scalars["Float"]["output"];
    totalPoint?: Maybe<Scalars["Float"]["output"]>;
    totalQuantity: Scalars["Int"]["output"];
    transactionCount?: Maybe<Scalars["Int"]["output"]>;
    transactions: Array<BankTransaction>;
    tutLengthExceeded?: Maybe<Scalars["Boolean"]["output"]>;
    tutTotalWeight?: Maybe<Scalars["Float"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    usableLoyaltyPoints?: Maybe<Scalars["Float"]["output"]>;
    usableStoreCredit?: Maybe<Scalars["Float"]["output"]>;
    useBilling?: Maybe<Scalars["Boolean"]["output"]>;
    user?: Maybe<User>;
    userGeneratedUrl?: Maybe<Scalars["String"]["output"]>;
    vatTotal?: Maybe<Scalars["Float"]["output"]>;
    vendor?: Maybe<Vendor>;
    vendors: Array<Vendor>;
    verified?: Maybe<Scalars["Boolean"]["output"]>;
    waitUntil?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    walletAmount?: Maybe<Scalars["Float"]["output"]>;
    website?: Maybe<Website>;
    weight?: Maybe<Scalars["Float"]["output"]>;
    whenToShip?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
  };

export type OrderAuditsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AuditFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type OrderCanIArgs = {
  action: CanIAction;
};

export type OrderFeedbacksArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<FeedbackFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type OrderIntegrationReportsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<IntegrationReportFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type OrderLineItemsAdArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  excludeBankPending?: InputMaybe<Scalars["Boolean"]["input"]>;
  filter?: InputMaybe<LineItemFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  ready?: InputMaybe<Scalars["Boolean"]["input"]>;
  reportType?: InputMaybe<Scalars["String"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type OrderPromotionActionPromisesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PromotionActionPromiseFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type OrderPromotionLineItemsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PromotionActionLineItemFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type OrderShipmentsArgs = {
  shipperId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type OrderShippingMethodsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ShippingMethodFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export enum OrderAction {
  AddFlag = "add_flag",
  Archive = "archive",
  Cancel = "cancel",
  Claim = "claim",
  ClaimManual = "claim_manual",
  Modify = "modify",
  PickPack = "pick_pack",
  Release = "release",
  ResendEbarimtEmail = "resend_ebarimt_email",
  ResendEmail = "resend_email",
  ResendSms = "resend_sms",
  Resume = "resume",
  SendId2 = "send_id2",
  SendId6 = "send_id6",
  SendParcelOptions = "send_parcel_options",
  Sequence = "sequence",
  Ship = "ship",
  UnArchive = "un_archive",
}

export type OrderComment = BaseModelInterface &
  Node & {
    __typename?: "OrderComment";
    canI: Scalars["Boolean"]["output"];
    comment?: Maybe<Scalars["String"]["output"]>;
    commentTypeId?: Maybe<Scalars["ID"]["output"]>;
    commentable?: Maybe<OrderNotable>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    mentions: UserConnection;
    title?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
  };

export type OrderCommentCanIArgs = {
  action: CanIAction;
};

export type OrderCommentMentionsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type OrderCommentConnection = {
  __typename?: "OrderCommentConnection";
  edges: Array<OrderCommentEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<OrderComment>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type OrderCommentConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type OrderCommentConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type OrderCommentEdge = {
  __typename?: "OrderCommentEdge";
  cursor: Scalars["String"]["output"];
  node: OrderComment;
};

export type OrderCommentFilter = {
  comment?: InputMaybe<StringFilter>;
  commentTypeId?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
};

export type OrderConnection = {
  __typename?: "OrderConnection";
  edges: Array<OrderEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Order>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type OrderConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type OrderConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type OrderEdge = {
  __typename?: "OrderEdge";
  cursor: Scalars["String"]["output"];
  node: Order;
};

export type OrderFilter = {
  adjustmentTotal?: InputMaybe<IntFilter>;
  approvedAt?: InputMaybe<DateFilter>;
  approvedOrder?: InputMaybe<OrderFilter>;
  approvedOrderId?: InputMaybe<IdFilter>;
  approver?: InputMaybe<UserFilter>;
  approverId?: InputMaybe<IdFilter>;
  archived?: InputMaybe<BoolFilter>;
  billAddress?: InputMaybe<AddressFilter>;
  billAddressLastnameOrBillAddressFirstname?: InputMaybe<StringFilter>;
  billAddressPhoneOrBillAddressLastnameOrBillAddressFirstname?: InputMaybe<StringFilter>;
  cashier?: InputMaybe<UserFilter>;
  channel?: InputMaybe<StringFilter>;
  clientVendorId?: InputMaybe<StringFilter>;
  clientsStore?: InputMaybe<ClientsStoreFilter>;
  clientsStoreId?: InputMaybe<IdFilter>;
  collect?: InputMaybe<CollectFilter>;
  comments?: InputMaybe<OrderCommentFilter>;
  completedAt?: InputMaybe<DateFilter>;
  contractStatus?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  createdBy?: InputMaybe<UserFilter>;
  driver?: InputMaybe<UserFilter>;
  driverEmailOrDriverMobileOrDriverFirstName?: InputMaybe<StringFilter>;
  driverId?: InputMaybe<IntFilter>;
  driverTakenAt?: InputMaybe<DateFilter>;
  email?: InputMaybe<StringFilter>;
  extraData?: InputMaybe<StringFilter>;
  flag?: InputMaybe<StringFilter>;
  flaggedAt?: InputMaybe<DateFilter>;
  hasComments?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  itemCount?: InputMaybe<IntFilter>;
  itemTotal?: InputMaybe<IntFilter>;
  key?: InputMaybe<StringFilter>;
  latestSuccessfulEbarimtLog?: InputMaybe<EbarimtLogFilter>;
  leaseLeft?: InputMaybe<IntFilter>;
  leaseState?: InputMaybe<StringFilter>;
  leasingContract?: InputMaybe<ContractFilter>;
  lineItems?: InputMaybe<LineItemFilter>;
  localCode?: InputMaybe<StringFilter>;
  lsAcceptedMonths?: InputMaybe<IntFilter>;
  lsAmount?: InputMaybe<IntFilter>;
  lsBankMessage?: InputMaybe<StringFilter>;
  lsCustomerFee?: InputMaybe<IntFilter>;
  lsDownPayment?: InputMaybe<IntFilter>;
  lsIncomeConfirm?: InputMaybe<BoolFilter>;
  lsInterest?: InputMaybe<IntFilter>;
  lsLimit?: InputMaybe<IntFilter>;
  lsLongMessage?: InputMaybe<StringFilter>;
  lsMerchantFee?: InputMaybe<IntFilter>;
  lsMonths?: InputMaybe<IntFilter>;
  lsRepaymentDay?: InputMaybe<IntFilter>;
  number?: InputMaybe<StringFilter>;
  numberOrCashierFirstNameOrCashierEmailOrLineItemsVariantSkuOrLineItemsVariantBarcodeOrBillAddressPhone?: InputMaybe<StringFilter>;
  paidAt?: InputMaybe<DateFilter>;
  paymentState?: InputMaybe<StringFilter>;
  payments?: InputMaybe<PaymentFilter>;
  pickPackNumber?: InputMaybe<IntFilter>;
  pickPackStatus?: InputMaybe<StringFilter>;
  pmType?: InputMaybe<StringFilter>;
  posBillId?: InputMaybe<StringFilter>;
  posData?: InputMaybe<StringFilter>;
  segment?: InputMaybe<SupplySegmentFilter>;
  shipAddress?: InputMaybe<AddressFilter>;
  shipmentState?: InputMaybe<StringFilter>;
  shipmentTotal?: InputMaybe<IntFilter>;
  shippedAt?: InputMaybe<DateFilter>;
  state?: InputMaybe<StringFilter>;
  stockLocationName?: InputMaybe<StringFilter>;
  storeLocation?: InputMaybe<StoreLocationFilter>;
  supplierStockLocation?: InputMaybe<StockLocationFilter>;
  supplierStockLocationId?: InputMaybe<IdFilter>;
  templateId?: InputMaybe<IdFilter>;
  total?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  userEmailOrBillAddressPhone?: InputMaybe<StringFilter>;
  userEmailOrShipAddressPhone?: InputMaybe<StringFilter>;
  userEmailOrUserMobileOrBillAddressPhone?: InputMaybe<StringFilter>;
  userFirstNameOrUserLastName?: InputMaybe<StringFilter>;
  userId?: InputMaybe<IdFilter>;
  vendors?: InputMaybe<VendorFilter>;
  website?: InputMaybe<WebsiteFilter>;
  whenToShip?: InputMaybe<DateFilter>;
  withParcels?: InputMaybe<StringFilter>;
};

export type OrderNotable = Order | Promotion | Warranty;

export type OrderReport = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "OrderReport";
    additionalTaxTotal?: Maybe<Scalars["Float"]["output"]>;
    adjustmentFivePercent?: Maybe<Scalars["Float"]["output"]>;
    adjustmentTotal?: Maybe<Scalars["Float"]["output"]>;
    adjustments: Array<Adjustment>;
    airBookings: Array<AirBooking>;
    airTickets: Array<AirTicket>;
    alertSentAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    alibabaOrders: Array<AlibabaOrder>;
    allAdjustments: Array<Adjustment>;
    approvedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    approvedOrder?: Maybe<Order>;
    approvedOrderId?: Maybe<Scalars["ID"]["output"]>;
    approver?: Maybe<User>;
    archived: Scalars["Boolean"]["output"];
    audits: AuditConnection;
    availablePayments?: Maybe<Scalars["JSON"]["output"]>;
    balanceDue?: Maybe<Scalars["Float"]["output"]>;
    billAddress?: Maybe<Address>;
    branch?: Maybe<Branch>;
    canI: Scalars["Boolean"]["output"];
    canPurchase: Scalars["Boolean"]["output"];
    cancelNote?: Maybe<Scalars["String"]["output"]>;
    cancelReason?: Maybe<CancelReason>;
    canceledAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    canceler?: Maybe<User>;
    cancellable: Scalars["Boolean"]["output"];
    cargoFee?: Maybe<Scalars["Float"]["output"]>;
    cashier?: Maybe<User>;
    categoryId?: Maybe<Scalars["ID"]["output"]>;
    channel?: Maybe<Scalars["String"]["output"]>;
    chatRoom?: Maybe<Room>;
    clientsStore?: Maybe<ClientsStore>;
    collect?: Maybe<Collect>;
    collectStartedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    comments: Array<OrderComment>;
    completedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    confirmationDelivered?: Maybe<Scalars["Boolean"]["output"]>;
    consideredRisky?: Maybe<Scalars["Boolean"]["output"]>;
    containsFragile?: Maybe<Scalars["Boolean"]["output"]>;
    contractStatus?: Maybe<Scalars["Int"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    createdBy?: Maybe<User>;
    creditOwed?: Maybe<Scalars["Float"]["output"]>;
    currency?: Maybe<Scalars["String"]["output"]>;
    customerCreditData?: Maybe<Scalars["JSON"]["output"]>;
    deliveryLocation?: Maybe<Scalars["String"]["output"]>;
    deliveryPhoto: Array<Scalars["String"]["output"]>;
    deliverySignature: Array<Scalars["String"]["output"]>;
    deliveryStatusTut?: Maybe<Array<Scalars["JSON"]["output"]>>;
    digital: Scalars["Boolean"]["output"];
    dispatches: Array<Dispatch>;
    displayAdjustmentTotal?: Maybe<Scalars["String"]["output"]>;
    displayItemTotal: Scalars["String"]["output"];
    displayPromoTotal: Scalars["String"]["output"];
    displayShipTotal: Scalars["String"]["output"];
    displayTaxTotal: Scalars["String"]["output"];
    displayTotal: Scalars["String"]["output"];
    distance?: Maybe<Scalars["Float"]["output"]>;
    driver?: Maybe<User>;
    driverCode?: Maybe<Scalars["String"]["output"]>;
    driverShippingAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    driverTakenAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    driverUrl?: Maybe<Scalars["String"]["output"]>;
    dropship: Scalars["Boolean"]["output"];
    ebarimt?: Maybe<Scalars["Boolean"]["output"]>;
    ebarimtDate?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    ebarimtId?: Maybe<Scalars["String"]["output"]>;
    ebarimtLogs: Array<Log>;
    ebarimtPreview?: Maybe<Scalars["JSON"]["output"]>;
    editable: Scalars["Boolean"]["output"];
    email?: Maybe<Scalars["String"]["output"]>;
    extraData?: Maybe<Scalars["JSON"]["output"]>;
    feedbacks: FeedbackTypeConnection;
    flag?: Maybe<Scalars["String"]["output"]>;
    flaggedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    flaggedBy?: Maybe<User>;
    gid: Scalars["ID"]["output"];
    giftOrigin?: Maybe<Scalars["JSON"]["output"]>;
    hasGiftCards?: Maybe<Scalars["Boolean"]["output"]>;
    id: Scalars["ID"]["output"];
    images: Array<ProductImage>;
    includedTaxTotal: Scalars["Float"]["output"];
    initialTotal?: Maybe<Scalars["Float"]["output"]>;
    integrationReports: IntegrationReportConnection;
    isBuyer: Scalars["Boolean"]["output"];
    isGreen: Scalars["Boolean"]["output"];
    isSeller: Scalars["Boolean"]["output"];
    itemCount?: Maybe<Scalars["Int"]["output"]>;
    itemTotal: Scalars["Float"]["output"];
    key?: Maybe<Scalars["String"]["output"]>;
    khanId?: Maybe<Scalars["String"]["output"]>;
    lastIpAddress?: Maybe<Scalars["String"]["output"]>;
    latestNote?: Maybe<Scalars["String"]["output"]>;
    leaseBank?: Maybe<Scalars["Float"]["output"]>;
    leaseCommission?: Maybe<Scalars["Float"]["output"]>;
    leaseDownPayment?: Maybe<Scalars["Float"]["output"]>;
    leaseLeft?: Maybe<Scalars["Float"]["output"]>;
    leaseSource?: Maybe<TdbmLeaseSource>;
    leaseState?: Maybe<Scalars["String"]["output"]>;
    leasingContract?: Maybe<DigitalContract>;
    lineItems: Array<LineItem>;
    lineItemsAd?: Maybe<LineItemConnection>;
    localShippingFee?: Maybe<Scalars["Float"]["output"]>;
    nonTaxableAdjustmentTotal?: Maybe<Scalars["Float"]["output"]>;
    notes?: Maybe<Scalars["Int"]["output"]>;
    number: Scalars["String"]["output"];
    orderCount?: Maybe<Scalars["Int"]["output"]>;
    outstandingBalance: Scalars["Float"]["output"];
    package?: Maybe<DeliveryPackage>;
    packages: Array<DeliveryPackage>;
    paidAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    parcels: Array<Parcel>;
    payment?: Maybe<Scalars["String"]["output"]>;
    paymentAccountData?: Maybe<Scalars["JSON"]["output"]>;
    paymentDataByMethod?: Maybe<Scalars["JSON"]["output"]>;
    paymentReferenceIds?: Maybe<Scalars["JSON"]["output"]>;
    paymentReturns: Array<PaymentReturn>;
    paymentState?: Maybe<Scalars["String"]["output"]>;
    paymentTotal: Scalars["Float"]["output"];
    paymentTypes: Array<Scalars["String"]["output"]>;
    payments: Array<Payment>;
    phoneComments?: Maybe<Scalars["String"]["output"]>;
    pickPackAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    pickPackBy?: Maybe<User>;
    pickPackCompletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    pickPackNumber?: Maybe<Scalars["Int"]["output"]>;
    pickPackOtp?: Maybe<Scalars["String"]["output"]>;
    pickPackStatus?: Maybe<Scalars["String"]["output"]>;
    pickPackTrackingNumber?: Maybe<Scalars["String"]["output"]>;
    posData?: Maybe<Scalars["JSON"]["output"]>;
    preferredShippingSlipData?: Maybe<Scalars["JSON"]["output"]>;
    promoTotal?: Maybe<Scalars["Float"]["output"]>;
    promotion?: Maybe<Scalars["JSON"]["output"]>;
    promotionActionPromises: PromotionActionPromiseConnection;
    promotionIds: Array<Scalars["ID"]["output"]>;
    promotionLineItems: PromotionActionLineItemConnection;
    promotions?: Maybe<Array<Promotion>>;
    qPayInvoice?: Maybe<QPayInvoice>;
    readyCount: Scalars["Int"]["output"];
    registerNum?: Maybe<Scalars["String"]["output"]>;
    segment?: Maybe<SupplySegment>;
    shipAddress?: Maybe<Address>;
    shipmentState?: Maybe<Scalars["String"]["output"]>;
    shipmentTotal: Scalars["Float"]["output"];
    shipmentTrackings: Array<ShipmentTracking>;
    shipments: Array<Shipment>;
    shippedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    shipperManifest: Array<ShipperManifest>;
    shippingMethod?: Maybe<ShippingMethod>;
    shippingMethodNames?: Maybe<Scalars["String"]["output"]>;
    shippingMethods: ShippingMethodConnection;
    shippingSlipTemplate?: Maybe<HandlebarTemplate>;
    sms: Array<Sms>;
    specialInstructions?: Maybe<Scalars["String"]["output"]>;
    state: Scalars["String"]["output"];
    stateChanges: Array<StateChange>;
    stateLockVersion: Scalars["Int"]["output"];
    status: OrderStatusType;
    storeCredit?: Maybe<Scalars["Float"]["output"]>;
    storeCreditOrigins?: Maybe<Scalars["JSON"]["output"]>;
    storeLocation?: Maybe<StoreLocation>;
    stores: Array<Brand>;
    subOrders: Array<Order>;
    supplierStockLocation?: Maybe<StockLocation>;
    takenItemsCount?: Maybe<Scalars["Int"]["output"]>;
    taxTotal?: Maybe<Scalars["Float"]["output"]>;
    taxableAdjustmentTotal?: Maybe<Scalars["Float"]["output"]>;
    template?: Maybe<OrderTemplate>;
    templateId?: Maybe<Scalars["ID"]["output"]>;
    token: Scalars["String"]["output"];
    total: Scalars["Float"]["output"];
    totalAfterStoreCredit: Scalars["Float"]["output"];
    totalAppliedStoreCredit: Scalars["Float"]["output"];
    totalAppliedWalletAmount: Scalars["Float"]["output"];
    totalAppliedWalletBonus: Scalars["Float"]["output"];
    totalPoint?: Maybe<Scalars["Float"]["output"]>;
    totalQuantity: Scalars["Int"]["output"];
    tracking: Array<Scalars["String"]["output"]>;
    transactionCount?: Maybe<Scalars["Int"]["output"]>;
    transactions: Array<BankTransaction>;
    tutLengthExceeded?: Maybe<Scalars["Boolean"]["output"]>;
    tutTotalWeight?: Maybe<Scalars["Float"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    usableLoyaltyPoints?: Maybe<Scalars["Float"]["output"]>;
    usableStoreCredit?: Maybe<Scalars["Float"]["output"]>;
    useBilling?: Maybe<Scalars["Boolean"]["output"]>;
    user?: Maybe<User>;
    userGeneratedUrl?: Maybe<Scalars["String"]["output"]>;
    vatComments?: Maybe<Scalars["Int"]["output"]>;
    vatTotal?: Maybe<Scalars["Float"]["output"]>;
    vendor?: Maybe<Vendor>;
    vendors?: Maybe<Scalars["JSON"]["output"]>;
    verified?: Maybe<Scalars["Boolean"]["output"]>;
    waitUntil?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    walletAmount?: Maybe<Scalars["Float"]["output"]>;
    website?: Maybe<Website>;
    weight?: Maybe<Scalars["Float"]["output"]>;
    whenToShip?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
  };

export type OrderReportAuditsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AuditFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type OrderReportCanIArgs = {
  action: CanIAction;
};

export type OrderReportFeedbacksArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<FeedbackFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type OrderReportIntegrationReportsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<IntegrationReportFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type OrderReportLineItemsAdArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  excludeBankPending?: InputMaybe<Scalars["Boolean"]["input"]>;
  filter?: InputMaybe<LineItemFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  ready?: InputMaybe<Scalars["Boolean"]["input"]>;
  reportType?: InputMaybe<Scalars["String"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type OrderReportPromotionActionPromisesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PromotionActionPromiseFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type OrderReportPromotionLineItemsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PromotionActionLineItemFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type OrderReportShipmentsArgs = {
  shipperId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type OrderReportShippingMethodsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ShippingMethodFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type OrderReportStoreCreditOriginsArgs = {
  type?: InputMaybe<Scalars["String"]["input"]>;
};

export enum OrderStatus {
  BalanceDue = "balanceDue",
  Complete = "complete",
  Incomplete = "incomplete",
  Paid = "paid",
  Shipped = "shipped",
  ToClaim = "to_claim",
  Unfulfilled = "unfulfilled",
  WalletFailed = "wallet_failed",
}

export type OrderStatusType = BaseModelInterface &
  Node & {
    __typename?: "OrderStatusType";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    /** @deprecated Use OrderType for this info */
    data: Scalars["JSON"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    isCancelable: Scalars["Boolean"]["output"];
    isEditable: Scalars["Boolean"]["output"];
    isFeedbackEnabled: Scalars["Boolean"]["output"];
    isOutOfStock: Scalars["Boolean"]["output"];
    isPaid: Scalars["Boolean"]["output"];
    isPayable: Scalars["Boolean"]["output"];
    isShipped: Scalars["Boolean"]["output"];
    /** @deprecated Use OrderType for this info */
    lineItems: Array<ShipmentLineItemStatusType>;
    shipmentProgress?: Maybe<Scalars["JSON"]["output"]>;
    status: Scalars["String"]["output"];
    title: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type OrderStatusTypeCanIArgs = {
  action: CanIAction;
};

export type OrderTemplate = BaseModelInterface &
  Node & {
    __typename?: "OrderTemplate";
    billAddress?: Maybe<Address>;
    branch?: Maybe<Branch>;
    business?: Maybe<Vendor>;
    businessTypes: Array<BusinessType>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    dayOfWeek?: Maybe<Scalars["String"]["output"]>;
    extraData?: Maybe<Scalars["JSON"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    isDefault: Scalars["Boolean"]["output"];
    items: Array<OrderTemplateItem>;
    lastOrder?: Maybe<Order>;
    message?: Maybe<Scalars["String"]["output"]>;
    name?: Maybe<Scalars["String"]["output"]>;
    nextDate?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    orders?: Maybe<Array<Order>>;
    rule?: Maybe<Scalars["String"]["output"]>;
    shipAddress?: Maybe<Address>;
    status?: Maybe<Scalars["String"]["output"]>;
    storeLocation?: Maybe<StoreLocation>;
    time?: Maybe<Scalars["String"]["output"]>;
    totalQuantity: Scalars["Int"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    vendor?: Maybe<Vendor>;
    website?: Maybe<Website>;
    whenToShip?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
  };

export type OrderTemplateCanIArgs = {
  action: CanIAction;
};

export type OrderTemplateConnection = {
  __typename?: "OrderTemplateConnection";
  edges: Array<OrderTemplateEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<OrderTemplate>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type OrderTemplateConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type OrderTemplateConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type OrderTemplateEdge = {
  __typename?: "OrderTemplateEdge";
  cursor: Scalars["String"]["output"];
  node: OrderTemplate;
};

export type OrderTemplateFilter = {
  branch?: InputMaybe<BranchFilter>;
  business?: InputMaybe<VendorFilter>;
  createdAt?: InputMaybe<DateFilter>;
  createdBy?: InputMaybe<UserFilter>;
  id?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  nextDate?: InputMaybe<DateFilter>;
  rule?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  vendor?: InputMaybe<VendorFilter>;
  website?: InputMaybe<WebsiteFilter>;
  whenToShip?: InputMaybe<StringFilter>;
};

export type OrderTemplateItem = BaseModelInterface &
  Node & {
    __typename?: "OrderTemplateItem";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    orderTemplate?: Maybe<OrderTemplate>;
    quantity?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variant?: Maybe<Variant>;
  };

export type OrderTemplateItemCanIArgs = {
  action: CanIAction;
};

export type OrderTemplateItemInput = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  orderTemplateId?: InputMaybe<Scalars["ID"]["input"]>;
  quantity?: InputMaybe<Scalars["Int"]["input"]>;
  variantId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type PageFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  metaDescription?: InputMaybe<StringFilter>;
  metaKeywords?: InputMaybe<StringFilter>;
  metaTitle?: InputMaybe<StringFilter>;
  seoDescription?: InputMaybe<StringFilter>;
  seoKeywords?: InputMaybe<StringFilter>;
  seoTitle?: InputMaybe<StringFilter>;
  seoVisible?: InputMaybe<BoolFilter>;
  slug?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  visible?: InputMaybe<BoolFilter>;
};

export type PageInfo = {
  __typename?: "PageInfo";
  endCursor?: Maybe<Scalars["String"]["output"]>;
  hasNextPage: Scalars["Boolean"]["output"];
  hasPreviousPage: Scalars["Boolean"]["output"];
  startCursor?: Maybe<Scalars["String"]["output"]>;
};

export type Parcel = BaseModelInterface &
  Node & {
    __typename?: "Parcel";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["JSON"]["output"]>;
    description?: Maybe<Scalars["String"]["output"]>;
    driverId?: Maybe<User>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    otp?: Maybe<Scalars["String"]["output"]>;
    sentById?: Maybe<User>;
    serviceGeneratedUrl?: Maybe<Scalars["String"]["output"]>;
    shipment?: Maybe<Shipment>;
    sourceId: Scalars["ID"]["output"];
    sourceType: Scalars["String"]["output"];
    status?: Maybe<Scalars["String"]["output"]>;
    trackingNumber?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userGeneratedUrl?: Maybe<Scalars["String"]["output"]>;
  };

export type ParcelCanIArgs = {
  action: CanIAction;
};

export type PartLineItem = BaseModelInterface &
  Node & {
    __typename?: "PartLineItem";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    lineItem?: Maybe<LineItem>;
    quantity?: Maybe<Scalars["Int"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variant?: Maybe<Variant>;
  };

export type PartLineItemCanIArgs = {
  action: CanIAction;
};

export type PassInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "PassInvoice";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceNumber?: Maybe<Scalars["String"]["output"]>;
    orderId?: Maybe<Scalars["String"]["output"]>;
    phone?: Maybe<Scalars["String"]["output"]>;
    shop?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type PassInvoiceCanIArgs = {
  action: CanIAction;
};

export type Passenger = BaseModelInterface &
  Node & {
    __typename?: "Passenger";
    birthday?: Maybe<Scalars["ISO8601Date"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    email?: Maybe<Scalars["String"]["output"]>;
    firstName?: Maybe<Scalars["String"]["output"]>;
    gender?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    lastName?: Maybe<Scalars["String"]["output"]>;
    loyalty?: Maybe<Scalars["String"]["output"]>;
    mobile?: Maybe<Scalars["String"]["output"]>;
    mobilePrefix?: Maybe<Scalars["String"]["output"]>;
    nationality?: Maybe<Country>;
    passportExpiration?: Maybe<Scalars["ISO8601Date"]["output"]>;
    passportNum?: Maybe<Scalars["String"]["output"]>;
    registerNum?: Maybe<Scalars["String"]["output"]>;
    travelerType?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    withInfant?: Maybe<Scalars["Boolean"]["output"]>;
  };

export type PassengerCanIArgs = {
  action: CanIAction;
};

export type PassengerInput = {
  ptc: Scalars["String"]["input"];
  traveller: Array<Scalars["String"]["input"]>;
};

export enum PassportFile {
  Back = "back",
  Front = "front",
  Selfie = "selfie",
}

export type PayMeSource = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "PayMeSource";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    cancelTime?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    cardExpiry?: Maybe<Scalars["String"]["output"]>;
    cardNumber?: Maybe<Scalars["String"]["output"]>;
    cardToken?: Maybe<Scalars["String"]["output"]>;
    createTime?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    fiscalSent: Scalars["Boolean"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceNumber?: Maybe<Scalars["String"]["output"]>;
    paymentMethod?: Maybe<PaymentMethod>;
    paymentMethodId?: Maybe<Scalars["ID"]["output"]>;
    performTime?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    phone?: Maybe<Scalars["String"]["output"]>;
    reason?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type PayMeSourceCanIArgs = {
  action: CanIAction;
};

export type Payment = BaseModelInterface &
  Node & {
    __typename?: "Payment";
    accountNo?: Maybe<Scalars["String"]["output"]>;
    amount: Scalars["Float"]["output"];
    avsResponse?: Maybe<Scalars["String"]["output"]>;
    bankList?: Maybe<Scalars["JSON"]["output"]>;
    bankName?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    capturedBy?: Maybe<User>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    cvvResponseCode?: Maybe<Scalars["String"]["output"]>;
    cvvResponseMessage?: Maybe<Scalars["String"]["output"]>;
    depositedOn?: Maybe<Scalars["ISO8601Date"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    number?: Maybe<Scalars["String"]["output"]>;
    order?: Maybe<Order>;
    paymentAccountData?: Maybe<Scalars["JSON"]["output"]>;
    paymentMethod?: Maybe<PaymentMethod>;
    qrCode?: Maybe<Scalars["String"]["output"]>;
    qrImage?: Maybe<Scalars["String"]["output"]>;
    remoteResponse?: Maybe<Scalars["JSON"]["output"]>;
    responseCode?: Maybe<Scalars["String"]["output"]>;
    source?: Maybe<PaymentSourceInterface>;
    sourceId?: Maybe<Scalars["ID"]["output"]>;
    sourceType?: Maybe<Scalars["String"]["output"]>;
    state?: Maybe<Scalars["String"]["output"]>;
    storeCreditEvent?: Maybe<StoreCreditEvent>;
    transactionReferenceNo?: Maybe<Scalars["String"]["output"]>;
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type PaymentCanIArgs = {
  action: CanIAction;
};

export type PaymentConnection = {
  __typename?: "PaymentConnection";
  edges: Array<PaymentEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Payment>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type PaymentConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type PaymentConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type PaymentEdge = {
  __typename?: "PaymentEdge";
  cursor: Scalars["String"]["output"];
  node: Payment;
};

export type PaymentFilter = {
  amount?: InputMaybe<IntFilter>;
  bankName?: InputMaybe<StringFilter>;
  capturedBy?: InputMaybe<UserFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  number?: InputMaybe<StringFilter>;
  order?: InputMaybe<OrderFilter>;
  paymentMethod?: InputMaybe<PaymentMethodFilter>;
  sourceType?: InputMaybe<StringFilter>;
  state?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type PaymentInput = {
  amount?: InputMaybe<Scalars["Float"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
};

export enum PaymentKind {
  Transfer = "transfer",
  Wallet = "wallet",
}

export type PaymentMethod = BaseModelInterface &
  Node & {
    __typename?: "PaymentMethod";
    active?: Maybe<Scalars["Boolean"]["output"]>;
    afterPay: Scalars["Boolean"]["output"];
    autoCapture?: Maybe<Scalars["Boolean"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    currencies: Array<Scalars["String"]["output"]>;
    data: Scalars["JSON"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    displayOn?: Maybe<Scalars["String"]["output"]>;
    eBarimt: Scalars["Boolean"]["output"];
    fee: Scalars["Float"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    methodType: PaymentMethodKind | `${PaymentMethodKind}`;
    name: Scalars["String"]["output"];
    paymentSourceClass?: Maybe<Scalars["String"]["output"]>;
    position?: Maybe<Scalars["Int"]["output"]>;
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    returnable: Scalars["Boolean"]["output"];
    settlementDays?: Maybe<Scalars["Int"]["output"]>;
    storeLocation?: Maybe<StoreLocation>;
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    vendor?: Maybe<Vendor>;
    website?: Maybe<Website>;
  };

export type PaymentMethodCanIArgs = {
  action: CanIAction;
};

export type PaymentMethodFilter = {
  active?: InputMaybe<BoolFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export enum PaymentMethodKind {
  AlifPay = "alif_pay",
  ArdInApp = "ard_in_app",
  BankTransfer = "bank_transfer",
  BinancePay = "binance_pay",
  BitPayment = "bit_payment",
  Bogus = "bogus",
  BogusSimple = "bogus_simple",
  CandyInApp = "candy_in_app",
  CashOnDelivery = "cash_on_delivery",
  Check = "check",
  ClickPayment = "click_payment",
  Complete = "complete",
  DigiPayInApp = "digi_pay_in_app",
  DigitalCredit = "digital_credit",
  DownPayment = "down_payment",
  ErpIntegrationAccountsReceivable = "erp_integration_accounts_receivable",
  Golomt = "golomt",
  GolomtDigitalBank = "golomt_digital_bank",
  GolomtInApp = "golomt_in_app",
  GolomtPosTerminal = "golomt_pos_terminal",
  GolomtWallet = "golomt_wallet",
  GolomtWalletSocialPay = "golomt_wallet_social_pay",
  HiPay = "hi_pay",
  HiPayInApp = "hi_pay_in_app",
  HiPayWeChat = "hi_pay_we_chat",
  Intend = "intend",
  Khaan = "khaan",
  KhaanInApp = "khaan_in_app",
  KhaanLeasing = "khaan_leasing",
  Lend = "lend",
  LendInApp = "lend_in_app",
  LendPay = "lend_pay",
  MBankCard = "m_bank_card",
  MBankInApp = "m_bank_in_app",
  MBankMerchant = "m_bank_merchant",
  MemePay = "meme_pay",
  MessengerLoanInApp = "messenger_loan_in_app",
  MongolChat = "mongol_chat",
  Moni = "moni",
  Monpay = "monpay",
  MonpayInApp = "monpay_in_app",
  MonpayV2 = "monpay_v2",
  Most = "most",
  MostInApp = "most_in_app",
  MostOts = "most_ots",
  MostTan = "most_tan",
  MostV2 = "most_v2",
  NetCapital = "net_capital",
  NonBanking = "non_banking",
  Numur = "numur",
  Omniway = "omniway",
  Pass = "pass",
  PayMe = "pay_me",
  PayMeCard = "pay_me_card",
  PayPalGateway = "pay_pal_gateway",
  PaynetPayment = "paynet_payment",
  Paypal = "paypal",
  Pocket = "pocket",
  PocketInApp = "pocket_in_app",
  PocketZero = "pocket_zero",
  Qpay = "qpay",
  QpayMerchant = "qpay_merchant",
  QpayV2 = "qpay_v2",
  QpayWallet = "qpay_wallet",
  ShoppyWallet = "shoppy_wallet",
  Simple = "simple",
  SimpleInApp = "simple_in_app",
  SimpleV2 = "simple_v2",
  SocialPay = "social_pay",
  SocialPayQr = "social_pay_qr",
  Sono = "sono",
  StorePay = "store_pay",
  Storecredit = "storecredit",
  Stripe = "stripe",
  StripeApplePay = "stripe_apple_pay",
  TdbInApp = "tdb_in_app",
  Tdbm = "tdbm",
  TdbmLease = "tdbm_lease",
  TdbmLeaseV2 = "tdbm_lease_v2",
  TdbmLeaseV3 = "tdbm_lease_v3",
  TdbmPosTerminal = "tdbm_pos_terminal",
  Toki = "toki",
  TokiInApp = "toki_in_app",
  UzumNasiya = "uzum_nasiya",
  WeChat = "we_chat",
  WellbeeCreditGateway = "wellbee_credit_gateway",
  Xac = "xac",
  XacLeasing = "xac_leasing",
}

export type PaymentReturn = BaseModelInterface &
  Node & {
    __typename?: "PaymentReturn";
    accountBank?: Maybe<Scalars["String"]["output"]>;
    accountName?: Maybe<Scalars["String"]["output"]>;
    accountNumber?: Maybe<Scalars["String"]["output"]>;
    amount?: Maybe<Scalars["Float"]["output"]>;
    audits: AuditConnection;
    canI: Scalars["Boolean"]["output"];
    commission?: Maybe<Scalars["Float"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    creator?: Maybe<User>;
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    description?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    journalNo?: Maybe<Scalars["String"]["output"]>;
    lineItemIds: Array<Scalars["ID"]["output"]>;
    lineItems: Array<LineItem>;
    message?: Maybe<Scalars["String"]["output"]>;
    note?: Maybe<Scalars["String"]["output"]>;
    order?: Maybe<Order>;
    otherFee?: Maybe<Scalars["Float"]["output"]>;
    paidAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    payment?: Maybe<Payment>;
    reason?: Maybe<PaymentReturnReason>;
    returnItems: Array<PaymentReturnItem>;
    returner?: Maybe<User>;
    returnsCount?: Maybe<Scalars["Int"]["output"]>;
    source?: Maybe<PaymentReturnSource>;
    status?: Maybe<Scalars["String"]["output"]>;
    storeLocation?: Maybe<StoreLocation>;
    transactionId?: Maybe<Scalars["ID"]["output"]>;
    transactionType?: Maybe<Scalars["String"]["output"]>;
    transferAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    uuid?: Maybe<Scalars["String"]["output"]>;
    website?: Maybe<Website>;
  };

export type PaymentReturnAuditsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AuditFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type PaymentReturnCanIArgs = {
  action: CanIAction;
};

export type PaymentReturnConnection = {
  __typename?: "PaymentReturnConnection";
  edges: Array<PaymentReturnEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<PaymentReturn>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type PaymentReturnConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type PaymentReturnConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type PaymentReturnEdge = {
  __typename?: "PaymentReturnEdge";
  cursor: Scalars["String"]["output"];
  node: PaymentReturn;
};

export type PaymentReturnFilter = {
  accountBank?: InputMaybe<StringFilter>;
  accountName?: InputMaybe<StringFilter>;
  accountNumber?: InputMaybe<StringFilter>;
  amount?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateFilter>;
  creator?: InputMaybe<UserFilter>;
  id?: InputMaybe<IdFilter>;
  message?: InputMaybe<StringFilter>;
  note?: InputMaybe<StringFilter>;
  number?: InputMaybe<StringFilter>;
  order?: InputMaybe<OrderFilter>;
  payment?: InputMaybe<PaymentFilter>;
  returner?: InputMaybe<UserFilter>;
  status?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type PaymentReturnItem = BaseModelInterface &
  Node & {
    __typename?: "PaymentReturnItem";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    lineItem: LineItem;
    lineItemId: Scalars["ID"]["output"];
    order: Order;
    paymentReturn: PaymentReturn;
    quantity?: Maybe<Scalars["Int"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type PaymentReturnItemCanIArgs = {
  action: CanIAction;
};

export type PaymentReturnReason = BaseModelInterface &
  Node & {
    __typename?: "PaymentReturnReason";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    description?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type PaymentReturnReasonCanIArgs = {
  action: CanIAction;
};

export type PaymentReturnReasonConnection = {
  __typename?: "PaymentReturnReasonConnection";
  edges: Array<PaymentReturnReasonEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<PaymentReturnReason>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type PaymentReturnReasonConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type PaymentReturnReasonConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type PaymentReturnReasonEdge = {
  __typename?: "PaymentReturnReasonEdge";
  cursor: Scalars["String"]["output"];
  node: PaymentReturnReason;
};

export type PaymentReturnReasonFilter = {
  createdAt?: InputMaybe<DateFilter>;
  description?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type PaymentReturnSource = Node & {
  __typename?: "PaymentReturnSource";
  deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  name?: Maybe<Scalars["String"]["output"]>;
  website?: Maybe<Website>;
};

export type PaymentReturnSourceConnection = {
  __typename?: "PaymentReturnSourceConnection";
  edges: Array<PaymentReturnSourceEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<PaymentReturnSource>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type PaymentReturnSourceConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type PaymentReturnSourceConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type PaymentReturnSourceEdge = {
  __typename?: "PaymentReturnSourceEdge";
  cursor: Scalars["String"]["output"];
  node: PaymentReturnSource;
};

export type PaymentReturnSourceFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type PaymentSource = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "PaymentSource";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["JSON"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    idx?: Maybe<Scalars["String"]["output"]>;
    idx2?: Maybe<Scalars["String"]["output"]>;
    invoice?: Maybe<Scalars["String"]["output"]>;
    orderId?: Maybe<Scalars["ID"]["output"]>;
    paymentId?: Maybe<Scalars["ID"]["output"]>;
    paymentMethodId?: Maybe<Scalars["ID"]["output"]>;
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type PaymentSourceCanIArgs = {
  action: CanIAction;
};

export type PaymentSourceInterface = {
  canI: Scalars["Boolean"]["output"];
  createdAt: Scalars["ISO8601DateTime"]["output"];
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  updatedAt: Scalars["ISO8601DateTime"]["output"];
};

export type PaymentSourceInterfaceCanIArgs = {
  action: CanIAction;
};

export type PaypalInvoice = BaseModelInterface &
  Node & {
    __typename?: "PaypalInvoice";
    authorizationId?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    orderId?: Maybe<Scalars["String"]["output"]>;
    payeeId?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type PaypalInvoiceCanIArgs = {
  action: CanIAction;
};

export type PercentOnLineItem = BaseModelInterface &
  CalculatorInterface &
  Node & {
    __typename?: "PercentOnLineItem";
    calculableId?: Maybe<Scalars["Int"]["output"]>;
    calculableType?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredPercent: Scalars["Float"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type PercentOnLineItemCanIArgs = {
  action: CanIAction;
};

export type PickUpLocation = BaseModelInterface &
  Node & {
    __typename?: "PickUpLocation";
    acceptcard?: Maybe<Scalars["String"]["output"]>;
    acceptcash?: Maybe<Scalars["String"]["output"]>;
    acceptindividuals?: Maybe<Scalars["String"]["output"]>;
    address?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    clientcode?: Maybe<Scalars["String"]["output"]>;
    code?: Maybe<Scalars["String"]["output"]>;
    comment?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    latitude?: Maybe<Scalars["String"]["output"]>;
    longitude?: Maybe<Scalars["String"]["output"]>;
    maxweight?: Maybe<Scalars["String"]["output"]>;
    name?: Maybe<Scalars["String"]["output"]>;
    parentcode?: Maybe<Scalars["String"]["output"]>;
    parentname?: Maybe<Scalars["String"]["output"]>;
    phone?: Maybe<Scalars["String"]["output"]>;
    terminalType?: Maybe<Scalars["String"]["output"]>;
    traveldescription?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    worktime?: Maybe<Scalars["String"]["output"]>;
  };

export type PickUpLocationCanIArgs = {
  action: CanIAction;
};

export enum PmDisplayKind {
  BackEnd = "back_end",
  Both = "both",
  FrontEnd = "front_end",
}

export type PocketInAppInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "PocketInAppInvoice";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    holdId?: Maybe<Scalars["String"]["output"]>;
    id: Scalars["ID"]["output"];
    info?: Maybe<Scalars["String"]["output"]>;
    invoiceId?: Maybe<Scalars["String"]["output"]>;
    terminalId?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type PocketInAppInvoiceCanIArgs = {
  action: CanIAction;
};

export type PocketInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "PocketInvoice";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    heldId?: Maybe<Scalars["String"]["output"]>;
    id: Scalars["ID"]["output"];
    info?: Maybe<Scalars["String"]["output"]>;
    invoiceId?: Maybe<Scalars["String"]["output"]>;
    phone?: Maybe<Scalars["String"]["output"]>;
    qrCode?: Maybe<Scalars["String"]["output"]>;
    qrImage?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type PocketInvoiceCanIArgs = {
  action: CanIAction;
};

export type PocketZeroInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "PocketZeroInvoice";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    customerId?: Maybe<Scalars["String"]["output"]>;
    duration?: Maybe<Scalars["String"]["output"]>;
    email?: Maybe<Scalars["String"]["output"]>;
    expireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    holdAmount?: Maybe<Scalars["String"]["output"]>;
    holdId?: Maybe<Scalars["String"]["output"]>;
    id: Scalars["ID"]["output"];
    invoiceId?: Maybe<Scalars["String"]["output"]>;
    invoiceNumber?: Maybe<Scalars["String"]["output"]>;
    isUsed?: Maybe<Scalars["Boolean"]["output"]>;
    lastName?: Maybe<Scalars["String"]["output"]>;
    name?: Maybe<Scalars["String"]["output"]>;
    phone?: Maybe<Scalars["String"]["output"]>;
    register?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type PocketZeroInvoiceCanIArgs = {
  action: CanIAction;
};

export type Poll = BaseModelInterface &
  Node & {
    __typename?: "Poll";
    active?: Maybe<Scalars["Boolean"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    creator?: Maybe<User>;
    expireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    image?: Maybe<Scalars["String"]["output"]>;
    question?: Maybe<Scalars["String"]["output"]>;
    questions: Array<PollQuestion>;
    startAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type PollCanIArgs = {
  action: CanIAction;
};

export type PollAnswer = BaseModelInterface &
  Node & {
    __typename?: "PollAnswer";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    question?: Maybe<PollQuestion>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    voteDate?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
  };

export type PollAnswerCanIArgs = {
  action: CanIAction;
};

export type PollAnswerConnection = {
  __typename?: "PollAnswerConnection";
  edges: Array<PollAnswerEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<PollAnswer>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type PollAnswerConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type PollAnswerConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type PollAnswerEdge = {
  __typename?: "PollAnswerEdge";
  cursor: Scalars["String"]["output"];
  node: PollAnswer;
};

export type PollConnection = {
  __typename?: "PollConnection";
  edges: Array<PollEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Poll>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type PollConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type PollConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type PollEdge = {
  __typename?: "PollEdge";
  cursor: Scalars["String"]["output"];
  node: Poll;
};

export type PollFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type PollQuestion = BaseModelInterface &
  Node & {
    __typename?: "PollQuestion";
    answers: PollAnswerConnection;
    answersCount?: Maybe<Scalars["Int"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    poll?: Maybe<Poll>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type PollQuestionAnswersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type PollQuestionCanIArgs = {
  action: CanIAction;
};

export type PollQuestionInput = {
  _destroy?: InputMaybe<Scalars["Boolean"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
};

export type PosListing = BaseModelInterface &
  Node & {
    __typename?: "PosListing";
    activeSince?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    activeUntil?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    approved?: Maybe<Scalars["Boolean"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    createdBy?: Maybe<User>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    product: Product;
    published?: Maybe<Scalars["Boolean"]["output"]>;
    slug?: Maybe<Scalars["String"]["output"]>;
    storeLocation: StoreLocation;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type PosListingCanIArgs = {
  action: CanIAction;
};

export type PosListingConnection = {
  __typename?: "PosListingConnection";
  edges: Array<PosListingEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<PosListing>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type PosListingConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type PosListingConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type PosListingEdge = {
  __typename?: "PosListingEdge";
  cursor: Scalars["String"]["output"];
  node: PosListing;
};

export type PosListingFilter = {
  approved?: InputMaybe<BoolFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  product?: InputMaybe<ProductFilter>;
  published?: InputMaybe<BoolFilter>;
  slug?: InputMaybe<StringFilter>;
  storeLocation?: InputMaybe<StoreLocationFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export enum PosOrderAction {
  Check = "check",
  SendEmail = "send_email",
  SendSms = "send_sms",
}

export type Prescription = BaseModelInterface &
  Node & {
    __typename?: "Prescription";
    canI: Scalars["Boolean"]["output"];
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    diagnosis?: Maybe<Scalars["String"]["output"]>;
    doctorHospital?: Maybe<Scalars["String"]["output"]>;
    doctorName?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    image: Scalars["String"]["output"];
    image1: Scalars["String"]["output"];
    items: Array<PrescriptionItem>;
    number: Scalars["String"]["output"];
    order?: Maybe<Order>;
    orderId?: Maybe<Scalars["ID"]["output"]>;
    patientName?: Maybe<Scalars["String"]["output"]>;
    prescriptionDate?: Maybe<Scalars["ISO8601Date"]["output"]>;
    prescriptionVariants: Array<PrescriptionVariant>;
    reviewComment?: Maybe<Scalars["String"]["output"]>;
    reviewedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    reviewer?: Maybe<User>;
    reviewerId?: Maybe<Scalars["ID"]["output"]>;
    status: PrescriptionStatus | `${PrescriptionStatus}`;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user: User;
    userId: Scalars["ID"]["output"];
    variants: Array<Variant>;
    website: Website;
    websiteId: Scalars["ID"]["output"];
  };

export type PrescriptionCanIArgs = {
  action: CanIAction;
};

export type PrescriptionImageArgs = {
  size?: InputMaybe<Scalars["String"]["input"]>;
};

export type PrescriptionImage1Args = {
  size?: InputMaybe<Scalars["String"]["input"]>;
};

export type PrescriptionConnection = {
  __typename?: "PrescriptionConnection";
  edges: Array<PrescriptionEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Prescription>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type PrescriptionConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type PrescriptionConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type PrescriptionEdge = {
  __typename?: "PrescriptionEdge";
  cursor: Scalars["String"]["output"];
  node: Prescription;
};

export type PrescriptionFilter = {
  code?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  diagnosis?: InputMaybe<StringFilter>;
  doctorHospital?: InputMaybe<StringFilter>;
  doctorName?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  number?: InputMaybe<StringFilter>;
  order?: InputMaybe<OrderFilter>;
  patientName?: InputMaybe<StringFilter>;
  reviewer?: InputMaybe<UserFilter>;
  status?: InputMaybe<EnumStringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type PrescriptionItem = BaseModelInterface &
  Node & {
    __typename?: "PrescriptionItem";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    drugName?: Maybe<Scalars["String"]["output"]>;
    drugNumber?: Maybe<Scalars["String"]["output"]>;
    frequency?: Maybe<Scalars["Int"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    lineItem?: Maybe<LineItem>;
    lineItemId?: Maybe<Scalars["ID"]["output"]>;
    prescription: Prescription;
    prescriptionId: Scalars["ID"]["output"];
    prescriptionVariants: Array<PrescriptionVariant>;
    quantity?: Maybe<Scalars["Int"]["output"]>;
    status?: Maybe<PrescriptionItemStatus | `${PrescriptionItemStatus}`>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variantIds: Array<Scalars["ID"]["output"]>;
    variants: Array<Variant>;
  };

export type PrescriptionItemCanIArgs = {
  action: CanIAction;
};

export enum PrescriptionItemStatus {
  Active = "active",
  Used = "used",
}

export enum PrescriptionStatus {
  Accepted = "accepted",
  Cancelled = "cancelled",
  Pending = "pending",
  Used = "used",
}

export type PrescriptionVariant = BaseModelInterface &
  Node & {
    __typename?: "PrescriptionVariant";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    item: PrescriptionItem;
    itemId: Scalars["ID"]["output"];
    prescription: Prescription;
    prescriptionId: Scalars["ID"]["output"];
    quantity?: Maybe<Scalars["Int"]["output"]>;
    selected: Scalars["Boolean"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variant: Variant;
    variantId: Scalars["ID"]["output"];
  };

export type PrescriptionVariantCanIArgs = {
  action: CanIAction;
};

export type Price = BaseModelInterface &
  Node & {
    __typename?: "Price";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    currency: Scalars["String"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    position: Scalars["Int"]["output"];
    price?: Maybe<Scalars["Float"]["output"]>;
    salePrices: Array<SalePrice>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variant: Variant;
    variantId: Scalars["ID"]["output"];
  };

export type PriceCanIArgs = {
  action: CanIAction;
};

export type PriceFilter = {
  amount?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type Printing = BaseModelInterface &
  Node & {
    __typename?: "Printing";
    attachment?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["JSON"]["output"]>;
    firstName?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    lastName?: Maybe<Scalars["String"]["output"]>;
    lineItem?: Maybe<LineItem>;
    mobile?: Maybe<Scalars["String"]["output"]>;
    order?: Maybe<Order>;
    product?: Maybe<Product>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type PrintingCanIArgs = {
  action: CanIAction;
};

export type PrintingConnection = {
  __typename?: "PrintingConnection";
  edges: Array<PrintingEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Printing>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type PrintingConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type PrintingConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type PrintingEdge = {
  __typename?: "PrintingEdge";
  cursor: Scalars["String"]["output"];
  node: Printing;
};

export type PrintingFilter = {
  createdAt?: InputMaybe<DateFilter>;
  firstName?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  lastName?: InputMaybe<StringFilter>;
  lineItem?: InputMaybe<LineItemFilter>;
  mobile?: InputMaybe<StringFilter>;
  order?: InputMaybe<OrderFilter>;
  preview?: InputMaybe<StringFilter>;
  product?: InputMaybe<ProductFilter>;
  publishedAt?: InputMaybe<DateFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type PrintingManifest = Node &
  ProductManifestInterface & {
    __typename?: "PrintingManifest";
    brand?: Maybe<Brand>;
    canSupply?: Maybe<Scalars["Boolean"]["output"]>;
    expireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    fulfillDuration?: Maybe<Scalars["Int"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    image?: Maybe<Scalars["String"]["output"]>;
    maxQty?: Maybe<Scalars["Int"]["output"]>;
    name: Scalars["String"]["output"];
    optionsText?: Maybe<Scalars["String"]["output"]>;
    price: Scalars["Float"]["output"];
    printings?: Maybe<Array<Printing>>;
    productCat?: Maybe<Scalars["String"]["output"]>;
    sku?: Maybe<Scalars["String"]["output"]>;
    slug: Scalars["String"]["output"];
    totalOnHand?: Maybe<Scalars["Int"]["output"]>;
    vendor?: Maybe<Vendor>;
    weight?: Maybe<Scalars["Float"]["output"]>;
  };

export type PrizeSource = Promotion;

export type Product = BaseModelInterface &
  Node & {
    __typename?: "Product";
    assembliesParts: Array<AssemblyPart>;
    attributes?: Maybe<Scalars["JSON"]["output"]>;
    audits: AuditConnection;
    availableOn?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    availableUntil?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    averageRating: Scalars["Float"]["output"];
    barcode?: Maybe<Scalars["String"]["output"]>;
    booking?: Maybe<Booking>;
    brand?: Maybe<Brand>;
    canI: Scalars["Boolean"]["output"];
    canSupply: Scalars["Boolean"]["output"];
    cancelDuration?: Maybe<Scalars["Int"]["output"]>;
    chatRoom?: Maybe<Room>;
    condition?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    currency?: Maybe<Scalars["String"]["output"]>;
    currentListing?: Maybe<Listing>;
    data: Scalars["JSON"]["output"];
    dates?: Maybe<Array<Scalars["String"]["output"]>>;
    defaultPrice: Scalars["Float"]["output"];
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    description?: Maybe<Scalars["String"]["output"]>;
    discontinueOn?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    documents: Array<ProductDocument>;
    donations: DonationConnection;
    eTicketStats?: Maybe<ETicketDashboard>;
    featured?: Maybe<Scalars["Boolean"]["output"]>;
    features?: Maybe<Scalars["JSON"]["output"]>;
    fragile?: Maybe<Scalars["Boolean"]["output"]>;
    gid: Scalars["ID"]["output"];
    giftCard?: Maybe<Scalars["Boolean"]["output"]>;
    id: Scalars["ID"]["output"];
    image?: Maybe<Scalars["String"]["output"]>;
    images: Array<ProductImage>;
    info?: Maybe<Scalars["JSON"]["output"]>;
    isListedOnWebsite?: Maybe<Scalars["Boolean"]["output"]>;
    keyword?: Maybe<Keyword>;
    keywordId?: Maybe<Scalars["ID"]["output"]>;
    labelCode?: Maybe<Scalars["String"]["output"]>;
    licenses: LicenseConnection;
    listings: Array<Listing>;
    listingsCon: ListingConnection;
    master: Variant;
    merchantSku?: Maybe<Scalars["String"]["output"]>;
    metaDescription?: Maybe<Scalars["String"]["output"]>;
    metaKeywords?: Maybe<Scalars["String"]["output"]>;
    metaTitle?: Maybe<Scalars["String"]["output"]>;
    myReview?: Maybe<Review>;
    name?: Maybe<Scalars["String"]["output"]>;
    nonReturnable?: Maybe<Scalars["Boolean"]["output"]>;
    optionTypes: Array<OptionType>;
    optionValues: Array<OptionValue>;
    packageCode?: Maybe<Scalars["String"]["output"]>;
    posMaxQty?: Maybe<Scalars["Int"]["output"]>;
    posVariants?: Maybe<Array<Variant>>;
    possibleOptionValues: Array<OptionValue>;
    price: Scalars["Float"]["output"];
    prices: Array<Price>;
    productCat?: Maybe<Scalars["String"]["output"]>;
    productOptionValues: Array<ProductOptionValue>;
    productProperties: Array<ProductProperty>;
    promotionable?: Maybe<Scalars["Boolean"]["output"]>;
    property?: Maybe<Scalars["String"]["output"]>;
    prototype?: Maybe<Prototype>;
    reviews: ReviewConnection;
    saleExpireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    salePrices: Array<SalePrice>;
    sellingPrice: Scalars["Float"]["output"];
    shippingCategoryId?: Maybe<Scalars["ID"]["output"]>;
    sizingGuide?: Maybe<SizingGuide>;
    sizingGuideId?: Maybe<Scalars["ID"]["output"]>;
    sku: Scalars["String"]["output"];
    slug: Scalars["String"]["output"];
    stage?: Maybe<Stage>;
    stockLocations: Array<StockLocation>;
    storeId?: Maybe<Scalars["ID"]["output"]>;
    taxCategoryId?: Maybe<Scalars["ID"]["output"]>;
    taxCode?: Maybe<Scalars["String"]["output"]>;
    title: Scalars["String"]["output"];
    totalDonated: Scalars["Float"]["output"];
    totalOnHand: Scalars["Float"]["output"];
    totalOnHandAll: Scalars["Float"]["output"];
    totalReviews: Scalars["Int"]["output"];
    translations: Array<ProductTranslation>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variantSeries: Array<Variant>;
    variants: Array<Variant>;
    variantsIncludingMaster: Array<Variant>;
    variantsIncludingMasterAndSeries: Array<Variant>;
    vendor?: Maybe<Vendor>;
    youtube?: Maybe<Scalars["String"]["output"]>;
  };

export type ProductAuditsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AuditFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type ProductCanIArgs = {
  action: CanIAction;
};

export type ProductDescriptionArgs = {
  fallback?: InputMaybe<Scalars["String"]["input"]>;
  locale?: InputMaybe<Scalars["String"]["input"]>;
};

export type ProductDonationsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<DonationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type ProductETicketStatsArgs = {
  filterType?: InputMaybe<Scalars["String"]["input"]>;
  from?: InputMaybe<Scalars["String"]["input"]>;
  scanStats?: InputMaybe<Scalars["Boolean"]["input"]>;
  to?: InputMaybe<Scalars["String"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type ProductImageArgs = {
  mirror?: InputMaybe<Scalars["Boolean"]["input"]>;
  size?: InputMaybe<ProductImageSize>;
};

export type ProductLicensesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<LicenseFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type ProductListingsConArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ListingFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type ProductMetaDescriptionArgs = {
  fallback?: InputMaybe<Scalars["String"]["input"]>;
  locale?: InputMaybe<Scalars["String"]["input"]>;
};

export type ProductMetaKeywordsArgs = {
  fallback?: InputMaybe<Scalars["String"]["input"]>;
  locale?: InputMaybe<Scalars["String"]["input"]>;
};

export type ProductMetaTitleArgs = {
  fallback?: InputMaybe<Scalars["String"]["input"]>;
  locale?: InputMaybe<Scalars["String"]["input"]>;
};

export type ProductNameArgs = {
  fallback?: InputMaybe<Scalars["String"]["input"]>;
  locale?: InputMaybe<Scalars["String"]["input"]>;
};

export type ProductPriceArgs = {
  currency?: InputMaybe<Scalars["String"]["input"]>;
};

export type ProductPropertyArgs = {
  name: Scalars["String"]["input"];
};

export type ProductReviewsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ReviewsFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  isDeleted?: InputMaybe<Scalars["Boolean"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type ProductSellingPriceArgs = {
  currency?: InputMaybe<Scalars["String"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type ProductTitleArgs = {
  fallback?: InputMaybe<Scalars["String"]["input"]>;
  locale?: InputMaybe<Scalars["String"]["input"]>;
};

export enum ProductCat {
  Accessory = "accessory",
  Activity = "activity",
  AirTicket = "air_ticket",
  Alibaba = "alibaba",
  Assembly = "assembly",
  Auto = "auto",
  Beauty = "beauty",
  Book = "book",
  Booking = "booking",
  Coupon = "coupon",
  Donation = "donation",
  Downloadable = "downloadable",
  Dropship = "dropship",
  DynamicPrice = "dynamic_price",
  ETicket = "e_ticket",
  Education = "education",
  Food = "food",
  GiftCard = "gift_card",
  Health = "health",
  Hotel = "hotel",
  Insurance = "insurance",
  License = "license",
  MovieTicket = "movie_ticket",
  Music = "music",
  Package = "package",
  PackagePreOrder = "package_pre_order",
  Pharmaceutical = "pharmaceutical",
  PreOrder = "pre_order",
  PrescriptionDrug = "prescription_drug",
  Printing = "printing",
  Product = "product",
  PromotionOnly = "promotion_only",
  Seated = "seated",
  Stage = "stage",
  Subscription = "subscription",
  Temporary = "temporary",
  Travel = "travel",
  Virtual = "virtual",
}

export type ProductConnection = {
  __typename?: "ProductConnection";
  edges: Array<ProductEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Product>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type ProductConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type ProductConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type ProductDashboard = BaseModelInterface &
  Node & {
    __typename?: "ProductDashboard";
    canI: Scalars["Boolean"]["output"];
    channels?: Maybe<Scalars["JSON"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    newProductsCount?: Maybe<Scalars["Int"]["output"]>;
    noSeoCount?: Maybe<Scalars["Int"]["output"]>;
    noStocksCount?: Maybe<Scalars["Int"]["output"]>;
    productsCount?: Maybe<Scalars["Int"]["output"]>;
    stocks?: Maybe<Scalars["JSON"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type ProductDashboardCanIArgs = {
  action: CanIAction;
};

export type ProductDocument = BaseModelInterface &
  Node & {
    __typename?: "ProductDocument";
    alt?: Maybe<Scalars["String"]["output"]>;
    attachmentContentType?: Maybe<Scalars["String"]["output"]>;
    attachmentFileName?: Maybe<Scalars["String"]["output"]>;
    attachmentFileSize?: Maybe<Scalars["Int"]["output"]>;
    attachmentHeight?: Maybe<Scalars["Int"]["output"]>;
    attachmentProcessing?: Maybe<Scalars["Boolean"]["output"]>;
    attachmentWidth?: Maybe<Scalars["Int"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    position?: Maybe<Scalars["Int"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    url?: Maybe<Scalars["String"]["output"]>;
    variant?: Maybe<Variant>;
  };

export type ProductDocumentCanIArgs = {
  action: CanIAction;
};

export type ProductDocumentUrlArgs = {
  mirror?: InputMaybe<Scalars["Boolean"]["input"]>;
  size?: InputMaybe<ProductImageSize>;
};

export type ProductEdge = {
  __typename?: "ProductEdge";
  cursor: Scalars["String"]["output"];
  node: Product;
};

export type ProductFilter = {
  availableOn?: InputMaybe<DateFilter>;
  availableUntil?: InputMaybe<DateFilter>;
  canSupply?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  hasImage?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  keyword?: InputMaybe<KeywordFilter>;
  listings?: InputMaybe<ListingFilter>;
  master?: InputMaybe<VariantFilter>;
  metaDescription?: InputMaybe<StringFilter>;
  metaKeywords?: InputMaybe<StringFilter>;
  metaTitle?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  nameOrSlug?: InputMaybe<StringFilter>;
  productCat?: InputMaybe<StringFilter>;
  prototype?: InputMaybe<PrototypeFilter>;
  sellingPrice?: InputMaybe<IntFilter>;
  slug?: InputMaybe<StringFilter>;
  store?: InputMaybe<BrandFilter>;
  title?: InputMaybe<StringFilter>;
  totalOnHand?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  variantsIncludingMaster?: InputMaybe<VariantFilter>;
  vendor?: InputMaybe<VendorFilter>;
};

export type ProductImage = BaseModelInterface &
  Node & {
    __typename?: "ProductImage";
    alt?: Maybe<Scalars["String"]["output"]>;
    attachmentContentType?: Maybe<Scalars["String"]["output"]>;
    attachmentFileName?: Maybe<Scalars["String"]["output"]>;
    attachmentFileSize?: Maybe<Scalars["Int"]["output"]>;
    attachmentHeight?: Maybe<Scalars["Int"]["output"]>;
    attachmentProcessing?: Maybe<Scalars["Boolean"]["output"]>;
    attachmentWidth?: Maybe<Scalars["Int"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    position?: Maybe<Scalars["Int"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    url: Scalars["String"]["output"];
    variant?: Maybe<Variant>;
  };

export type ProductImageCanIArgs = {
  action: CanIAction;
};

export type ProductImageUrlArgs = {
  mirror?: InputMaybe<Scalars["Boolean"]["input"]>;
  size?: InputMaybe<ProductImageSize>;
};

export enum ProductImageSize {
  Color = "color",
  Large = "large",
  List = "list",
  Mini = "mini",
  Original = "original",
  Product = "product",
  Small = "small",
  Zoom = "zoom",
}

export type ProductInput = {
  cancelDuration?: InputMaybe<Scalars["Int"]["input"]>;
  condition?: InputMaybe<Scalars["String"]["input"]>;
  keywordId?: InputMaybe<Scalars["ID"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  productCat?: InputMaybe<ProductCat | `${ProductCat}`>;
  shippingCategoryId?: InputMaybe<Scalars["ID"]["input"]>;
  storeId?: InputMaybe<Scalars["ID"]["input"]>;
  title?: InputMaybe<Scalars["String"]["input"]>;
};

export type ProductManifest = Node &
  ProductManifestInterface & {
    __typename?: "ProductManifest";
    brand?: Maybe<Brand>;
    canSupply?: Maybe<Scalars["Boolean"]["output"]>;
    expireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    fulfillDuration?: Maybe<Scalars["Int"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    image?: Maybe<Scalars["String"]["output"]>;
    maxQty?: Maybe<Scalars["Int"]["output"]>;
    name: Scalars["String"]["output"];
    optionsText?: Maybe<Scalars["String"]["output"]>;
    price: Scalars["Float"]["output"];
    product?: Maybe<Product>;
    productCat?: Maybe<Scalars["String"]["output"]>;
    sku?: Maybe<Scalars["String"]["output"]>;
    slug: Scalars["String"]["output"];
    totalOnHand?: Maybe<Scalars["Int"]["output"]>;
    vendor?: Maybe<Vendor>;
    weight?: Maybe<Scalars["Float"]["output"]>;
  };

export type ProductManifestInterface = {
  brand?: Maybe<Brand>;
  canSupply?: Maybe<Scalars["Boolean"]["output"]>;
  expireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
  fulfillDuration?: Maybe<Scalars["Int"]["output"]>;
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  image?: Maybe<Scalars["String"]["output"]>;
  maxQty?: Maybe<Scalars["Int"]["output"]>;
  name: Scalars["String"]["output"];
  optionsText?: Maybe<Scalars["String"]["output"]>;
  price: Scalars["Float"]["output"];
  productCat?: Maybe<Scalars["String"]["output"]>;
  sku?: Maybe<Scalars["String"]["output"]>;
  slug: Scalars["String"]["output"];
  totalOnHand?: Maybe<Scalars["Int"]["output"]>;
  vendor?: Maybe<Vendor>;
  weight?: Maybe<Scalars["Float"]["output"]>;
};

export type ProductOptionValue = BaseModelInterface &
  Node & {
    __typename?: "ProductOptionValue";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    images: Array<ProductImage>;
    optionValue: OptionValue;
    position: Scalars["Int"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type ProductOptionValueCanIArgs = {
  action: CanIAction;
};

export type ProductProperty = BaseModelInterface &
  Node & {
    __typename?: "ProductProperty";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    position?: Maybe<Scalars["Int"]["output"]>;
    product: Product;
    property: Property;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    value?: Maybe<Scalars["String"]["output"]>;
  };

export type ProductPropertyCanIArgs = {
  action: CanIAction;
};

export type ProductPropertyConnection = {
  __typename?: "ProductPropertyConnection";
  edges: Array<ProductPropertyEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<ProductProperty>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type ProductPropertyConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type ProductPropertyConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type ProductPropertyEdge = {
  __typename?: "ProductPropertyEdge";
  cursor: Scalars["String"]["output"];
  node: ProductProperty;
};

export type ProductPropertyFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  value?: InputMaybe<StringFilter>;
};

export type ProductReturn = BaseModelInterface &
  Node & {
    __typename?: "ProductReturn";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    lineItem: LineItem;
    order?: Maybe<Order>;
    price?: Maybe<Scalars["Float"]["output"]>;
    quantity?: Maybe<Scalars["Int"]["output"]>;
    returnAt?: Maybe<Scalars["String"]["output"]>;
    returnBy?: Maybe<User>;
    returnByDate?: Maybe<Scalars["String"]["output"]>;
    returnLocation?: Maybe<StoreLocation>;
    state?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variant: Variant;
  };

export type ProductReturnCanIArgs = {
  action: CanIAction;
};

export type ProductReturnConnection = {
  __typename?: "ProductReturnConnection";
  edges: Array<ProductReturnEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<ProductReturn>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type ProductReturnConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type ProductReturnConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type ProductReturnEdge = {
  __typename?: "ProductReturnEdge";
  cursor: Scalars["String"]["output"];
  node: ProductReturn;
};

export type ProductReturnFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  returnAt?: InputMaybe<DateFilter>;
  returnBy?: InputMaybe<StringFilter>;
  returnByDate?: InputMaybe<DateFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type ProductTranslation = BaseModelInterface &
  Node & {
    __typename?: "ProductTranslation";
    body?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    locale?: Maybe<Scalars["String"]["output"]>;
    metaDescription?: Maybe<Scalars["String"]["output"]>;
    metaKeywords?: Maybe<Scalars["String"]["output"]>;
    metaTitle?: Maybe<Scalars["String"]["output"]>;
    name?: Maybe<Scalars["String"]["output"]>;
    product?: Maybe<Product>;
    title?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type ProductTranslationCanIArgs = {
  action: CanIAction;
};

export type Profile = BaseModelInterface &
  Node & {
    __typename?: "Profile";
    balance?: Maybe<Scalars["Float"]["output"]>;
    blocked?: Maybe<Scalars["String"]["output"]>;
    businessClient?: Maybe<BusinessClient>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    creditLimit?: Maybe<Scalars["Float"]["output"]>;
    customerId?: Maybe<Scalars["String"]["output"]>;
    customerName?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    registrationNo?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type ProfileCanIArgs = {
  action: CanIAction;
};

export type Progress = Node & {
  __typename?: "Progress";
  amount: Scalars["Float"]["output"];
  amountChange: Scalars["Float"]["output"];
  createdAt: Scalars["ISO8601DateTime"]["output"];
  cycle: Scalars["String"]["output"];
  date: Scalars["ISO8601DateTime"]["output"];
  gamification: Gamification;
  gid: Scalars["ID"]["output"];
  goal: GamificationGoal;
  id: Scalars["ID"]["output"];
  owner: Node;
  percentage: Scalars["Float"]["output"];
  percentageChange: Scalars["Float"]["output"];
  preferences?: Maybe<Scalars["JSON"]["output"]>;
  target: Node;
  updatedAt: Scalars["ISO8601DateTime"]["output"];
};

export type ProgressConnection = {
  __typename?: "ProgressConnection";
  edges: Array<ProgressEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Progress>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type ProgressConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type ProgressConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type ProgressEdge = {
  __typename?: "ProgressEdge";
  cursor: Scalars["String"]["output"];
  node: Progress;
};

export type Promotion = BaseModelInterface &
  Node & {
    __typename?: "Promotion";
    actionManifests: Array<PromotionActionManifest>;
    actions: Array<ActionInterface>;
    advertise?: Maybe<Scalars["Boolean"]["output"]>;
    applies?: Maybe<Array<PromotionApply>>;
    audits: AuditConnection;
    autoClaim?: Maybe<Scalars["Boolean"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    code?: Maybe<Scalars["String"]["output"]>;
    comments: Array<OrderComment>;
    couponCodeUsages: CouponCodeUsageConnection;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    createdBy?: Maybe<User>;
    creditsCount?: Maybe<Scalars["Int"]["output"]>;
    description?: Maybe<Scalars["String"]["output"]>;
    entitlements?: Maybe<Array<PromotionApply>>;
    expiresAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    image?: Maybe<Image>;
    link?: Maybe<Scalars["String"]["output"]>;
    matchPolicy?: Maybe<Scalars["String"]["output"]>;
    myCode?: Maybe<Scalars["String"]["output"]>;
    myCodeStatus?: Maybe<Scalars["String"]["output"]>;
    name: Scalars["String"]["output"];
    orders: OrderConnection;
    path?: Maybe<Scalars["String"]["output"]>;
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    priority?: Maybe<Scalars["Int"]["output"]>;
    promotionCategoryId?: Maybe<Scalars["ID"]["output"]>;
    rule?: Maybe<Scalars["JSON"]["output"]>;
    ruleManifests: Array<PromotionRuleManifest>;
    rules: Array<RuleInterface>;
    startsAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    tagList: Array<Scalars["String"]["output"]>;
    terms?: Maybe<Scalars["String"]["output"]>;
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    usageLimit?: Maybe<Scalars["Int"]["output"]>;
    vendor?: Maybe<Vendor>;
    websiteIds: Array<Scalars["ID"]["output"]>;
    websites: Array<Website>;
  };

export type PromotionAuditsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AuditFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type PromotionCanIArgs = {
  action: CanIAction;
};

export type PromotionCouponCodeUsagesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<CouponCodeUsageFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type PromotionEntitlementsArgs = {
  canSupply?: InputMaybe<Scalars["Boolean"]["input"]>;
  requireApprove?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type PromotionOrdersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OrderFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  status?: InputMaybe<OrderStatus>;
};

export type PromotionAction = ActionInterface &
  Node & {
    __typename?: "PromotionAction";
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    position?: Maybe<Scalars["Int"]["output"]>;
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
  };

export type PromotionActionFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  promotion?: InputMaybe<PromotionFilter>;
  promotionActionLineItems?: InputMaybe<PromotionActionLineItemFilter>;
  type?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type PromotionActionFreeShipping = ActionInterface &
  Node & {
    __typename?: "PromotionActionFreeShipping";
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    position?: Maybe<Scalars["Int"]["output"]>;
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
  };

export type PromotionActionLineItem = Node & {
  __typename?: "PromotionActionLineItem";
  details?: Maybe<Scalars["String"]["output"]>;
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  interval?: Maybe<Scalars["Int"]["output"]>;
  lineItemId?: Maybe<Scalars["ID"]["output"]>;
  maxQuantity?: Maybe<Scalars["Int"]["output"]>;
  preferences?: Maybe<Scalars["JSON"]["output"]>;
  promotionAction?: Maybe<PromotionAction>;
  promotionActionId?: Maybe<Scalars["ID"]["output"]>;
  promotionActionType?: Maybe<Scalars["String"]["output"]>;
  quantity?: Maybe<Scalars["Int"]["output"]>;
  step?: Maybe<Scalars["Float"]["output"]>;
  variant?: Maybe<Variant>;
  variantId?: Maybe<Scalars["ID"]["output"]>;
};

export type PromotionActionLineItemConnection = {
  __typename?: "PromotionActionLineItemConnection";
  edges: Array<PromotionActionLineItemEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<PromotionActionLineItem>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type PromotionActionLineItemConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type PromotionActionLineItemConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type PromotionActionLineItemEdge = {
  __typename?: "PromotionActionLineItemEdge";
  cursor: Scalars["String"]["output"];
  node: PromotionActionLineItem;
};

export type PromotionActionLineItemFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  promotionAction?: InputMaybe<PromotionActionFilter>;
  quantity?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  variant?: InputMaybe<VariantFilter>;
};

export type PromotionActionManifest = Node & {
  __typename?: "PromotionActionManifest";
  action: Scalars["String"]["output"];
  currency?: Maybe<Scalars["String"]["output"]>;
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  interval?: Maybe<Scalars["Int"]["output"]>;
  limit?: Maybe<Scalars["Int"]["output"]>;
  listings: Array<Listing>;
  products: Array<Product>;
  rule?: Maybe<Scalars["String"]["output"]>;
  saleAmount?: Maybe<Scalars["Float"]["output"]>;
  salePercent?: Maybe<Scalars["Float"]["output"]>;
  variants: Array<Variant>;
};

export type PromotionActionPromise = BaseModelInterface &
  Node & {
    __typename?: "PromotionActionPromise";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    order: Order;
    preferredLimit?: Maybe<Scalars["String"]["output"]>;
    promotionAction: PromotionAction;
    promotionActionId?: Maybe<Scalars["Int"]["output"]>;
    promotionActionLineItems: Array<PromotionActionLineItem>;
    promotionActionType?: Maybe<Scalars["String"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type PromotionActionPromiseCanIArgs = {
  action: CanIAction;
};

export type PromotionActionPromiseConnection = {
  __typename?: "PromotionActionPromiseConnection";
  edges: Array<PromotionActionPromiseEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<PromotionActionPromise>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type PromotionActionPromiseConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type PromotionActionPromiseConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type PromotionActionPromiseEdge = {
  __typename?: "PromotionActionPromiseEdge";
  cursor: Scalars["String"]["output"];
  node: PromotionActionPromise;
};

export type PromotionActionPromiseFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  order?: InputMaybe<OrderFilter>;
  promotionAction?: InputMaybe<PromotionActionFilter>;
  status?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type PromotionApply = Brand | Product | Variant;

export type PromotionConnection = {
  __typename?: "PromotionConnection";
  edges: Array<PromotionEdge>;
  giftsCount?: Maybe<Scalars["Int"]["output"]>;
  metrics: Array<MetricResponse>;
  nodes: Array<Promotion>;
  pageInfo: PageInfo;
  percentsCount?: Maybe<Scalars["Int"]["output"]>;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type PromotionConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type PromotionConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type PromotionEdge = {
  __typename?: "PromotionEdge";
  cursor: Scalars["String"]["output"];
  node: Promotion;
};

export type PromotionFilter = {
  code?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  expiresAt?: InputMaybe<DateFilter>;
  gifts?: InputMaybe<Scalars["Boolean"]["input"]>;
  id?: InputMaybe<IdFilter>;
  minType?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  orders?: InputMaybe<OrderFilter>;
  percents?: InputMaybe<Scalars["Boolean"]["input"]>;
  promotionActions?: InputMaybe<PromotionActionFilter>;
  promotionRules?: InputMaybe<PromotionRuleFilter>;
  startsAt?: InputMaybe<DateFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  usageLimit?: InputMaybe<IntFilter>;
  vendor?: InputMaybe<VendorFilter>;
  websites?: InputMaybe<WebsiteFilter>;
  withProduct?: InputMaybe<StringFilter>;
  withVariant?: InputMaybe<StringFilter>;
};

export type PromotionRule = Node &
  RuleInterface & {
    __typename?: "PromotionRule";
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    productGroupId?: Maybe<Scalars["ID"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type PromotionRuleBadge = Node &
  RuleInterface & {
    __typename?: "PromotionRuleBadge";
    badgeIds: Array<Scalars["ID"]["output"]>;
    badges: Array<Taxon>;
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredMatchPolicy: Scalars["String"]["output"];
    productGroupId?: Maybe<Scalars["ID"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type PromotionRuleBusinessClient = Node &
  RuleInterface & {
    __typename?: "PromotionRuleBusinessClient";
    businessClientIds?: Maybe<Array<Scalars["String"]["output"]>>;
    businessClients?: Maybe<Array<BusinessClient>>;
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredMatchPolicy: Scalars["String"]["output"];
    productGroupId?: Maybe<Scalars["ID"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type PromotionRuleFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  promotion?: InputMaybe<PromotionFilter>;
  type?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type PromotionRuleManifest = Node & {
  __typename?: "PromotionRuleManifest";
  badges: Array<Badge>;
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  maxAmount?: Maybe<Scalars["Int"]["output"]>;
  maxQuantity?: Maybe<Scalars["Int"]["output"]>;
  minAmount?: Maybe<Scalars["Int"]["output"]>;
  minQuantity?: Maybe<Scalars["Int"]["output"]>;
  policy?: Maybe<Scalars["String"]["output"]>;
  products: Array<Product>;
  rule: Scalars["String"]["output"];
  stores: Array<Brand>;
  taxons: Array<Taxon>;
  variants: Array<Variant>;
  vendors: Array<Vendor>;
};

export type PromotionRuleProduct = Node &
  RuleInterface & {
    __typename?: "PromotionRuleProduct";
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredFromBasePrice?: Maybe<Scalars["Boolean"]["output"]>;
    preferredMatchPolicy: Scalars["String"]["output"];
    preferredMaxAmount: Scalars["Float"]["output"];
    preferredMaxQuantity: Scalars["Int"]["output"];
    preferredMinAmount: Scalars["Float"]["output"];
    preferredMinQuantity: Scalars["Int"]["output"];
    productGroupId?: Maybe<Scalars["ID"]["output"]>;
    productIds: Array<Scalars["ID"]["output"]>;
    products: Array<Product>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type PromotionRuleSegment = Node &
  RuleInterface & {
    __typename?: "PromotionRuleSegment";
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredMatchPolicy: Scalars["String"]["output"];
    productGroupId?: Maybe<Scalars["ID"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    segmentIds: Array<Scalars["ID"]["output"]>;
    segments: Array<SupplySegment>;
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type PromotionRuleShippingMethod = Node &
  RuleInterface & {
    __typename?: "PromotionRuleShippingMethod";
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredMatchPolicy: Scalars["String"]["output"];
    productGroupId?: Maybe<Scalars["ID"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    shippingMethodIds?: Maybe<Array<Scalars["String"]["output"]>>;
    shippingMethods?: Maybe<Array<ShippingMethod>>;
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type PromotionRuleStockLocation = Node &
  RuleInterface & {
    __typename?: "PromotionRuleStockLocation";
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredFromBasePrice?: Maybe<Scalars["Boolean"]["output"]>;
    preferredMatchPolicy: Scalars["String"]["output"];
    preferredMaxAmount: Scalars["Float"]["output"];
    preferredMaxQuantity: Scalars["Int"]["output"];
    preferredMinAmount: Scalars["Float"]["output"];
    preferredMinQuantity: Scalars["Int"]["output"];
    productGroupId?: Maybe<Scalars["ID"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    stockLocationIds: Array<Scalars["ID"]["output"]>;
    stockLocations: Array<StockLocation>;
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type PromotionRuleStore = Node &
  RuleInterface & {
    __typename?: "PromotionRuleStore";
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredFromBasePrice?: Maybe<Scalars["Boolean"]["output"]>;
    preferredMatchPolicy: Scalars["String"]["output"];
    preferredMaxAmount: Scalars["Float"]["output"];
    preferredMaxQuantity: Scalars["Int"]["output"];
    preferredMinAmount: Scalars["Float"]["output"];
    preferredMinQuantity: Scalars["Int"]["output"];
    productGroupId?: Maybe<Scalars["ID"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    storeIds: Array<Scalars["ID"]["output"]>;
    stores: Array<Brand>;
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type PromotionRuleStoreLocation = Node &
  RuleInterface & {
    __typename?: "PromotionRuleStoreLocation";
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredMatchPolicy: Scalars["String"]["output"];
    productGroupId?: Maybe<Scalars["ID"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    storeLocationIds: Array<Scalars["ID"]["output"]>;
    storeLocations: Array<StoreLocation>;
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type PromotionRuleTaxon = Node &
  RuleInterface & {
    __typename?: "PromotionRuleTaxon";
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredMatchPolicy: Scalars["String"]["output"];
    productGroupId?: Maybe<Scalars["ID"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    taxonIds: Array<Scalars["ID"]["output"]>;
    taxons: Array<Taxon>;
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type PromotionRuleUser = Node &
  RuleInterface & {
    __typename?: "PromotionRuleUser";
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    productGroupId?: Maybe<Scalars["ID"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
    userIds: Array<Scalars["ID"]["output"]>;
    users: Array<User>;
  };

export type PromotionRuleVariant = Node &
  RuleInterface & {
    __typename?: "PromotionRuleVariant";
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredFromBasePrice?: Maybe<Scalars["Boolean"]["output"]>;
    preferredHasCouponCodeItemLimit?: Maybe<Scalars["Boolean"]["output"]>;
    preferredMatchPolicy: Scalars["String"]["output"];
    preferredMaxAmount: Scalars["Float"]["output"];
    preferredMaxQuantity: Scalars["Int"]["output"];
    preferredMinAmount: Scalars["Float"]["output"];
    preferredMinQuantity: Scalars["Int"]["output"];
    productGroupId?: Maybe<Scalars["ID"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
    variantIds: Array<Scalars["ID"]["output"]>;
    variants: Array<Variant>;
  };

export type PromotionRuleVendor = Node &
  RuleInterface & {
    __typename?: "PromotionRuleVendor";
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredFromBasePrice?: Maybe<Scalars["Boolean"]["output"]>;
    preferredMatchPolicy: Scalars["String"]["output"];
    preferredMaxAmount: Scalars["Float"]["output"];
    preferredMaxQuantity: Scalars["Int"]["output"];
    preferredMinAmount: Scalars["Float"]["output"];
    preferredMinQuantity: Scalars["Int"]["output"];
    productGroupId?: Maybe<Scalars["ID"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
    vendorIds: Array<Scalars["ID"]["output"]>;
    vendors: Array<Vendor>;
  };

export type PromotionRuleWebsite = Node &
  RuleInterface & {
    __typename?: "PromotionRuleWebsite";
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    productGroupId?: Maybe<Scalars["ID"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
    websiteIds: Array<Scalars["ID"]["output"]>;
    websites: Array<Website>;
  };

export type Property = BaseModelInterface &
  Node & {
    __typename?: "Property";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name: Scalars["String"]["output"];
    presentation?: Maybe<Scalars["String"]["output"]>;
    productProperties?: Maybe<Scalars["JSON"]["output"]>;
    productPropertiesValues: ProductPropertyConnection;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type PropertyCanIArgs = {
  action: CanIAction;
};

export type PropertyPresentationArgs = {
  fallback?: InputMaybe<Scalars["String"]["input"]>;
  locale?: InputMaybe<Scalars["String"]["input"]>;
};

export type PropertyProductPropertiesValuesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ProductPropertyFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type PropertyConnection = {
  __typename?: "PropertyConnection";
  edges: Array<PropertyEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Property>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type PropertyConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type PropertyConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type PropertyEdge = {
  __typename?: "PropertyEdge";
  cursor: Scalars["String"]["output"];
  node: Property;
};

export type PropertyFilter = {
  advancedSearch?: InputMaybe<Scalars["String"]["input"]>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  nameOrPresentation?: InputMaybe<StringFilter>;
  presentation?: InputMaybe<StringFilter>;
  prettyName?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type PropertyValue = BaseModelInterface &
  Node & {
    __typename?: "PropertyValue";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    property: Property;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    value?: Maybe<Scalars["String"]["output"]>;
  };

export type PropertyValueCanIArgs = {
  action: CanIAction;
};

export type PropertyValueValueArgs = {
  fallback?: InputMaybe<Scalars["String"]["input"]>;
  locale?: InputMaybe<Scalars["String"]["input"]>;
};

export type PropertyValueConnection = {
  __typename?: "PropertyValueConnection";
  edges: Array<PropertyValueEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<PropertyValue>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type PropertyValueConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type PropertyValueConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type PropertyValueEdge = {
  __typename?: "PropertyValueEdge";
  cursor: Scalars["String"]["output"];
  node: PropertyValue;
};

export type PropertyValueFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  property?: InputMaybe<PropertyFilter>;
  propertyId?: InputMaybe<IdFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  value?: InputMaybe<StringFilter>;
};

export type Prototype = BaseModelInterface &
  Node & {
    __typename?: "Prototype";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    depth?: Maybe<Scalars["Int"]["output"]>;
    expanded?: Maybe<Scalars["Int"]["output"]>;
    gid: Scalars["ID"]["output"];
    hasChildren?: Maybe<Scalars["Boolean"]["output"]>;
    id: Scalars["ID"]["output"];
    keywords: Array<Keyword>;
    lft?: Maybe<Scalars["Int"]["output"]>;
    name?: Maybe<Scalars["String"]["output"]>;
    optionTypeIds: Array<Scalars["ID"]["output"]>;
    optionTypes: OptionTypeConnection;
    options?: Maybe<Scalars["JSON"]["output"]>;
    parentId?: Maybe<Scalars["ID"]["output"]>;
    parentIds: Array<Scalars["ID"]["output"]>;
    position?: Maybe<Scalars["Int"]["output"]>;
    presentation?: Maybe<Scalars["String"]["output"]>;
    prettyName?: Maybe<Scalars["String"]["output"]>;
    prettyOptions?: Maybe<Scalars["JSON"]["output"]>;
    prettyPresentation?: Maybe<Scalars["String"]["output"]>;
    properties: Array<Property>;
    rgt?: Maybe<Scalars["Int"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type PrototypeCanIArgs = {
  action: CanIAction;
};

export type PrototypeOptionTypesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OptionTypeFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type PrototypeConnection = {
  __typename?: "PrototypeConnection";
  edges: Array<PrototypeEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Prototype>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type PrototypeConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type PrototypeConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type PrototypeEdge = {
  __typename?: "PrototypeEdge";
  cursor: Scalars["String"]["output"];
  node: Prototype;
};

export type PrototypeFilter = {
  createdAt?: InputMaybe<DateFilter>;
  depth?: InputMaybe<IntFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  parent?: InputMaybe<PrototypeFilter>;
  parentId?: InputMaybe<IdFilter>;
  position?: InputMaybe<IntFilter>;
  prettyName?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type ProviderFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringFilter>;
  type?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type PurchasedDownloadable = BaseModelInterface &
  Node & {
    __typename?: "PurchasedDownloadable";
    attachments: Array<DownloadableAttachment>;
    canI: Scalars["Boolean"]["output"];
    contentType?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    expireDate?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    order: Order;
    orderId: Scalars["ID"]["output"];
    product: Product;
    productId: Scalars["ID"]["output"];
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user: User;
    userId: Scalars["ID"]["output"];
    variant: Variant;
    variantId: Scalars["ID"]["output"];
  };

export type PurchasedDownloadableCanIArgs = {
  action: CanIAction;
};

export type PurchasedDownloadableConnection = {
  __typename?: "PurchasedDownloadableConnection";
  edges: Array<PurchasedDownloadableEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<PurchasedDownloadable>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type PurchasedDownloadableConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type PurchasedDownloadableConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type PurchasedDownloadableEdge = {
  __typename?: "PurchasedDownloadableEdge";
  cursor: Scalars["String"]["output"];
  node: PurchasedDownloadable;
};

export type PushTemplate = BaseModelInterface &
  Node & {
    __typename?: "PushTemplate";
    appId?: Maybe<Scalars["ID"]["output"]>;
    appIds: Array<Scalars["ID"]["output"]>;
    apps: Array<Application>;
    body?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    deeplink?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name: Scalars["String"]["output"];
    title: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    url?: Maybe<Scalars["String"]["output"]>;
    website: Website;
    websiteId: Scalars["ID"]["output"];
  };

export type PushTemplateCanIArgs = {
  action: CanIAction;
};

export type PushTemplateConnection = {
  __typename?: "PushTemplateConnection";
  edges: Array<PushTemplateEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<PushTemplate>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type PushTemplateConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type PushTemplateConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type PushTemplateEdge = {
  __typename?: "PushTemplateEdge";
  cursor: Scalars["String"]["output"];
  node: PushTemplate;
};

export type PushTemplateFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  websiteId?: InputMaybe<IntFilter>;
};

export enum PushTemplateName {
  BrandNewProduct = "brand_new_product",
  BrandSale = "brand_sale",
  C2cAfterPayActivated = "c2c_after_pay_activated",
  C2cListingCreate = "c2c_listing_create",
  C2cListingExpireReminder = "c2c_listing_expire_reminder",
  C2cListingExpired = "c2c_listing_expired",
  C2cListingSales = "c2c_listing_sales",
  C2cNewFeedback = "c2c_new_feedback",
  OrderToDrivers = "order_to_drivers",
  SystemCampaignCancel = "system_campaign_cancel",
  SystemCampaignSuccess = "system_campaign_success",
  SystemDispatchCall = "system_dispatch_call",
  SystemLeasingStatus = "system_leasing_status",
  SystemMerchantOrder = "system_merchant_order",
  SystemNewChat = "system_new_chat",
  SystemNoStock = "system_no_stock",
  SystemOrderCancel = "system_order_cancel",
  SystemOrderClaim = "system_order_claim",
  SystemOrderEbarimt = "system_order_ebarimt",
  SystemOrderPaid = "system_order_paid",
  SystemOrderPurchased = "system_order_purchased",
  SystemOrderPurchasedLocation = "system_order_purchased_location",
  SystemOrderShipmentReady = "system_order_shipment_ready",
  SystemOrderShipped = "system_order_shipped",
  SystemPrescriptionAccepted = "system_prescription_accepted",
  SystemPrescriptionCreated = "system_prescription_created",
  SystemUserBirthday = "system_user_birthday",
  SystemVendorFollow = "system_vendor_follow",
  TemplatedOrderCreated = "templated_order_created",
}

export type QPayCard = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "QPayCard";
    canI: Scalars["Boolean"]["output"];
    cardIssuer: Scalars["String"]["output"];
    cardNumber: Scalars["String"]["output"];
    cardType: Scalars["String"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    isDefault: Scalars["Boolean"]["output"];
    paymentMethod?: Maybe<PaymentMethod>;
    paymentMethodId?: Maybe<Scalars["ID"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type QPayCardCanIArgs = {
  action: CanIAction;
};

export type QPayDeepLink = {
  __typename?: "QPayDeepLink";
  description: Scalars["String"]["output"];
  link: Scalars["String"]["output"];
  logo: Scalars["String"]["output"];
  name: Scalars["String"]["output"];
};

export type QPayInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "QPayInvoice";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    deepLinks?: Maybe<Array<QPayDeepLink>>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceId?: Maybe<Scalars["String"]["output"]>;
    qrCode?: Maybe<Scalars["String"]["output"]>;
    qrImage?: Maybe<Scalars["String"]["output"]>;
    qrUrl?: Maybe<Scalars["String"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type QPayInvoiceCanIArgs = {
  action: CanIAction;
};

export type Quarter = Node & {
  __typename?: "Quarter";
  district?: Maybe<District>;
  districtId?: Maybe<Scalars["ID"]["output"]>;
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  name?: Maybe<Scalars["String"]["output"]>;
  preferences?: Maybe<Scalars["JSON"]["output"]>;
  zip?: Maybe<Zipcode>;
};

export type QuarterNameArgs = {
  fallback?: InputMaybe<Scalars["String"]["input"]>;
  locale?: InputMaybe<Scalars["String"]["input"]>;
};

export type QuarterConnection = {
  __typename?: "QuarterConnection";
  edges: Array<QuarterEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Quarter>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type QuarterConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type QuarterConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type QuarterEdge = {
  __typename?: "QuarterEdge";
  cursor: Scalars["String"]["output"];
  node: Quarter;
};

export type QuarterFilter = {
  createdAt?: InputMaybe<DateFilter>;
  districtId?: InputMaybe<IntFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type Query = {
  __typename?: "Query";
  activeQuiz?: Maybe<Quiz>;
  address: Array<UbcAddress>;
  agendas: AgendaConnection;
  airBooking?: Maybe<AirBooking>;
  airTicket?: Maybe<AirTicket>;
  aircrafts: AircraftConnection;
  airlines: AirlineConnection;
  airports: AirportConnection;
  allMovies: MovieConnection;
  amadeus?: Maybe<AmadeusIntegration>;
  applications: ApplicationConnection;
  article: Article;
  articles: ArticleConnection;
  authors: AuthorConnection;
  availableTickets: ProductConnection;
  badge?: Maybe<Badge>;
  badges: BadgeConnection;
  branch: Branch;
  brand?: Maybe<Brand>;
  brands: BrandConnection;
  business: Vendor;
  businessClient?: Maybe<BusinessClient>;
  businessTypes: BusinessTypeConnection;
  campaign: ShoppyCampaign;
  campaigns: ShoppyCampaignConnection;
  cancelReasons: CancelReasonConnection;
  channel: Merchant;
  chatRoom?: Maybe<Room>;
  chatRooms: RoomConnection;
  cinema?: Maybe<Cinema>;
  cinemas: Array<Cinema>;
  clientsStore?: Maybe<ClientsStore>;
  clientsStores: ClientsStoreConnection;
  corporateGateway: CorporateGateway;
  countries: CountryConnection;
  coupon?: Maybe<Coupon>;
  creditCard: CreditCard;
  currentOrder?: Maybe<Order>;
  currentWebsite?: Maybe<Website>;
  departmentStore?: Maybe<DepartmentStore>;
  departmentStores: DepartmentStoreConnection;
  dispatchCalls: DispatchCallConnection;
  districts: DistrictConnection;
  downloadable: PurchasedDownloadable;
  dropshipProduct: DropshipProduct;
  dropshipProducts: DropshipProductConnection;
  dropshipProvider: DropshipProvider;
  dropshipProviders: DropshipProviderConnection;
  eMailBounces: BounceConnection;
  eMailCampaign: Campaign;
  eMailCampaigns: CampaignConnection;
  eMailContact: Contact;
  eMailContacts: ContactConnection;
  eMailSegment: Segment;
  eMailSegments: SegmentConnection;
  eMailTemplate: EMailTemplate;
  eTicket?: Maybe<ETicket>;
  eTickets: ETicketConnection;
  employee: Employee;
  emuPickupLocations?: Maybe<Array<PickUpLocation>>;
  erpIntegration: ErpIntegration;
  erpIntegrations: ErpIntegrationConnection;
  eventInvite: EventInvite;
  eventInvites: EventInviteConnection;
  featured?: Maybe<Featured>;
  featureds: FeaturedConnection;
  feedback: FeedbackType;
  feedbackComments: Array<Comment>;
  feedbackTopics: FeedbackTopicConnection;
  feedbacks: FeedbackTypeConnection;
  flatTaxon?: Maybe<Scalars["JSON"]["output"]>;
  follow: Follow;
  game?: Maybe<Game>;
  games: GameConnection;
  gamifications: GamificationConnection;
  gateProLog: GateProLog;
  gc?: Maybe<GiftCard>;
  golomtCard: GolomtCard;
  handlebarTemplate: HandlebarTemplate;
  inventoryUnitActions?: Maybe<InventoryUnitActionConnection>;
  jobLogs: JobLogConnection;
  keywords: KeywordConnection;
  lastUsedPaymentMethods: Array<PaymentMethod>;
  leaseBlackLists: LeaseBlackListConnection;
  lineItem?: Maybe<LineItem>;
  listing: Listing;
  listings: ListingConnection;
  lookBook?: Maybe<LookBook>;
  lookBooks: LookBookConnection;
  mTemplate: Template;
  mTemplates: TemplateConnection;
  mapDrivers: TrackableTypeConnection;
  mapOrders: OrderConnection;
  mapStores: StoreLocationConnection;
  massPromotions: MassPromotionConnection;
  me: User;
  menu?: Maybe<DynamicMenu>;
  menus: Array<DynamicMenu>;
  merchants: MerchantConnection;
  movie?: Maybe<Movie>;
  movieTicket?: Maybe<MovieTicket>;
  movieTickets: MovieTicketConnection;
  movies: Array<Movie>;
  news?: Maybe<News>;
  newses: NewsConnection;
  nix: Scalars["JSON"]["output"];
  node?: Maybe<Node>;
  nodes: Array<Node>;
  notices: NoticeConnection;
  notifications: NotificationConnection;
  nutritionFact: NutritionFact;
  nutritionFacts: NutritionFactConnection;
  oneSignalApp: Scalars["JSON"]["output"];
  oneSignalNotification: Scalars["JSON"]["output"];
  oneSignalNotifications?: Maybe<Scalars["JSON"]["output"]>;
  oneSignalSegment: OSegment;
  optionType: OptionType;
  optionTypes: OptionTypeConnection;
  optionValues: OptionValueConnection;
  order: Order;
  orderTemplate: OrderTemplate;
  orders: OrderConnection;
  page?: Maybe<DynamicPage>;
  pages: DynamicPageConnection;
  payment: Payment;
  paymentAccountData?: Maybe<Scalars["JSON"]["output"]>;
  paymentMethods: Array<PaymentMethod>;
  paymentReturn: PaymentReturn;
  paymentReturnReasons: PaymentReturnReasonConnection;
  paymentReturnSources: PaymentReturnSourceConnection;
  poll?: Maybe<Poll>;
  polls: PollConnection;
  posCurrentOrder: Order;
  posListing: PosListing;
  posStore: StoreLocation;
  prescription?: Maybe<Prescription>;
  prescriptions: PrescriptionConnection;
  priceUpdateProducts: Scalars["JSON"]["output"];
  product?: Maybe<Product>;
  products: ProductConnection;
  promotion: Promotion;
  promotions: PromotionConnection;
  properties: PropertyConnection;
  propertiesTranslation: Scalars["JSON"]["output"];
  property: Property;
  propertyValues: PropertyValueConnection;
  prototype: Prototype;
  prototypes: PrototypeConnection;
  pushTemplates: PushTemplateConnection;
  quarters: QuarterConnection;
  quiz?: Maybe<Quiz>;
  quizzes: QuizConnection;
  rate: Scalars["JSON"]["output"];
  relatedProducts: RelationConnection;
  reportReasons: Array<ReportReason>;
  savedAddress: Address;
  screens: Array<Screen>;
  searchAddressByNames: Scalars["JSON"]["output"];
  searchVin: Scalars["JSON"]["output"];
  session?: Maybe<Session>;
  shipment: Shipment;
  shipments: ShipmentConnection;
  shippers: ShipperConnection;
  shippingCategories: Array<ShippingCategory>;
  shippingMethods: Array<ShippingMethod>;
  shoppyImages: ImageConnection;
  sizingGuide: SizingGuide;
  stage: Stage;
  states: StateConnection;
  stockLocations: StockLocationConnection;
  storeCredit: StoreCredit;
  storeCreditCategories: Array<StoreCreditCategory>;
  storeCredits: StoreCreditConnection;
  storeLocation?: Maybe<StoreLocation>;
  storeLocations: StoreLocationConnection;
  storesAddresses: AddressConnection;
  supplierCategories: SupplierCategoryConnection;
  supplySegment?: Maybe<SupplySegment>;
  supplySegments: SupplySegmentConnection;
  syncLog?: Maybe<SyncLog>;
  syncLogs: SyncLogConnection;
  tag?: Maybe<Tag>;
  tags: TagConnection;
  taxCategories: TaxCategoryConnection;
  taxRates: TaxRateConnection;
  taxon?: Maybe<Taxon>;
  taxons: TaxonConnection;
  tecArticle: TecArticle;
  tecArticles: TecArticleConnection;
  tecAssemblyGroup: TecAssemblyGroup;
  tecAssemblyGroups: TecAssemblyGroupConnection;
  tecBrand: TecBrand;
  tecBrands: TecBrandConnection;
  tecCategories: TecCategoryConnection;
  tecLinkages: TecLinkageConnection;
  tecManufacturers: TecManufacturerConnection;
  tecModelSeries: TecModelSeriesConnection;
  tecPriceUpdateArticles: Scalars["JSON"]["output"];
  tecPrices: TecPrice;
  tecStock: TecStock;
  ticketTemplate: TicketTemplate;
  ticketTemplates?: Maybe<TicketTemplateConnection>;
  trackables: TrackableTypeConnection;
  transaction?: Maybe<Transaction>;
  transactionsRepayPreview: TransactionRepayPreview;
  unreadNotifications: Scalars["Int"]["output"];
  unseenChatRooms?: Maybe<Scalars["Int"]["output"]>;
  user?: Maybe<User>;
  userAddress: UserAddress;
  userAddresses: UserAddressConnection;
  userAgreements: UserAgreementConnection;
  userTokenInfo: Scalars["JSON"]["output"];
  users: UserConnection;
  usersList: UserConnection;
  variant: Variant;
  variants: VariantConnection;
  vendor: Vendor;
  vendors: VendorConnection;
  wallet: Wallet;
  walletBalances: TransactionConnection;
  walletDashboard: Array<WalletDashboard>;
  walletProducts: WalletProductConnection;
  walletReports: Scalars["JSON"]["output"];
  walletSales: Scalars["JSON"]["output"];
  wallets: WalletConnection;
  webListings: ListingConnection;
  webhooks: WebhookConnection;
  website: Website;
  websites: WebsiteConnection;
  wishedProducts: WishedProductConnection;
  wishlist: Wishlist;
  wishlists: WishlistConnection;
  zones: Array<Zone>;
};

export type QueryAddressArgs = {
  filterId?: InputMaybe<Scalars["ID"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  lat?: InputMaybe<Scalars["String"]["input"]>;
  limit?: InputMaybe<Scalars["Int"]["input"]>;
  lon?: InputMaybe<Scalars["String"]["input"]>;
  page?: InputMaybe<Scalars["Int"]["input"]>;
  q?: InputMaybe<Scalars["String"]["input"]>;
  type?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryAgendasArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AgendaFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryAirBookingArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
};

export type QueryAirTicketArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryAircraftsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AircraftFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryAirlinesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AirlineFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryAirportsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AirportFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryAllMoviesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<MovieFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryAmadeusArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type QueryApplicationsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ApplicationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryArticleArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  impression?: InputMaybe<Scalars["Boolean"]["input"]>;
  slug?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryArticlesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ArticleFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryAuthorsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AuthorFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryAvailableTicketsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ListingFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryBadgeArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryBadgesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<BadgeFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryBranchArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryBrandArgs = {
  code?: InputMaybe<Scalars["String"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryBrandsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<BrandFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryBusinessArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
};

export type QueryBusinessClientArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryBusinessTypesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<BusinessTypeFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryCampaignArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryCampaignsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<CampaignFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryCancelReasonsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryChannelArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryChatRoomArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryChatRoomsArgs = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<RoomFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryCinemaArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryClientsStoreArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryClientsStoresArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ClientsStoreFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryCorporateGatewayArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryCountriesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<CountryFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryCouponArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  number?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryCreditCardArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
};

export type QueryCurrentOrderArgs = {
  currency?: InputMaybe<Scalars["String"]["input"]>;
  flag?: InputMaybe<Scalars["String"]["input"]>;
  key?: InputMaybe<Scalars["String"]["input"]>;
  number?: InputMaybe<Scalars["String"]["input"]>;
  orderToken?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryDepartmentStoreArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryDepartmentStoresArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<DepartmentStoreFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryDispatchCallsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<DispatchCallFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryDistrictsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<DistrictFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryDownloadableArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryDropshipProductArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryDropshipProductsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<DropshipProductFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryDropshipProviderArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryDropshipProvidersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ProviderFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryEMailBouncesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<EMailBounceFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryEMailCampaignArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryEMailCampaignsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<EMailCampaignFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryEMailContactArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryEMailContactsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<EMailContactFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryEMailSegmentArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryEMailSegmentsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<EMailSegmentFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryEMailTemplateArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryETicketArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  number?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryETicketsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ETicketFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryEmployeeArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryEmuPickupLocationsArgs = {
  stateId: Scalars["ID"]["input"];
};

export type QueryErpIntegrationArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryErpIntegrationsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ErpIntegrationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryEventInviteArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryEventInvitesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<EventInviteFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryFeaturedArgs = {
  targetId: Scalars["ID"]["input"];
  targetType: Scalars["String"]["input"];
};

export type QueryFeaturedsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<FeaturedFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryFeedbackArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryFeedbackCommentsArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryFeedbackTopicsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<FeedbackTopicFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryFeedbacksArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<FeedbackFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryFlatTaxonArgs = {
  depth?: InputMaybe<Scalars["Int"]["input"]>;
};

export type QueryFollowArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryGameArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
};

export type QueryGamesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<GameFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryGamificationsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<GamificationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryGateProLogArgs = {
  sessionId: Scalars["String"]["input"];
};

export type QueryGcArgs = {
  id?: InputMaybe<Scalars["String"]["input"]>;
  redemptionCode?: InputMaybe<Scalars["String"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type QueryGolomtCardArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryHandlebarTemplateArgs = {
  code?: InputMaybe<Scalars["String"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type QueryInventoryUnitActionsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<InventoryUnitActionFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryJobLogsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<JobLogFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryKeywordsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<KeywordFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryLeaseBlackListsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<LeaseBlackListFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryLineItemArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryListingArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  impression?: InputMaybe<Scalars["Boolean"]["input"]>;
  slug?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryListingsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ListingFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryLookBookArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
};

export type QueryLookBooksArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<LookBookFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryMTemplateArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryMTemplatesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<EMailTemplateFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryMapDriversArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  latitude: Scalars["String"]["input"];
  longitude: Scalars["String"]["input"];
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryMapOrdersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OrderFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  latitude: Scalars["String"]["input"];
  longitude: Scalars["String"]["input"];
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryMapStoresArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<StoreLocationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  latitude: Scalars["String"]["input"];
  longitude: Scalars["String"]["input"];
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryMassPromotionsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<MassPromoFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryMenuArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  title?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryMerchantsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<MerchantFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryMovieArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryMovieTicketArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryMovieTicketsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<MovieTicketFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryMoviesArgs = {
  upcoming?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type QueryNewsArgs = {
  id: Scalars["ID"]["input"];
  impression?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type QueryNewsesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<NewsFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryNixArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  query?: InputMaybe<Scalars["JSON"]["input"]>;
  text?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryNodeArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryNodesArgs = {
  ids: Array<Scalars["ID"]["input"]>;
};

export type QueryNoticesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<NoticeFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryNotificationsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<NotificationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryNutritionFactArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryNutritionFactsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<NutritionFactFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryOneSignalAppArgs = {
  websiteId: Scalars["ID"]["input"];
};

export type QueryOneSignalNotificationArgs = {
  id: Scalars["String"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type QueryOneSignalNotificationsArgs = {
  applicationId?: InputMaybe<Scalars["ID"]["input"]>;
  kind?: InputMaybe<Scalars["Int"]["input"]>;
  offset: Scalars["Int"]["input"];
  perPage: Scalars["Int"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type QueryOneSignalSegmentArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryOptionTypeArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryOptionTypesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OptionTypeFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryOptionValuesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OptionValueFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryOrderArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  number?: InputMaybe<Scalars["String"]["input"]>;
  token?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryOrderTemplateArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryOrdersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OrderFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  status?: InputMaybe<OrderStatus>;
};

export type QueryPageArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  slug?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryPagesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PageFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryPaymentArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  number?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryPaymentMethodsArgs = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  afterPay?: InputMaybe<Scalars["Boolean"]["input"]>;
  displayOn?: InputMaybe<Array<PmDisplayKind>>;
};

export type QueryPaymentReturnArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryPaymentReturnReasonsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PaymentReturnReasonFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryPaymentReturnSourcesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PaymentReturnSourceFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryPollArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryPollsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PollFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryPosCurrentOrderArgs = {
  number?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryPosListingArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  slug?: InputMaybe<Scalars["String"]["input"]>;
  storeLocationId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type QueryPosStoreArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryPrescriptionArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryPrescriptionsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PrescriptionFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryPriceUpdateProductsArgs = {
  businessId?: InputMaybe<Scalars["ID"]["input"]>;
  params: Scalars["JSON"]["input"];
};

export type QueryProductArgs = {
  brand?: InputMaybe<Scalars["String"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  sku?: InputMaybe<Scalars["String"]["input"]>;
  slug?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryProductsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ProductFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type QueryPromotionArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryPromotionsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  dateType?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PromotionFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  from?: InputMaybe<Scalars["String"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  to?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryPropertiesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PropertyFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryPropertyArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryPropertyValuesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PropertyValueFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryPrototypeArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryPrototypesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PrototypeFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryPushTemplatesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PushTemplateFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryQuartersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<QuarterFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryQuizArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
};

export type QueryQuizzesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<QuizFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryRateArgs = {
  rate: Scalars["String"]["input"];
};

export type QueryRelatedProductsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<RelationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QuerySavedAddressArgs = {
  id: Scalars["ID"]["input"];
};

export type QuerySearchAddressByNamesArgs = {
  country?: InputMaybe<Scalars["String"]["input"]>;
  district?: InputMaybe<Scalars["String"]["input"]>;
  locality?: InputMaybe<Scalars["String"]["input"]>;
  province?: InputMaybe<Scalars["String"]["input"]>;
};

export type QuerySearchVinArgs = {
  number: Scalars["String"]["input"];
};

export type QuerySessionArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryShipmentArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  number?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryShipmentsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ShipmentFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryShippersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryShippingCategoriesArgs = {
  filter?: InputMaybe<ShippingCategoryFilter>;
};

export type QueryShippingMethodsArgs = {
  filter?: InputMaybe<ShippingMethodFilter>;
};

export type QueryShoppyImagesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ShoppyImageFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QuerySizingGuideArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryStageArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
};

export type QueryStatesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<StateFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryStockLocationsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<StockLocationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryStoreCreditArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryStoreCreditsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<StoreCreditFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryStoreLocationArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryStoreLocationsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<StoreLocationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryStoresAddressesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  categoryIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  filter?: InputMaybe<AddressFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  wid?: InputMaybe<Scalars["ID"]["input"]>;
};

export type QuerySupplierCategoriesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<SupplierCategoryFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QuerySupplySegmentArgs = {
  id: Scalars["ID"]["input"];
};

export type QuerySupplySegmentsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<SupplySegmentFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QuerySyncLogArgs = {
  id: Scalars["ID"]["input"];
};

export type QuerySyncLogsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<SyncLogFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryTagArgs = {
  name: Scalars["String"]["input"];
};

export type QueryTagsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TagFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  websiteSpecific?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type QueryTaxCategoriesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryTaxRatesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryTaxonArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  permalink?: InputMaybe<Scalars["String"]["input"]>;
  suffix?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryTaxonsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TaxonFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryTecArticleArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  number?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryTecArticlesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TecArticleFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryTecAssemblyGroupArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
};

export type QueryTecAssemblyGroupsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TecAssemblyGroupFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryTecBrandArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryTecBrandsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TecBrandFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryTecCategoriesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TecCategoryFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryTecLinkagesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TecLinkageFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryTecManufacturersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TecManufacturerFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryTecModelSeriesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TecModelSeriesFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryTecPriceUpdateArticlesArgs = {
  businessId?: InputMaybe<Scalars["ID"]["input"]>;
  params: Scalars["JSON"]["input"];
};

export type QueryTecPricesArgs = {
  filter?: InputMaybe<TecPriceFilter>;
};

export type QueryTecStockArgs = {
  filter?: InputMaybe<TecStockFilter>;
};

export type QueryTicketTemplateArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryTicketTemplatesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TicketTemplateFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryTrackablesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryTransactionArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryTransactionsRepayPreviewArgs = {
  amount: Scalars["Float"]["input"];
  batch: Array<TransactionRepayPreviewInput>;
};

export type QueryUserArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryUserAddressArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryUserAddressesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<UserAddressFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryUserAgreementsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<UserAgreementFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryUserTokenInfoArgs = {
  number: Scalars["String"]["input"];
};

export type QueryUsersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<UserFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryUsersListArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<UserFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryVariantArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryVariantsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<VariantFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  permission?: InputMaybe<VariantsPermission>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryVendorArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryVendorsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<VendorFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryWalletArgs = {
  id: Scalars["ID"]["input"];
};

export type QueryWalletBalancesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  date: Scalars["ISO8601Date"]["input"];
  filter?: InputMaybe<TransactionFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  websiteId: Scalars["ID"]["input"];
};

export type QueryWalletProductsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<WalletProductsFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryWalletReportsArgs = {
  dateFrom: Scalars["ISO8601Date"]["input"];
  dateTo: Scalars["ISO8601Date"]["input"];
  first?: InputMaybe<Scalars["Int"]["input"]>;
  page?: InputMaybe<Scalars["Int"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type QueryWalletSalesArgs = {
  dateFrom: Scalars["ISO8601Date"]["input"];
  dateTo: Scalars["ISO8601Date"]["input"];
  first?: InputMaybe<Scalars["Int"]["input"]>;
  page?: InputMaybe<Scalars["Int"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type QueryWalletsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<WalletFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryWebListingsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ListingFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryWebhooksArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryWebsiteArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  index?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryWebsitesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<WebsiteFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryWishedProductsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<WishedProductFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type QueryWishlistArgs = {
  accessHash?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryWishlistsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<WishlistFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type Quiz = BaseModelInterface &
  Node & {
    __typename?: "Quiz";
    active?: Maybe<Scalars["Boolean"]["output"]>;
    available?: Maybe<Scalars["Boolean"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    cover?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["JSON"]["output"]>;
    description?: Maybe<Scalars["String"]["output"]>;
    expireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    gradeBy?: Maybe<Scalars["String"]["output"]>;
    id: Scalars["ID"]["output"];
    permalink?: Maybe<Scalars["String"]["output"]>;
    preferredEntryPerUser?: Maybe<Scalars["Int"]["output"]>;
    preferredFrequency?: Maybe<Scalars["String"]["output"]>;
    preferredOnDisplay?: Maybe<Scalars["Int"]["output"]>;
    preferredRewardPerUser?: Maybe<Scalars["Int"]["output"]>;
    preferredTime?: Maybe<Scalars["Int"]["output"]>;
    questions: Array<QuizQuestion>;
    rewards: Array<QuizReward>;
    startAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    title?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type QuizCanIArgs = {
  action: CanIAction;
};

export type QuizAnswer = BaseModelInterface &
  Node & {
    __typename?: "QuizAnswer";
    body?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    score?: Maybe<Scalars["Int"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type QuizAnswerCanIArgs = {
  action: CanIAction;
};

export type QuizAnswerInput = {
  _destroy?: InputMaybe<Scalars["Boolean"]["input"]>;
  body: Scalars["String"]["input"];
  id?: InputMaybe<Scalars["ID"]["input"]>;
  score?: InputMaybe<Scalars["Int"]["input"]>;
};

export type QuizConnection = {
  __typename?: "QuizConnection";
  edges: Array<QuizEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Quiz>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type QuizConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type QuizConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type QuizEdge = {
  __typename?: "QuizEdge";
  cursor: Scalars["String"]["output"];
  node: Quiz;
};

export type QuizFilter = {
  active?: InputMaybe<BoolFilter>;
  createdAt?: InputMaybe<DateFilter>;
  description?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type QuizQuestion = BaseModelInterface &
  Node & {
    __typename?: "QuizQuestion";
    answers: Array<QuizAnswer>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    question: QuizQuestion;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type QuizQuestionCanIArgs = {
  action: CanIAction;
};

export type QuizQuestionInput = {
  _destroy?: InputMaybe<Scalars["Boolean"]["input"]>;
  answers?: InputMaybe<Array<QuizAnswerInput>>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  name: Scalars["String"]["input"];
};

export type QuizResult = BaseModelInterface &
  Node & {
    __typename?: "QuizResult";
    answers?: Maybe<Array<QuizAnswer>>;
    availableRewards?: Maybe<Scalars["Int"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    claimedRewards?: Maybe<Scalars["Int"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    finalScore?: Maybe<Scalars["Int"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    possibleRewards?: Maybe<Array<QuizReward>>;
    rewards?: Maybe<Array<QuizReward>>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    winnerStatus?: Maybe<Scalars["Boolean"]["output"]>;
  };

export type QuizResultCanIArgs = {
  action: CanIAction;
};

export type QuizReward = BaseModelInterface &
  Node & {
    __typename?: "QuizReward";
    availableFrom?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    availableUntil?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    image?: Maybe<Scalars["String"]["output"]>;
    maxScore?: Maybe<Scalars["Int"]["output"]>;
    minScore?: Maybe<Scalars["Int"]["output"]>;
    name?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type QuizRewardCanIArgs = {
  action: CanIAction;
};

export type QuizRewardInput = {
  _destroy?: InputMaybe<Scalars["Boolean"]["input"]>;
  availableFrom?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  availableUntil?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  image?: InputMaybe<Scalars["Upload"]["input"]>;
  maxScore?: InputMaybe<Scalars["Int"]["input"]>;
  minScore?: InputMaybe<Scalars["Int"]["input"]>;
  name: Scalars["String"]["input"];
};

export type RecentlyViewedListing = BaseModelInterface &
  Node & {
    __typename?: "RecentlyViewedListing";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    listing: Listing;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user: User;
    viewCount: Scalars["Int"]["output"];
    website: Website;
  };

export type RecentlyViewedListingCanIArgs = {
  action: CanIAction;
};

export type RecentlyViewedListingConnection = {
  __typename?: "RecentlyViewedListingConnection";
  edges: Array<RecentlyViewedListingEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<RecentlyViewedListing>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type RecentlyViewedListingConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type RecentlyViewedListingConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type RecentlyViewedListingEdge = {
  __typename?: "RecentlyViewedListingEdge";
  cursor: Scalars["String"]["output"];
  node: RecentlyViewedListing;
};

export type Regex = Node &
  RuleInterface & {
    __typename?: "Regex";
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredRegex: Scalars["String"]["output"];
    productGroupId?: Maybe<Scalars["ID"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type Relatable = Product | Vendor;

export type RelatableTo = Product | Vendor;

export type Relation = BaseModelInterface &
  Node & {
    __typename?: "Relation";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    discountAmount?: Maybe<Scalars["Float"]["output"]>;
    expireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    position?: Maybe<Scalars["String"]["output"]>;
    relatable?: Maybe<Relatable>;
    relatedTo?: Maybe<RelatableTo>;
    relationType: RelationType;
    startAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
    websiteId?: Maybe<Scalars["ID"]["output"]>;
  };

export type RelationCanIArgs = {
  action: CanIAction;
};

export type RelationConnection = {
  __typename?: "RelationConnection";
  edges: Array<RelationEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Relation>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type RelationConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type RelationConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type RelationEdge = {
  __typename?: "RelationEdge";
  cursor: Scalars["String"]["output"];
  node: Relation;
};

export type RelationFilter = {
  createdAt?: InputMaybe<DateFilter>;
  discountAmount?: InputMaybe<IntFilter>;
  expireAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  position?: InputMaybe<IntFilter>;
  relatedSku?: InputMaybe<StringFilter>;
  relatedToSku?: InputMaybe<StringFilter>;
  relationType?: InputMaybe<RelationTypeFilter>;
  relationTypeId?: InputMaybe<IdFilter>;
  startAt?: InputMaybe<DateFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  website?: InputMaybe<WebsiteFilter>;
  websiteId?: InputMaybe<IdFilter>;
};

export type RelationType = BaseModelInterface &
  Node & {
    __typename?: "RelationType";
    appliesTo: Scalars["String"]["output"];
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type RelationTypeCanIArgs = {
  action: CanIAction;
};

export type RelationTypeFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type Replenish = BaseModelInterface &
  CalculatorInterface &
  Node & {
    __typename?: "Replenish";
    calculableId?: Maybe<Scalars["Int"]["output"]>;
    calculableType?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredAmount: Scalars["Float"]["output"];
    preferredSegmentId: Scalars["ID"]["output"];
    preferredSkuList: Scalars["String"]["output"];
    skuList: Array<Scalars["String"]["output"]>;
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type ReplenishCanIArgs = {
  action: CanIAction;
};

export type Report = BaseModelInterface &
  Node & {
    __typename?: "Report";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    message?: Maybe<Scalars["String"]["output"]>;
    reportReason?: Maybe<ReportReason>;
    status?: Maybe<Scalars["String"]["output"]>;
    target?: Maybe<ReportTarget>;
    targetId?: Maybe<Scalars["ID"]["output"]>;
    targetType?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    website?: Maybe<Website>;
  };

export type ReportCanIArgs = {
  action: CanIAction;
};

export type ReportConnection = {
  __typename?: "ReportConnection";
  edges: Array<ReportEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Report>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type ReportConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type ReportConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type ReportEdge = {
  __typename?: "ReportEdge";
  cursor: Scalars["String"]["output"];
  node: Report;
};

export type ReportReason = BaseModelInterface &
  Node & {
    __typename?: "ReportReason";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    position?: Maybe<Scalars["Int"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type ReportReasonCanIArgs = {
  action: CanIAction;
};

export type ReportReasonFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type ReportTarget = User | Vendor;

export type ReportsFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  message?: InputMaybe<StringFilter>;
  reportReason?: InputMaybe<ReportReasonFilter>;
  reportReasonId?: InputMaybe<IntFilter>;
  targetId?: InputMaybe<IntFilter>;
  targetType?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  userFirstNameOrUserMobileOrUserEmail?: InputMaybe<StringFilter>;
  withStatus?: InputMaybe<StringFilter>;
  withTargetKinds?: InputMaybe<StringFilter>;
  withTargets?: InputMaybe<StringFilter>;
};

export type ReturnItem = BaseModelInterface &
  Node & {
    __typename?: "ReturnItem";
    acceptanceStatus?: Maybe<Scalars["String"]["output"]>;
    acceptanceStatusErrors?: Maybe<Scalars["String"]["output"]>;
    additionalTaxTotal: Scalars["Float"]["output"];
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    customerReturnId?: Maybe<Scalars["ID"]["output"]>;
    exchangeVariant?: Maybe<Variant>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    includedTaxTotal: Scalars["Float"]["output"];
    inventoryUnit?: Maybe<InventoryUnit>;
    overrideReimbursementTypeId?: Maybe<Scalars["ID"]["output"]>;
    preTaxAmount: Scalars["Float"]["output"];
    preferredReimbursementTypeId?: Maybe<Scalars["ID"]["output"]>;
    receptionStatus?: Maybe<Scalars["String"]["output"]>;
    reimbursementId?: Maybe<Scalars["ID"]["output"]>;
    resellable: Scalars["Boolean"]["output"];
    returnAuthorizationId?: Maybe<Scalars["ID"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type ReturnItemCanIArgs = {
  action: CanIAction;
};

export type Review = BaseModelInterface &
  Node & {
    __typename?: "Review";
    canI: Scalars["Boolean"]["output"];
    comment?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    images: Array<Scalars["String"]["output"]>;
    rating: Scalars["Float"]["output"];
    reviewable?: Maybe<Reviewable>;
    reviewableId: Scalars["ID"]["output"];
    reviewableType: Scalars["String"]["output"];
    source?: Maybe<ReviewSourceType>;
    sourceId?: Maybe<Scalars["ID"]["output"]>;
    sourceType?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user: User;
    website: Website;
  };

export type ReviewCanIArgs = {
  action: CanIAction;
};

export type ReviewConnection = {
  __typename?: "ReviewConnection";
  edges: Array<ReviewEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Review>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type ReviewConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type ReviewConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type ReviewEdge = {
  __typename?: "ReviewEdge";
  cursor: Scalars["String"]["output"];
  node: Review;
};

export type ReviewSourceType = Order;

export type Reviewable =
  | Article
  | Brand
  | Comment
  | Listing
  | Product
  | User
  | Vendor;

export type ReviewsFilter = {
  comment?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  rating?: InputMaybe<StringFilter>;
  reviewableId?: InputMaybe<IntFilter>;
  reviewableType?: InputMaybe<StringFilter>;
  sourceId?: InputMaybe<IdFilter>;
  sourceType?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  userFirstNameOrUserMobileOrUserEmail?: InputMaybe<StringFilter>;
  withReviewableKinds?: InputMaybe<StringFilter>;
  withReviewables?: InputMaybe<StringFilter>;
};

export type Rfm = {
  __typename?: "Rfm";
  count: Scalars["Int"]["output"];
  frequency: Scalars["Int"]["output"];
  monetary: Scalars["Int"]["output"];
  recency: Scalars["Int"]["output"];
};

export type Room = BaseModelInterface &
  Node & {
    __typename?: "Room";
    adminRead: Scalars["Boolean"]["output"];
    around?: Maybe<Around>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    hasSeen?: Maybe<Scalars["Boolean"]["output"]>;
    id: Scalars["ID"]["output"];
    lastMessage?: Maybe<Message>;
    lastMessageId?: Maybe<Scalars["ID"]["output"]>;
    members: Array<Member>;
    messageCount?: Maybe<Scalars["Int"]["output"]>;
    messages: MessageConnection;
    status?: Maybe<Scalars["String"]["output"]>;
    test?: Maybe<Scalars["String"]["output"]>;
    title?: Maybe<Scalars["String"]["output"]>;
    unseen?: Maybe<Scalars["Boolean"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type RoomCanIArgs = {
  action: CanIAction;
};

export type RoomMessagesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type RoomConnection = {
  __typename?: "RoomConnection";
  edges: Array<RoomEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Room>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type RoomConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type RoomConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type RoomEdge = {
  __typename?: "RoomEdge";
  cursor: Scalars["String"]["output"];
  node: Room;
};

export type RoomFilter = {
  aroundWebsiteId?: InputMaybe<IdFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  members?: InputMaybe<MemberFilter>;
  membersUserMobileOrMembersUserFirstName?: InputMaybe<StringFilter>;
  messages?: InputMaybe<MessageFilter>;
  productId?: InputMaybe<IntFilter>;
  productVendorId?: InputMaybe<IntFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  userEmailOrUserMobileOrUserFirstName?: InputMaybe<StringFilter>;
  userId?: InputMaybe<IdFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type RuleInterface = {
  code?: Maybe<Scalars["String"]["output"]>;
  createdAt: Scalars["ISO8601DateTime"]["output"];
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  preferences?: Maybe<Scalars["JSON"]["output"]>;
  productGroupId?: Maybe<Scalars["ID"]["output"]>;
  promotion: Promotion;
  promotionId: Scalars["ID"]["output"];
  type?: Maybe<Scalars["String"]["output"]>;
  updatedAt: Scalars["ISO8601DateTime"]["output"];
  userId?: Maybe<Scalars["ID"]["output"]>;
};

export type SalePrice = BaseModelInterface &
  Node & {
    __typename?: "SalePrice";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    createdBy?: Maybe<User>;
    currency?: Maybe<Scalars["String"]["output"]>;
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    eventLabel?: Maybe<Scalars["String"]["output"]>;
    expireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    forceOthers?: Maybe<Scalars["Boolean"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    isEvent?: Maybe<Scalars["Boolean"]["output"]>;
    position?: Maybe<Scalars["Int"]["output"]>;
    qty?: Maybe<Scalars["Int"]["output"]>;
    segment?: Maybe<SupplySegment>;
    segmentId?: Maybe<Scalars["ID"]["output"]>;
    startAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variant: Variant;
    variantId: Scalars["String"]["output"];
    website?: Maybe<Website>;
    websiteId?: Maybe<Scalars["ID"]["output"]>;
  };

export type SalePriceCanIArgs = {
  action: CanIAction;
};

export type Screen = BaseModelInterface &
  Node & {
    __typename?: "Screen";
    canI: Scalars["Boolean"]["output"];
    cinema: Cinema;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    idx?: Maybe<Scalars["String"]["output"]>;
    name?: Maybe<Scalars["String"]["output"]>;
    svg?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type ScreenCanIArgs = {
  action: CanIAction;
};

export type Segment = BaseModelInterface &
  Node & {
    __typename?: "Segment";
    canI: Scalars["Boolean"]["output"];
    contactCount?: Maybe<Scalars["Int"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["JSON"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    operator?: Maybe<Scalars["String"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type SegmentCanIArgs = {
  action: CanIAction;
};

export type SegmentClient = BaseModelInterface &
  Node & {
    __typename?: "SegmentClient";
    canI: Scalars["Boolean"]["output"];
    client: BusinessClient;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data: Scalars["JSON"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    segment: SupplySegment;
    segmentedAt: Scalars["ISO8601Date"]["output"];
    status: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type SegmentClientCanIArgs = {
  action: CanIAction;
};

export type SegmentClientConnection = {
  __typename?: "SegmentClientConnection";
  edges: Array<SegmentClientEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<SegmentClient>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type SegmentClientConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type SegmentClientConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type SegmentClientEdge = {
  __typename?: "SegmentClientEdge";
  cursor: Scalars["String"]["output"];
  node: SegmentClient;
};

export type SegmentClientFilter = {
  client?: InputMaybe<BusinessClientFilter>;
  clientId?: InputMaybe<IdFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  segment?: InputMaybe<SupplySegmentFilter>;
  segmentId?: InputMaybe<IdFilter>;
  segmentedAt?: InputMaybe<DateFilter>;
  status?: InputMaybe<EnumStringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type SegmentConnection = {
  __typename?: "SegmentConnection";
  edges: Array<SegmentEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Segment>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type SegmentConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type SegmentConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type SegmentEdge = {
  __typename?: "SegmentEdge";
  cursor: Scalars["String"]["output"];
  node: Segment;
};

export type SegmentInput = {
  aap: Scalars["String"]["input"];
  aat?: InputMaybe<Scalars["String"]["input"]>;
  ad: Scalars["String"]["input"];
  at: Scalars["String"]["input"];
  cabin: Scalars["String"]["input"];
  dap: Scalars["String"]["input"];
  dat?: InputMaybe<Scalars["String"]["input"]>;
  dd: Scalars["String"]["input"];
  dt: Scalars["String"]["input"];
  dur?: InputMaybe<Scalars["Int"]["input"]>;
  dv: Scalars["Int"]["input"];
  eq: Scalars["String"]["input"];
  et: Scalars["String"]["input"];
  fl: Scalars["String"]["input"];
  mcar: Scalars["String"]["input"];
  ocar: Scalars["String"]["input"];
  pdq: Scalars["String"]["input"];
  rbd: Scalars["String"]["input"];
};

export type SegmentWhiteList = BaseModelInterface &
  Node & {
    __typename?: "SegmentWhiteList";
    canI: Scalars["Boolean"]["output"];
    company?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    email?: Maybe<Scalars["String"]["output"]>;
    entries: Array<WhiteListEntry>;
    entriesCount: Scalars["Int"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    lastEntryDate?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    mobile?: Maybe<Scalars["String"]["output"]>;
    referral?: Maybe<User>;
    registerNo: Scalars["String"]["output"];
    segment: SupplySegment;
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type SegmentWhiteListCanIArgs = {
  action: CanIAction;
};

export type SegmentWhiteListConnection = {
  __typename?: "SegmentWhiteListConnection";
  edges: Array<SegmentWhiteListEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<SegmentWhiteList>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type SegmentWhiteListConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type SegmentWhiteListConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type SegmentWhiteListEdge = {
  __typename?: "SegmentWhiteListEdge";
  cursor: Scalars["String"]["output"];
  node: SegmentWhiteList;
};

export type SegmentWhiteListFilter = {
  company?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  email?: InputMaybe<StringFilter>;
  entries?: InputMaybe<WhiteListEntryFilter>;
  id?: InputMaybe<IdFilter>;
  mobile?: InputMaybe<StringFilter>;
  referral?: InputMaybe<UserFilter>;
  referralId?: InputMaybe<IdFilter>;
  registerNo?: InputMaybe<StringFilter>;
  segment?: InputMaybe<SupplySegmentFilter>;
  segmentId?: InputMaybe<IdFilter>;
  status?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type SegmentWhiteListReport = BaseModelInterface &
  Node & {
    __typename?: "SegmentWhiteListReport";
    canI: Scalars["Boolean"]["output"];
    created?: Maybe<Scalars["Int"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    createdBy?: Maybe<User>;
    createdById?: Maybe<Scalars["ID"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    skipped?: Maybe<Scalars["Int"]["output"]>;
    total?: Maybe<Scalars["Int"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type SegmentWhiteListReportCanIArgs = {
  action: CanIAction;
};

export type SendErpLoyaltyRequestInput = {
  address: Scalars["String"]["input"];
  birthDate: Scalars["String"]["input"];
  cardId: Scalars["String"]["input"];
  cardPassword: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  customerName: Scalars["String"]["input"];
  customerParentName: Scalars["String"]["input"];
  email: Scalars["String"]["input"];
  gender: Scalars["String"]["input"];
  maritalStatus: Scalars["String"]["input"];
  mobilePhone: Scalars["String"]["input"];
  note: Scalars["String"]["input"];
  registerNumber: Scalars["String"]["input"];
  workAddress: Scalars["String"]["input"];
};

export type Series = BaseModelInterface &
  Node & {
    __typename?: "Series";
    canI: Scalars["Boolean"]["output"];
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    expiresAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    no?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    vendor?: Maybe<Vendor>;
  };

export type SeriesCanIArgs = {
  action: CanIAction;
};

export type Session = Node & {
  __typename?: "Session";
  attributes?: Maybe<Array<Scalars["String"]["output"]>>;
  cinema: Cinema;
  date?: Maybe<Scalars["ISO8601Date"]["output"]>;
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  movie: Movie;
  screen: Screen;
  seatPlan?: Maybe<Scalars["JSON"]["output"]>;
  seatsAvailable?: Maybe<Scalars["Int"]["output"]>;
  tickets?: Maybe<Scalars["JSON"]["output"]>;
  time?: Maybe<Scalars["String"]["output"]>;
};

export type Shipment = BaseModelInterface &
  Node & {
    __typename?: "Shipment";
    additionalTaxTotal?: Maybe<Scalars["Float"]["output"]>;
    address?: Maybe<Address>;
    adjustmentTotal?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    cargoCost?: Maybe<Scalars["Float"]["output"]>;
    cost?: Maybe<Scalars["Float"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    deliveryPhoto?: Maybe<Scalars["String"]["output"]>;
    deliveryPhoto1?: Maybe<Scalars["String"]["output"]>;
    digital: Scalars["Boolean"]["output"];
    dueDate?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    includedTaxTotal: Scalars["Float"]["output"];
    inventoryUnits: Array<InventoryUnit>;
    itemTotal: Scalars["Float"]["output"];
    lineItemManifest: Array<ShipmentManifest>;
    manifest: Array<ShipmentManifest>;
    nonTaxableAdjustmentTotal?: Maybe<Scalars["Float"]["output"]>;
    number: Scalars["String"]["output"];
    order?: Maybe<Order>;
    packedByEmail?: Maybe<Scalars["String"]["output"]>;
    pinCode?: Maybe<Scalars["String"]["output"]>;
    preTaxAmount: Scalars["Float"]["output"];
    promoTotal?: Maybe<Scalars["Float"]["output"]>;
    selectedShippingRate?: Maybe<ShippingRate>;
    shippedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    shippedBy?: Maybe<User>;
    shipper?: Maybe<Shipper>;
    shippingMethods?: Maybe<Array<ShippingMethod>>;
    signature?: Maybe<Scalars["String"]["output"]>;
    state?: Maybe<Scalars["String"]["output"]>;
    step: Scalars["Int"]["output"];
    stockLocation?: Maybe<StockLocation>;
    taxableAdjustmentTotal?: Maybe<Scalars["Float"]["output"]>;
    tracking?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    weight?: Maybe<Scalars["Float"]["output"]>;
  };

export type ShipmentCanIArgs = {
  action: CanIAction;
};

export type ShipmentConnection = {
  __typename?: "ShipmentConnection";
  edges: Array<ShipmentEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Shipment>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type ShipmentConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type ShipmentConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type ShipmentEdge = {
  __typename?: "ShipmentEdge";
  cursor: Scalars["String"]["output"];
  node: Shipment;
};

export type ShipmentFilter = {
  address?: InputMaybe<AddressFilter>;
  cost?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  inventoryUnits?: InputMaybe<InventoryUnitFilter>;
  number?: InputMaybe<StringFilter>;
  order?: InputMaybe<OrderFilter>;
  shippedAt?: InputMaybe<DateFilter>;
  shippedBy?: InputMaybe<UserFilter>;
  shippedById?: InputMaybe<StringFilter>;
  state?: InputMaybe<StringFilter>;
  step?: InputMaybe<IntFilter>;
  stockLocations?: InputMaybe<StockLocationFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type ShipmentInventoryUnitStatusType = BaseModelInterface &
  Node & {
    __typename?: "ShipmentInventoryUnitStatusType";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    quantity?: Maybe<Scalars["Int"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type ShipmentInventoryUnitStatusTypeCanIArgs = {
  action: CanIAction;
};

export type ShipmentLineItemStatusType = BaseModelInterface &
  Node & {
    __typename?: "ShipmentLineItemStatusType";
    adjustmentTotal?: Maybe<Scalars["Int"]["output"]>;
    amount: Scalars["Int"]["output"];
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["JSON"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    inventoryUnits: Array<ShipmentInventoryUnitStatusType>;
    price: Scalars["Int"]["output"];
    productCat?: Maybe<Scalars["String"]["output"]>;
    quantity: Scalars["Int"]["output"];
    sellingPrice: Scalars["Int"]["output"];
    /** @deprecated Use shipment instead */
    shipper?: Maybe<Shipper>;
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variant: Variant;
  };

export type ShipmentLineItemStatusTypeCanIArgs = {
  action: CanIAction;
};

export type ShipmentManifest = Node & {
  __typename?: "ShipmentManifest";
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  lineItem: LineItem;
  part?: Maybe<Scalars["Boolean"]["output"]>;
  product: Product;
  quantity: Scalars["Int"]["output"];
  states: Scalars["JSON"]["output"];
  total: Scalars["Float"]["output"];
  units: Array<InventoryUnit>;
  variant: Variant;
};

export type ShipmentTracking = BaseModelInterface &
  Node & {
    __typename?: "ShipmentTracking";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    order: Order;
    orderId: Scalars["ID"]["output"];
    pending: Scalars["Boolean"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    refreshedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    target?: Maybe<TrackingTarget>;
    targetId?: Maybe<Scalars["ID"]["output"]>;
    targetType?: Maybe<Scalars["String"]["output"]>;
    trackingNumber?: Maybe<Scalars["String"]["output"]>;
    type: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type ShipmentTrackingCanIArgs = {
  action: CanIAction;
};

export type ShipmentTrackingConnection = {
  __typename?: "ShipmentTrackingConnection";
  edges: Array<ShipmentTrackingEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<ShipmentTracking>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type ShipmentTrackingConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type ShipmentTrackingConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type ShipmentTrackingEdge = {
  __typename?: "ShipmentTrackingEdge";
  cursor: Scalars["String"]["output"];
  node: ShipmentTracking;
};

export type ShipmentTrackingFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  order?: InputMaybe<OrderFilter>;
  trackingNumber?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export enum ShipmentTransfer {
  Location = "location",
  Shipment = "shipment",
}

export type Shipper = BaseModelInterface &
  Node & {
    __typename?: "Shipper";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    email?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    logo?: Maybe<Scalars["String"]["output"]>;
    methodsCount: Scalars["Int"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    phoneNumber?: Maybe<Scalars["String"]["output"]>;
    shipments: ShipmentConnection;
    shippingMethods: ShippingMethodConnection;
    status?: Maybe<Scalars["String"]["output"]>;
    taxer: Scalars["Boolean"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    vendor?: Maybe<Vendor>;
    website: Website;
  };

export type ShipperCanIArgs = {
  action: CanIAction;
};

export type ShipperShipmentsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ShipmentFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type ShipperShippingMethodsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ShippingMethodFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type ShipperConnection = {
  __typename?: "ShipperConnection";
  edges: Array<ShipperEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Shipper>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type ShipperConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type ShipperConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type ShipperEdge = {
  __typename?: "ShipperEdge";
  cursor: Scalars["String"]["output"];
  node: Shipper;
};

export type ShipperManifest = BaseModelInterface &
  Node & {
    __typename?: "ShipperManifest";
    canI: Scalars["Boolean"]["output"];
    cost: Scalars["Float"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    email?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    logo?: Maybe<Scalars["String"]["output"]>;
    name?: Maybe<Scalars["String"]["output"]>;
    phoneNumber?: Maybe<Scalars["String"]["output"]>;
    shipments: Array<Shipment>;
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type ShipperManifestCanIArgs = {
  action: CanIAction;
};

export type ShippingCategory = BaseModelInterface &
  Node & {
    __typename?: "ShippingCategory";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    shippingMethods: Array<ShippingMethod>;
    step: Scalars["Int"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type ShippingCategoryCanIArgs = {
  action: CanIAction;
};

export type ShippingCategoryFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  step?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type ShippingMethod = BaseModelInterface &
  Node & {
    __typename?: "ShippingMethod";
    adminName?: Maybe<Scalars["String"]["output"]>;
    calculatorAttributes?: Maybe<Scalars["JSON"]["output"]>;
    calculatorType?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    channel?: Maybe<Scalars["String"]["output"]>;
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    description?: Maybe<Scalars["String"]["output"]>;
    displayOn?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    logo?: Maybe<Scalars["String"]["output"]>;
    name?: Maybe<Scalars["String"]["output"]>;
    phone?: Maybe<Scalars["String"]["output"]>;
    shipper?: Maybe<Shipper>;
    shipperId?: Maybe<Scalars["ID"]["output"]>;
    shippingCategories: Array<ShippingCategory>;
    shippingCategoryIds: Array<Scalars["ID"]["output"]>;
    step: Scalars["Int"]["output"];
    taxCategoryId?: Maybe<Scalars["ID"]["output"]>;
    trackingUrl?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
    zoneIds: Array<Scalars["ID"]["output"]>;
    zones: Array<Zone>;
  };

export type ShippingMethodCanIArgs = {
  action: CanIAction;
};

export type ShippingMethodConnection = {
  __typename?: "ShippingMethodConnection";
  edges: Array<ShippingMethodEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<ShippingMethod>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type ShippingMethodConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type ShippingMethodConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type ShippingMethodEdge = {
  __typename?: "ShippingMethodEdge";
  cursor: Scalars["String"]["output"];
  node: ShippingMethod;
};

export type ShippingMethodFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  shippingCategoriesId?: InputMaybe<IdFilter>;
  step?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type ShippingRate = BaseModelInterface &
  Node & {
    __typename?: "ShippingRate";
    canI: Scalars["Boolean"]["output"];
    cost?: Maybe<Scalars["Float"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    displayCost?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    selected?: Maybe<Scalars["Boolean"]["output"]>;
    shipment?: Maybe<Shipment>;
    shippingMethod?: Maybe<ShippingMethod>;
    taxRateId?: Maybe<Scalars["ID"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type ShippingRateCanIArgs = {
  action: CanIAction;
};

export type ShopifyAction = ActionInterface &
  Node & {
    __typename?: "ShopifyAction";
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    position?: Maybe<Scalars["Int"]["output"]>;
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
  };

export type ShopifyRule = Node &
  RuleInterface & {
    __typename?: "ShopifyRule";
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    productGroupId?: Maybe<Scalars["ID"]["output"]>;
    promotion: Promotion;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export enum ShopperCartItemAction {
  Collect = "collect",
  Discard = "discard",
  Partial = "partial",
  PickVariant = "pick_variant",
  SwapRequest = "swap_request",
}

export type ShoppyCampaign = BaseModelInterface &
  Node & {
    __typename?: "ShoppyCampaign";
    campaignListings: CampaignListingConnection;
    canI: Scalars["Boolean"]["output"];
    cover?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    endsAt: Scalars["ISO8601DateTime"]["output"];
    fulfillDate?: Maybe<Scalars["ISO8601Date"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    itemsCount: Scalars["Int"]["output"];
    listingsCount: Scalars["Int"]["output"];
    location?: Maybe<Scalars["String"]["output"]>;
    maxItemsCount: Scalars["Int"]["output"];
    minItemsCount: Scalars["Int"]["output"];
    startsAt: Scalars["ISO8601DateTime"]["output"];
    status: Scalars["String"]["output"];
    title: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variants: VariantConnection;
    vendor: Vendor;
    website: Website;
  };

export type ShoppyCampaignCampaignListingsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<CampaignListingFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type ShoppyCampaignCanIArgs = {
  action: CanIAction;
};

export type ShoppyCampaignVariantsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<VariantFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  permission?: InputMaybe<VariantsPermission>;
  sort?: InputMaybe<SortFilter>;
};

export type ShoppyCampaignConnection = {
  __typename?: "ShoppyCampaignConnection";
  edges: Array<ShoppyCampaignEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<ShoppyCampaign>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type ShoppyCampaignConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type ShoppyCampaignConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type ShoppyCampaignEdge = {
  __typename?: "ShoppyCampaignEdge";
  cursor: Scalars["String"]["output"];
  node: ShoppyCampaign;
};

export type ShoppyImageFilter = {
  attachmentContentType?: InputMaybe<StringFilter>;
  attachmentFileName?: InputMaybe<StringFilter>;
  attachmentFileSize?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  vendor?: InputMaybe<VendorFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type ShoppyTrackableFilter = {
  acceptedOrderCount?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  isAvailable?: InputMaybe<BoolFilter>;
  latitude?: InputMaybe<StringFilter>;
  longitude?: InputMaybe<StringFilter>;
  orderCount?: InputMaybe<IntFilter>;
  rejectedOrderCount?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type SimpleInAppInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "SimpleInAppInvoice";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceId?: Maybe<Scalars["String"]["output"]>;
    invoiceNumber?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type SimpleInAppInvoiceCanIArgs = {
  action: CanIAction;
};

export type SimpleInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "SimpleInvoice";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceId?: Maybe<Scalars["String"]["output"]>;
    invoiceNumber?: Maybe<Scalars["String"]["output"]>;
    qrLink?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type SimpleInvoiceCanIArgs = {
  action: CanIAction;
};

export type SizingGuide = BaseModelInterface &
  Node & {
    __typename?: "SizingGuide";
    ageGroup?: Maybe<Scalars["String"]["output"]>;
    brand?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    csv?: Maybe<Scalars["JSON"]["output"]>;
    data?: Maybe<Scalars["String"]["output"]>;
    description?: Maybe<Scalars["String"]["output"]>;
    gender?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    grouping?: Maybe<Scalars["String"]["output"]>;
    id: Scalars["ID"]["output"];
    store?: Maybe<Brand>;
    title?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    vendor?: Maybe<Vendor>;
  };

export type SizingGuideCanIArgs = {
  action: CanIAction;
};

export type SizingGuideConnection = {
  __typename?: "SizingGuideConnection";
  edges: Array<SizingGuideEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<SizingGuide>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type SizingGuideConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type SizingGuideConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type SizingGuideEdge = {
  __typename?: "SizingGuideEdge";
  cursor: Scalars["String"]["output"];
  node: SizingGuide;
};

export type SizingGuideFilter = {
  ageGroup?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  gender?: InputMaybe<StringFilter>;
  grouping?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  store?: InputMaybe<BrandFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  vendor?: InputMaybe<VendorFilter>;
  withListing?: InputMaybe<StringFilter>;
};

export type SmartGrid = BaseModelInterface &
  Node & {
    __typename?: "SmartGrid";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    employee?: Maybe<Employee>;
    employeeId?: Maybe<Scalars["ID"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    items?: Maybe<Array<Scalars["JSON"]["output"]>>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    visible?: Maybe<Scalars["Boolean"]["output"]>;
  };

export type SmartGridCanIArgs = {
  action: CanIAction;
};

export type Sms = BaseModelInterface &
  Node & {
    __typename?: "Sms";
    canI: Scalars["Boolean"]["output"];
    content?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    expireAfter?: Maybe<Scalars["Int"]["output"]>;
    from?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    operator?: Maybe<Scalars["String"]["output"]>;
    price?: Maybe<Scalars["Float"]["output"]>;
    sender?: Maybe<Scalars["String"]["output"]>;
    sentAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    sourceId?: Maybe<Scalars["ID"]["output"]>;
    sourceType?: Maybe<Scalars["String"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    to?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type SmsCanIArgs = {
  action: CanIAction;
};

export type SmsConnection = {
  __typename?: "SmsConnection";
  edges: Array<SmsEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Sms>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type SmsConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type SmsConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type SmsEdge = {
  __typename?: "SmsEdge";
  cursor: Scalars["String"]["output"];
  node: Sms;
};

export type SmsFilter = {
  content?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  from?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  operator?: InputMaybe<StringFilter>;
  price?: InputMaybe<IntFilter>;
  sender?: InputMaybe<StringFilter>;
  sentAt?: InputMaybe<DateFilter>;
  status?: InputMaybe<StringFilter>;
  to?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type SmsTemplate = BaseModelInterface &
  Node & {
    __typename?: "SmsTemplate";
    body?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    storeLocation?: Maybe<StoreLocation>;
    title?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    vendor?: Maybe<Vendor>;
    website?: Maybe<Website>;
  };

export type SmsTemplateCanIArgs = {
  action: CanIAction;
};

export type SonoInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "SonoInvoice";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceId?: Maybe<Scalars["String"]["output"]>;
    invoiceNumber?: Maybe<Scalars["String"]["output"]>;
    qrString?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type SonoInvoiceCanIArgs = {
  action: CanIAction;
};

export enum SortDirection {
  Asc = "asc",
  Desc = "desc",
}

export type SortFilter = {
  direction?: InputMaybe<SortDirection | `${SortDirection}`>;
  field: Scalars["String"]["input"];
};

export type Source =
  | Bank
  | BankTransaction
  | Employee
  | GiftCard
  | InvitationAccept
  | Order
  | Payment
  | PaymentMethod
  | Transaction
  | User
  | Website;

export type Stage = BaseModelInterface &
  Node & {
    __typename?: "Stage";
    blocks?: Maybe<Array<Scalars["String"]["output"]>>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["JSON"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    locks?: Maybe<Array<Scalars["String"]["output"]>>;
    name?: Maybe<Scalars["String"]["output"]>;
    pending: Array<Scalars["String"]["output"]>;
    product?: Maybe<Product>;
    seats?: Maybe<Array<Scalars["String"]["output"]>>;
    sold: Array<Scalars["String"]["output"]>;
    svg?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variation?: Maybe<Scalars["JSON"]["output"]>;
    views?: Maybe<Scalars["JSON"]["output"]>;
  };

export type StageCanIArgs = {
  action: CanIAction;
};

export type StagePendingArgs = {
  cart?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type State = Node & {
  __typename?: "State";
  abbr?: Maybe<Scalars["String"]["output"]>;
  children: Array<District>;
  country?: Maybe<Country>;
  districts: Array<District>;
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  name?: Maybe<Scalars["String"]["output"]>;
  preferences?: Maybe<Scalars["JSON"]["output"]>;
  updatedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
};

export type StateNameArgs = {
  fallback?: InputMaybe<Scalars["String"]["input"]>;
  locale?: InputMaybe<Scalars["String"]["input"]>;
};

export type StateChange = BaseModelInterface &
  Node & {
    __typename?: "StateChange";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    nextState?: Maybe<Scalars["String"]["output"]>;
    previousState?: Maybe<Scalars["String"]["output"]>;
    statefulId?: Maybe<Scalars["ID"]["output"]>;
    statefulType?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
  };

export type StateChangeCanIArgs = {
  action: CanIAction;
};

export type StateConnection = {
  __typename?: "StateConnection";
  edges: Array<StateEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<State>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type StateConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type StateConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type StateEdge = {
  __typename?: "StateEdge";
  cursor: Scalars["String"]["output"];
  node: State;
};

export type StateFilter = {
  country?: InputMaybe<CountryFilter>;
  countryId?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type StaticRate = BaseModelInterface &
  CalculatorInterface &
  Node & {
    __typename?: "StaticRate";
    calculableId?: Maybe<Scalars["Int"]["output"]>;
    calculableType?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredAmount: Scalars["Float"]["output"];
    preferredCurrency: Scalars["String"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type StaticRateCanIArgs = {
  action: CanIAction;
};

export type StockItem = BaseModelInterface &
  Node & {
    __typename?: "StockItem";
    backorderable?: Maybe<Scalars["Boolean"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    countOnHand: Scalars["Int"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    stockLocation?: Maybe<StockLocation>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variant?: Maybe<Variant>;
  };

export type StockItemCanIArgs = {
  action: CanIAction;
};

export type StockItemConnection = {
  __typename?: "StockItemConnection";
  edges: Array<StockItemEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<StockItem>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type StockItemConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type StockItemConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type StockItemEdge = {
  __typename?: "StockItemEdge";
  cursor: Scalars["String"]["output"];
  node: StockItem;
};

export type StockItemFilter = {
  address1?: InputMaybe<StringFilter>;
  adminName?: InputMaybe<StringFilter>;
  backorderable?: InputMaybe<BoolFilter>;
  countOnHand?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  stockLocation?: InputMaybe<StockLocationFilter>;
  storeLocation?: InputMaybe<StoreLocationFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  vendor?: InputMaybe<VendorFilter>;
};

export type StockLocation = BaseModelInterface &
  Node & {
    __typename?: "StockLocation";
    active?: Maybe<Scalars["Boolean"]["output"]>;
    address1?: Maybe<Scalars["String"]["output"]>;
    address2?: Maybe<Scalars["String"]["output"]>;
    adminName?: Maybe<Scalars["String"]["output"]>;
    backorderableDefault?: Maybe<Scalars["Boolean"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    city?: Maybe<Scalars["String"]["output"]>;
    code?: Maybe<Scalars["String"]["output"]>;
    countryId?: Maybe<Scalars["ID"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    default: Scalars["Boolean"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    phone?: Maybe<Scalars["String"]["output"]>;
    propagateAllVariants?: Maybe<Scalars["Boolean"]["output"]>;
    stateId?: Maybe<Scalars["ID"]["output"]>;
    stateName?: Maybe<Scalars["String"]["output"]>;
    storeLocation?: Maybe<StoreLocation>;
    timeSheets?: Maybe<Scalars["JSON"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    vendor?: Maybe<Vendor>;
    zipcode?: Maybe<Scalars["String"]["output"]>;
  };

export type StockLocationCanIArgs = {
  action: CanIAction;
};

export type StockLocationConnection = {
  __typename?: "StockLocationConnection";
  edges: Array<StockLocationEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<StockLocation>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type StockLocationConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type StockLocationConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type StockLocationEdge = {
  __typename?: "StockLocationEdge";
  cursor: Scalars["String"]["output"];
  node: StockLocation;
};

export type StockLocationFilter = {
  active?: InputMaybe<BoolFilter>;
  address1?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  default?: InputMaybe<BoolFilter>;
  id?: InputMaybe<IdFilter>;
  listings?: InputMaybe<ListingFilter>;
  name?: InputMaybe<StringFilter>;
  nameOrAdminName?: InputMaybe<StringFilter>;
  storeLocation?: InputMaybe<StoreLocationFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  withProduct?: InputMaybe<StringFilter>;
};

export type StoreCredit = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "StoreCredit";
    amount?: Maybe<Scalars["Float"]["output"]>;
    amountUsed?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    category?: Maybe<StoreCreditCategory>;
    categoryId?: Maybe<Scalars["ID"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    currency?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    memo?: Maybe<Scalars["String"]["output"]>;
    originAmount?: Maybe<Scalars["JSON"]["output"]>;
    originText?: Maybe<Scalars["String"]["output"]>;
    originator?: Maybe<StoreCreditOriginator>;
    originatorId?: Maybe<Scalars["ID"]["output"]>;
    originatorType?: Maybe<Scalars["String"]["output"]>;
    payments: Array<Payment>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type StoreCreditCanIArgs = {
  action: CanIAction;
};

export type StoreCreditCategory = BaseModelInterface &
  Node & {
    __typename?: "StoreCreditCategory";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name: Scalars["String"]["output"];
    taxable: Scalars["Boolean"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type StoreCreditCategoryCanIArgs = {
  action: CanIAction;
};

export type StoreCreditConnection = {
  __typename?: "StoreCreditConnection";
  edges: Array<StoreCreditEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<StoreCredit>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type StoreCreditConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type StoreCreditConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type StoreCreditEdge = {
  __typename?: "StoreCreditEdge";
  cursor: Scalars["String"]["output"];
  node: StoreCredit;
};

export type StoreCreditEvent = BaseModelInterface &
  Node & {
    __typename?: "StoreCreditEvent";
    action: Scalars["String"]["output"];
    amount: Scalars["Float"]["output"];
    authorizationCode: Scalars["String"]["output"];
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    order?: Maybe<Order>;
    originatorId?: Maybe<Scalars["ID"]["output"]>;
    originatorType?: Maybe<Scalars["String"]["output"]>;
    storeCredit: StoreCredit;
    storeCreditId: Scalars["ID"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userTotalAmount: Scalars["Float"]["output"];
  };

export type StoreCreditEventCanIArgs = {
  action: CanIAction;
};

export type StoreCreditEventConnection = {
  __typename?: "StoreCreditEventConnection";
  edges: Array<StoreCreditEventEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<StoreCreditEvent>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type StoreCreditEventConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type StoreCreditEventConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type StoreCreditEventEdge = {
  __typename?: "StoreCreditEventEdge";
  cursor: Scalars["String"]["output"];
  node: StoreCreditEvent;
};

export type StoreCreditEventFilter = {
  action?: InputMaybe<StringFilter>;
  amount?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  storeCredit?: InputMaybe<StoreCreditFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  userTotalAmount?: InputMaybe<IntFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type StoreCreditFilter = {
  amount?: InputMaybe<IntFilter>;
  amountAuthorized?: InputMaybe<StringFilter>;
  amountUsed?: InputMaybe<IntFilter>;
  categoryId?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  memo?: InputMaybe<StringFilter>;
  originator?: InputMaybe<GiftCardFilter>;
  originatorId?: InputMaybe<IdFilter>;
  originatorType?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  userEmailOrUserMobile?: InputMaybe<StringFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type StoreCreditOriginator = CorporateGateway | GiftCard | Order | User;

export type StoreCreditReport = BaseModelInterface &
  Node & {
    __typename?: "StoreCreditReport";
    action?: Maybe<Scalars["String"]["output"]>;
    amount?: Maybe<Scalars["Float"]["output"]>;
    authorizationCode?: Maybe<Scalars["String"]["output"]>;
    byOriginUsedAmount?: Maybe<Scalars["JSON"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    number?: Maybe<Scalars["String"]["output"]>;
    storeCredit?: Maybe<StoreCredit>;
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userTotalAmount?: Maybe<Scalars["Float"]["output"]>;
  };

export type StoreCreditReportCanIArgs = {
  action: CanIAction;
};

export type StoreItem = {
  __typename?: "StoreItem";
  countOnHand: Scalars["Int"]["output"];
  storeLocation?: Maybe<StoreLocation>;
};

export type StoreListing = BaseModelInterface &
  Node & {
    __typename?: "StoreListing";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    listing?: Maybe<Listing>;
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    vendor?: Maybe<Vendor>;
  };

export type StoreListingCanIArgs = {
  action: CanIAction;
};

export type StoreListingConnection = {
  __typename?: "StoreListingConnection";
  edges: Array<StoreListingEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<StoreListing>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type StoreListingConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type StoreListingConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type StoreListingEdge = {
  __typename?: "StoreListingEdge";
  cursor: Scalars["String"]["output"];
  node: StoreListing;
};

export type StoreListingFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  listing?: InputMaybe<ListingFilter>;
  status?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  vendor?: InputMaybe<VendorFilter>;
};

export type StoreListingInput = {
  description?: InputMaybe<Scalars["String"]["input"]>;
  listingId: Scalars["ID"]["input"];
  status: Scalars["String"]["input"];
  vendorId: Scalars["ID"]["input"];
};

export type StoreLocation = BaseModelInterface &
  Node & {
    __typename?: "StoreLocation";
    address?: Maybe<Scalars["String"]["output"]>;
    audits: AuditConnection;
    brandNames?: Maybe<Scalars["String"]["output"]>;
    brands: BrandConnection;
    businessType?: Maybe<BusinessType>;
    canI: Scalars["Boolean"]["output"];
    clientsStore?: Maybe<ClientsStore>;
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    customers: UserConnection;
    departmentStore?: Maybe<DepartmentStore>;
    distance?: Maybe<Scalars["Float"]["output"]>;
    driverIds: Array<Scalars["ID"]["output"]>;
    drivers: Array<User>;
    employees?: Maybe<Array<AssetRole>>;
    externalStockLocationIds: Array<Scalars["ID"]["output"]>;
    floor?: Maybe<Scalars["Int"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    image?: Maybe<ImageVariation>;
    listings: PosListingConnection;
    locationAddress?: Maybe<Address>;
    managerId?: Maybe<Scalars["ID"]["output"]>;
    map?: Maybe<Scalars["String"]["output"]>;
    orders?: Maybe<OrderConnection>;
    paymentMethods: Array<PaymentMethod>;
    phone?: Maybe<Scalars["String"]["output"]>;
    photo?: Maybe<Scalars["String"]["output"]>;
    position?: Maybe<Scalars["Int"]["output"]>;
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    schedule?: Maybe<Scalars["JSON"]["output"]>;
    stockLocationIds: Array<Scalars["ID"]["output"]>;
    stockLocations: StockLocationConnection;
    store?: Maybe<Brand>;
    timeSheets?: Maybe<Scalars["JSON"]["output"]>;
    title?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    vendor?: Maybe<Vendor>;
    winterTimeSheets?: Maybe<Scalars["JSON"]["output"]>;
  };

export type StoreLocationAuditsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type StoreLocationBrandsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<BrandFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type StoreLocationCanIArgs = {
  action: CanIAction;
};

export type StoreLocationCustomersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<UserFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type StoreLocationEmployeesArgs = {
  role?: InputMaybe<Scalars["String"]["input"]>;
};

export type StoreLocationListingsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PosListingFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type StoreLocationOrdersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OrderFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type StoreLocationPaymentMethodsArgs = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type StoreLocationStockLocationsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<StockLocationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type StoreLocationConnection = {
  __typename?: "StoreLocationConnection";
  edges: Array<StoreLocationEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<StoreLocation>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type StoreLocationConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type StoreLocationConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type StoreLocationEdge = {
  __typename?: "StoreLocationEdge";
  cursor: Scalars["String"]["output"];
  node: StoreLocation;
};

export type StoreLocationFilter = {
  address?: InputMaybe<StringFilter>;
  businessType?: InputMaybe<BusinessTypeFilter>;
  code?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  departmentStore?: InputMaybe<DepartmentStoreFilter>;
  id?: InputMaybe<IdFilter>;
  locationAddress?: InputMaybe<AddressFilter>;
  phone?: InputMaybe<StringFilter>;
  store?: InputMaybe<BrandFilter>;
  stores?: InputMaybe<BrandFilter>;
  title?: InputMaybe<StringFilter>;
  titleOrVendorName?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  vendor?: InputMaybe<VendorFilter>;
  withStatus?: InputMaybe<StringFilter>;
};

export type StoreLocationInputType = {
  businessTypeId?: InputMaybe<Scalars["ID"]["input"]>;
  departmentStoreId?: InputMaybe<Scalars["ID"]["input"]>;
  floor?: InputMaybe<Scalars["Int"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  locationAddressObject?: InputMaybe<AddressInput>;
  map?: InputMaybe<Scalars["String"]["input"]>;
  phone?: InputMaybe<Scalars["String"]["input"]>;
  photo?: InputMaybe<Scalars["Upload"]["input"]>;
  schedule?: InputMaybe<Scalars["JSON"]["input"]>;
  storeIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  timeSheets?: InputMaybe<Scalars["JSON"]["input"]>;
  title: Scalars["String"]["input"];
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
  winterTimeSheets?: InputMaybe<Scalars["JSON"]["input"]>;
};

export type StorePayInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "StorePayInvoice";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceId?: Maybe<Scalars["String"]["output"]>;
    mobile?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type StorePayInvoiceCanIArgs = {
  action: CanIAction;
};

export type StringFilter = {
  blank?: InputMaybe<Scalars["Boolean"]["input"]>;
  cont?: InputMaybe<Scalars["String"]["input"]>;
  end?: InputMaybe<Scalars["String"]["input"]>;
  eq?: InputMaybe<Scalars["String"]["input"]>;
  in?: InputMaybe<Array<Scalars["String"]["input"]>>;
  notEq?: InputMaybe<Scalars["String"]["input"]>;
  notIn?: InputMaybe<Array<Scalars["String"]["input"]>>;
  notNull?: InputMaybe<Scalars["Boolean"]["input"]>;
  null?: InputMaybe<Scalars["Boolean"]["input"]>;
  start?: InputMaybe<Scalars["String"]["input"]>;
};

export type Subscription = {
  __typename?: "Subscription";
  businessClientUpdated?: Maybe<BusinessClient>;
  chatRoomUpdated?: Maybe<Room>;
  dispatchCall?: Maybe<DispatchCall>;
  inventorySwapRequested?: Maybe<Order>;
  jobUpdated?: Maybe<JobLog>;
  newChatMessage?: Maybe<Message>;
  newNotification?: Maybe<Notification>;
  notificationUpdated?: Maybe<Scalars["Int"]["output"]>;
  orderUpdated?: Maybe<Order>;
};

export type SubscriptionBusinessClientUpdatedArgs = {
  id: Scalars["ID"]["input"];
};

export type SubscriptionInventorySwapRequestedArgs = {
  id: Scalars["ID"]["input"];
};

export type SubscriptionJobUpdatedArgs = {
  id: Scalars["ID"]["input"];
};

export type SubscriptionOrderUpdatedArgs = {
  id: Scalars["ID"]["input"];
};

export type SubscriptionManifest = Node &
  ProductManifestInterface & {
    __typename?: "SubscriptionManifest";
    brand?: Maybe<Brand>;
    canSupply?: Maybe<Scalars["Boolean"]["output"]>;
    expireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    fulfillDuration?: Maybe<Scalars["Int"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    image?: Maybe<Scalars["String"]["output"]>;
    listings: Array<Listing>;
    maxQty?: Maybe<Scalars["Int"]["output"]>;
    name: Scalars["String"]["output"];
    optionsText?: Maybe<Scalars["String"]["output"]>;
    price: Scalars["Float"]["output"];
    productCat?: Maybe<Scalars["String"]["output"]>;
    sku?: Maybe<Scalars["String"]["output"]>;
    slug: Scalars["String"]["output"];
    subscriptionType: Scalars["String"]["output"];
    totalOnHand?: Maybe<Scalars["Int"]["output"]>;
    vendor?: Maybe<Vendor>;
    weight?: Maybe<Scalars["Float"]["output"]>;
  };

export type SupplierCategory = BaseModelInterface &
  Node & {
    __typename?: "SupplierCategory";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type SupplierCategoryCanIArgs = {
  action: CanIAction;
};

export type SupplierCategoryConnection = {
  __typename?: "SupplierCategoryConnection";
  edges: Array<SupplierCategoryEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<SupplierCategory>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type SupplierCategoryConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type SupplierCategoryConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type SupplierCategoryEdge = {
  __typename?: "SupplierCategoryEdge";
  cursor: Scalars["String"]["output"];
  node: SupplierCategory;
};

export type SupplierCategoryFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type SupplySegment = BaseModelInterface &
  Node & {
    __typename?: "SupplySegment";
    active: Scalars["Boolean"]["output"];
    businessUsers: EmployeeConnection;
    businessUsersSegments: BusinessUsersSegmentConnection;
    canI: Scalars["Boolean"]["output"];
    clients: BusinessClientConnection;
    clientsCount: Scalars["Int"]["output"];
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    createdBy?: Maybe<User>;
    createdById?: Maybe<Scalars["ID"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name: Scalars["String"]["output"];
    originId?: Maybe<Scalars["ID"]["output"]>;
    preferences: Scalars["JSON"]["output"];
    promotions: PromotionConnection;
    segmentClients: SegmentClientConnection;
    type?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userSegments: UserSegmentConnection;
    users: UserConnection;
    usersCount: Scalars["Int"]["output"];
    vendor: Vendor;
    vendorId: Scalars["ID"]["output"];
    websiteIds: Array<Scalars["ID"]["output"]>;
    websites: Array<Website>;
    whiteLists: SegmentWhiteListConnection;
  };

export type SupplySegmentBusinessUsersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<BusinessUserFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type SupplySegmentBusinessUsersSegmentsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<BusinessUsersSegmentFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type SupplySegmentCanIArgs = {
  action: CanIAction;
};

export type SupplySegmentClientsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<BusinessClientFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type SupplySegmentPromotionsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  dateType?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PromotionFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  from?: InputMaybe<Scalars["String"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  to?: InputMaybe<Scalars["String"]["input"]>;
};

export type SupplySegmentSegmentClientsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<SegmentClientFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type SupplySegmentUserSegmentsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<UserSegmentFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type SupplySegmentUsersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<UserFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type SupplySegmentWhiteListsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<SegmentWhiteListFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type SupplySegmentConnection = {
  __typename?: "SupplySegmentConnection";
  edges: Array<SupplySegmentEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<SupplySegment>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type SupplySegmentConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type SupplySegmentConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type SupplySegmentEdge = {
  __typename?: "SupplySegmentEdge";
  cursor: Scalars["String"]["output"];
  node: SupplySegment;
};

export type SupplySegmentFilter = {
  active?: InputMaybe<BoolFilter>;
  clientsCount?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  nameOrCode?: InputMaybe<StringFilter>;
  type?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  usersCount?: InputMaybe<IntFilter>;
};

export type SupplySegmentRestriction = BaseModelInterface &
  Node & {
    __typename?: "SupplySegmentRestriction";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    createdBy: User;
    description?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    sourceId: Scalars["ID"]["output"];
    sourceType: Scalars["String"]["output"];
    supplySegment: SupplySegment;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type SupplySegmentRestrictionCanIArgs = {
  action: CanIAction;
};

export enum SwapActionEnum {
  Discard = "discard",
  Swap = "swap",
}

export type SwapItemInput = {
  quantity: Scalars["Int"]["input"];
  variantId: Scalars["ID"]["input"];
};

export type SyncLog = BaseModelInterface &
  Node & {
    __typename?: "SyncLog";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["JSON"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    status?: Maybe<Scalars["String"]["output"]>;
    title?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    vendor?: Maybe<Vendor>;
  };

export type SyncLogCanIArgs = {
  action: CanIAction;
};

export type SyncLogConnection = {
  __typename?: "SyncLogConnection";
  edges: Array<SyncLogEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<SyncLog>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type SyncLogConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type SyncLogConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type SyncLogEdge = {
  __typename?: "SyncLogEdge";
  cursor: Scalars["String"]["output"];
  node: SyncLog;
};

export type SyncLogFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  status?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type Tag = Node & {
  __typename?: "Tag";
  articlesCount?: Maybe<Scalars["Int"]["output"]>;
  authorsCount?: Maybe<Scalars["Int"]["output"]>;
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  impressionsCount?: Maybe<Scalars["Int"]["output"]>;
  name?: Maybe<Scalars["String"]["output"]>;
  taggingsCount?: Maybe<Scalars["Int"]["output"]>;
};

export type TagConnection = {
  __typename?: "TagConnection";
  edges: Array<TagEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Tag>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type TagConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type TagConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type TagCount = Node & {
  __typename?: "TagCount";
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  name?: Maybe<Scalars["String"]["output"]>;
  taggingsCount?: Maybe<Scalars["Int"]["output"]>;
};

export type TagEdge = {
  __typename?: "TagEdge";
  cursor: Scalars["String"]["output"];
  node: Tag;
};

export type TagFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type Target = Order;

export type TaxCategory = BaseModelInterface &
  Node & {
    __typename?: "TaxCategory";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    isDefault?: Maybe<Scalars["Boolean"]["output"]>;
    name: Scalars["String"]["output"];
    taxCode?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
    websiteId?: Maybe<Scalars["ID"]["output"]>;
  };

export type TaxCategoryCanIArgs = {
  action: CanIAction;
};

export type TaxCategoryConnection = {
  __typename?: "TaxCategoryConnection";
  edges: Array<TaxCategoryEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<TaxCategory>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type TaxCategoryConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type TaxCategoryConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type TaxCategoryEdge = {
  __typename?: "TaxCategoryEdge";
  cursor: Scalars["String"]["output"];
  node: TaxCategory;
};

export type TaxRate = BaseModelInterface &
  Node & {
    __typename?: "TaxRate";
    amount: Scalars["Float"]["output"];
    calculatorAttributes?: Maybe<Scalars["JSON"]["output"]>;
    calculatorType?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    includedInPrice: Scalars["Boolean"]["output"];
    name: Scalars["String"]["output"];
    showRateInLabel: Scalars["Boolean"]["output"];
    taxCategory?: Maybe<TaxCategory>;
    taxCategoryId?: Maybe<Scalars["ID"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
    websiteId?: Maybe<Scalars["ID"]["output"]>;
    zone?: Maybe<Zone>;
    zoneId?: Maybe<Scalars["ID"]["output"]>;
  };

export type TaxRateCanIArgs = {
  action: CanIAction;
};

export type TaxRateConnection = {
  __typename?: "TaxRateConnection";
  edges: Array<TaxRateEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<TaxRate>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type TaxRateConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type TaxRateConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type TaxRateEdge = {
  __typename?: "TaxRateEdge";
  cursor: Scalars["String"]["output"];
  node: TaxRate;
};

export type Taxon = BaseModelInterface &
  Node & {
    __typename?: "Taxon";
    absoluteTaxCode?: Maybe<Scalars["String"]["output"]>;
    bannerLink?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    children: Array<Taxon>;
    childrenCount: Scalars["Int"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["JSON"]["output"]>;
    depth?: Maybe<Scalars["Int"]["output"]>;
    description?: Maybe<Scalars["String"]["output"]>;
    expanded?: Maybe<Scalars["Boolean"]["output"]>;
    gid: Scalars["ID"]["output"];
    hasChildren: Scalars["Boolean"]["output"];
    icon?: Maybe<Scalars["String"]["output"]>;
    iconUpdatedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    id: Scalars["ID"]["output"];
    imeiCodesEnabled?: Maybe<Scalars["Boolean"]["output"]>;
    isAdult?: Maybe<Scalars["Boolean"]["output"]>;
    isDisabled?: Maybe<Scalars["Boolean"]["output"]>;
    keywords: Array<Keyword>;
    labelCodesEnabled?: Maybe<Scalars["Boolean"]["output"]>;
    lft?: Maybe<Scalars["Int"]["output"]>;
    listings: ListingConnection;
    listingsCount: Scalars["Int"]["output"];
    metaDescription?: Maybe<Scalars["String"]["output"]>;
    metaKeywords?: Maybe<Scalars["String"]["output"]>;
    metaTitle?: Maybe<Scalars["String"]["output"]>;
    name?: Maybe<Scalars["String"]["output"]>;
    optionTypes: Array<OptionType>;
    parent?: Maybe<Taxon>;
    parentId?: Maybe<Scalars["ID"]["output"]>;
    permalink: Scalars["String"]["output"];
    position?: Maybe<Scalars["Int"]["output"]>;
    prettyName?: Maybe<Scalars["String"]["output"]>;
    properties: Array<Property>;
    propertyIds: Array<Scalars["ID"]["output"]>;
    prototypes: Array<Prototype>;
    queryString?: Maybe<Scalars["String"]["output"]>;
    rgt?: Maybe<Scalars["Int"]["output"]>;
    seoTitle?: Maybe<Scalars["String"]["output"]>;
    taxCode?: Maybe<Scalars["String"]["output"]>;
    translationEn?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type TaxonCanIArgs = {
  action: CanIAction;
};

export type TaxonListingsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ListingFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type TaxonNameArgs = {
  fallback?: InputMaybe<Scalars["String"]["input"]>;
  locale?: InputMaybe<Scalars["String"]["input"]>;
};

export type TaxonConnection = {
  __typename?: "TaxonConnection";
  edges: Array<TaxonEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Taxon>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type TaxonConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type TaxonConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type TaxonEdge = {
  __typename?: "TaxonEdge";
  cursor: Scalars["String"]["output"];
  node: Taxon;
};

export type TaxonFilter = {
  createdAt?: InputMaybe<DateFilter>;
  depth?: InputMaybe<IntFilter>;
  id?: InputMaybe<IdFilter>;
  listingsCount?: InputMaybe<IntFilter>;
  name?: InputMaybe<StringFilter>;
  parent?: InputMaybe<TaxonFilter>;
  parentId?: InputMaybe<IdFilter>;
  permalink?: InputMaybe<StringFilter>;
  position?: InputMaybe<IntFilter>;
  prettyName?: InputMaybe<StringFilter>;
  taxCode?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  website?: InputMaybe<WebsiteFilter>;
  withListings?: InputMaybe<BoolFilter>;
};

export type TdbmLeaseSource = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "TdbmLeaseSource";
    acceptedMonths?: Maybe<Scalars["Int"]["output"]>;
    amount?: Maybe<Scalars["Float"]["output"]>;
    bankMessage?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    customerFee?: Maybe<Scalars["Float"]["output"]>;
    downPayment?: Maybe<Scalars["Float"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    incomeConfirm?: Maybe<Scalars["Boolean"]["output"]>;
    interest?: Maybe<Scalars["Float"]["output"]>;
    limit?: Maybe<Scalars["Float"]["output"]>;
    longMessage?: Maybe<Scalars["String"]["output"]>;
    merchantFee?: Maybe<Scalars["Float"]["output"]>;
    months?: Maybe<Scalars["Int"]["output"]>;
    paymentMethod: PaymentMethod;
    repaymentDay?: Maybe<Scalars["Int"]["output"]>;
    requirements?: Maybe<Scalars["String"]["output"]>;
    termsAccepted?: Maybe<Scalars["Boolean"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user: User;
  };

export type TdbmLeaseSourceCanIArgs = {
  action: CanIAction;
};

export type TecArticle = BaseModelInterface &
  Node & {
    __typename?: "TecArticle";
    articleCriterias: Array<TecArticleCriteria>;
    assemblyGroups: Array<TecAssemblyGroup>;
    attributes: Array<TecAttribute>;
    brand?: Maybe<TecBrand>;
    brandId: Scalars["ID"]["output"];
    canI: Scalars["Boolean"]["output"];
    category?: Maybe<TecCategory>;
    categoryId: Scalars["ID"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    images?: Maybe<Scalars["JSON"]["output"]>;
    info?: Maybe<Scalars["JSON"]["output"]>;
    linkages: Array<TecLinkage>;
    manufacturer?: Maybe<TecManufacturer>;
    manufacturerId: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    number?: Maybe<Scalars["String"]["output"]>;
    oemNumbers: Array<TecOemNumber>;
    parts: Array<TecPart>;
    price?: Maybe<Scalars["Float"]["output"]>;
    state?: Maybe<Scalars["String"]["output"]>;
    stock?: Maybe<Scalars["Float"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type TecArticleCanIArgs = {
  action: CanIAction;
};

export type TecArticleConnection = {
  __typename?: "TecArticleConnection";
  edges: Array<TecArticleEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<TecArticle>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type TecArticleConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type TecArticleConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type TecArticleCriteria = BaseModelInterface &
  Node & {
    __typename?: "TecArticleCriteria";
    article: TecArticle;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    criteria: TecCriteria;
    display: Scalars["Boolean"]["output"];
    formattedValue?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    interval: Scalars["Boolean"]["output"];
    mandatory: Scalars["Boolean"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    value: Scalars["String"]["output"];
  };

export type TecArticleCriteriaCanIArgs = {
  action: CanIAction;
};

export type TecArticleEdge = {
  __typename?: "TecArticleEdge";
  cursor: Scalars["String"]["output"];
  node: TecArticle;
};

export type TecArticleFilter = {
  brand?: InputMaybe<TecBrandFilter>;
  category?: InputMaybe<TecCategoryFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  manufacturer?: InputMaybe<TecManufacturerFilter>;
  name?: InputMaybe<StringFilter>;
  number?: InputMaybe<StringFilter>;
  state?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type TecAssemblyGroup = BaseModelInterface &
  Node & {
    __typename?: "TecAssemblyGroup";
    articles: TecArticleConnection;
    articlesCount: Scalars["Int"]["output"];
    canI: Scalars["Boolean"]["output"];
    children: TecAssemblyGroupConnection;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    hasChildren?: Maybe<Scalars["Boolean"]["output"]>;
    icon?: Maybe<Scalars["String"]["output"]>;
    id: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    parentId?: Maybe<Scalars["ID"]["output"]>;
    permalink?: Maybe<Scalars["String"]["output"]>;
    position?: Maybe<Scalars["Int"]["output"]>;
    presentation?: Maybe<Scalars["String"]["output"]>;
    slug?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type TecAssemblyGroupArticlesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TecArticleFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type TecAssemblyGroupCanIArgs = {
  action: CanIAction;
};

export type TecAssemblyGroupChildrenArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TecAssemblyGroupFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type TecAssemblyGroupConnection = {
  __typename?: "TecAssemblyGroupConnection";
  edges: Array<TecAssemblyGroupEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<TecAssemblyGroup>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type TecAssemblyGroupConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type TecAssemblyGroupConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type TecAssemblyGroupEdge = {
  __typename?: "TecAssemblyGroupEdge";
  cursor: Scalars["String"]["output"];
  node: TecAssemblyGroup;
};

export type TecAssemblyGroupFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  parentId?: InputMaybe<IdFilter>;
  presentation?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type TecAttribute = BaseModelInterface &
  Node & {
    __typename?: "TecAttribute";
    article: TecArticle;
    articleId: Scalars["ID"]["output"];
    attributeType: Scalars["String"]["output"];
    blockNo?: Maybe<Scalars["Int"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    isConditional: Scalars["Boolean"]["output"];
    isInterval: Scalars["Boolean"]["output"];
    isLinked: Scalars["Boolean"]["output"];
    name: Scalars["String"]["output"];
    shortName?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    value?: Maybe<Scalars["String"]["output"]>;
  };

export type TecAttributeCanIArgs = {
  action: CanIAction;
};

export type TecBrand = BaseModelInterface &
  Node & {
    __typename?: "TecBrand";
    articles: TecArticleConnection;
    articlesCount?: Maybe<Scalars["Int"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    companyName?: Maybe<Scalars["String"]["output"]>;
    country?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    logo?: Maybe<Scalars["String"]["output"]>;
    name?: Maybe<Scalars["String"]["output"]>;
    phone?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Scalars["String"]["output"]>;
    zip?: Maybe<Scalars["String"]["output"]>;
  };

export type TecBrandArticlesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TecArticleFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type TecBrandCanIArgs = {
  action: CanIAction;
};

export type TecBrandConnection = {
  __typename?: "TecBrandConnection";
  edges: Array<TecBrandEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<TecBrand>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type TecBrandConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type TecBrandConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type TecBrandEdge = {
  __typename?: "TecBrandEdge";
  cursor: Scalars["String"]["output"];
  node: TecBrand;
};

export type TecBrandFilter = {
  articlesCount?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  phone?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  website?: InputMaybe<StringFilter>;
  zip?: InputMaybe<StringFilter>;
};

export type TecCategory = BaseModelInterface &
  Node & {
    __typename?: "TecCategory";
    articles: TecArticleConnection;
    assemblyGroup?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    designation?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    masterDesignation?: Maybe<Scalars["String"]["output"]>;
    parentId?: Maybe<Scalars["ID"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    usageDesignation?: Maybe<Scalars["String"]["output"]>;
  };

export type TecCategoryArticlesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TecArticleFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type TecCategoryCanIArgs = {
  action: CanIAction;
};

export type TecCategoryConnection = {
  __typename?: "TecCategoryConnection";
  edges: Array<TecCategoryEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<TecCategory>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type TecCategoryConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type TecCategoryConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type TecCategoryEdge = {
  __typename?: "TecCategoryEdge";
  cursor: Scalars["String"]["output"];
  node: TecCategory;
};

export type TecCategoryFilter = {
  assemblyGroup?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  designation?: InputMaybe<StringFilter>;
  id?: InputMaybe<StringFilter>;
  masterDesignation?: InputMaybe<StringFilter>;
  parentId?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  usageDesignation?: InputMaybe<StringFilter>;
};

export type TecCriteria = BaseModelInterface &
  Node & {
    __typename?: "TecCriteria";
    abbrDescription?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    criteriaType?: Maybe<Scalars["String"]["output"]>;
    description: Scalars["String"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    position?: Maybe<Scalars["Int"]["output"]>;
    unitDescription?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type TecCriteriaCanIArgs = {
  action: CanIAction;
};

export type TecLinkage = BaseModelInterface &
  Node & {
    __typename?: "TecLinkage";
    article: TecArticle;
    articleId: Scalars["ID"]["output"];
    bodyStyle?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    constructionFrom?: Maybe<Scalars["String"]["output"]>;
    constructionTo?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    cylinderCapacity?: Maybe<Scalars["Float"]["output"]>;
    cylinderCapacityLiter?: Maybe<Scalars["Float"]["output"]>;
    cylinders?: Maybe<Scalars["Int"]["output"]>;
    description?: Maybe<Scalars["String"]["output"]>;
    driveType?: Maybe<Scalars["String"]["output"]>;
    engineType?: Maybe<Scalars["String"]["output"]>;
    fuelMixtureFormationType?: Maybe<Scalars["String"]["output"]>;
    fuelType?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    images?: Maybe<Scalars["JSON"]["output"]>;
    manufacturer?: Maybe<TecManufacturer>;
    manufacturerId: Scalars["ID"]["output"];
    modelSeries?: Maybe<TecModelSeries>;
    modelSeriesId: Scalars["ID"]["output"];
    powerHpFrom?: Maybe<Scalars["Int"]["output"]>;
    powerHpTo?: Maybe<Scalars["Int"]["output"]>;
    powerKwFrom?: Maybe<Scalars["Int"]["output"]>;
    powerKwTo?: Maybe<Scalars["Int"]["output"]>;
    subTargetType?: Maybe<Scalars["String"]["output"]>;
    targetType?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    vehicle?: Maybe<TecVehicle>;
  };

export type TecLinkageCanIArgs = {
  action: CanIAction;
};

export type TecLinkageConnection = {
  __typename?: "TecLinkageConnection";
  edges: Array<TecLinkageEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<TecLinkage>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type TecLinkageConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type TecLinkageConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type TecLinkageEdge = {
  __typename?: "TecLinkageEdge";
  cursor: Scalars["String"]["output"];
  node: TecLinkage;
};

export type TecLinkageFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  number?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type TecManufacturer = BaseModelInterface &
  Node & {
    __typename?: "TecManufacturer";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type TecManufacturerCanIArgs = {
  action: CanIAction;
};

export type TecManufacturerConnection = {
  __typename?: "TecManufacturerConnection";
  edges: Array<TecManufacturerEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<TecManufacturer>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type TecManufacturerConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type TecManufacturerConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type TecManufacturerEdge = {
  __typename?: "TecManufacturerEdge";
  cursor: Scalars["String"]["output"];
  node: TecManufacturer;
};

export type TecManufacturerFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<StringFilter>;
  modelSeries?: InputMaybe<TecModelSeriesFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type TecModelSeries = BaseModelInterface &
  Node & {
    __typename?: "TecModelSeries";
    articles: TecArticleConnection;
    canI: Scalars["Boolean"]["output"];
    constructionFrom?: Maybe<Scalars["String"]["output"]>;
    constructionTo?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data: Scalars["JSON"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    engineType?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    images: Scalars["JSON"]["output"];
    linkages: TecLinkageConnection;
    manufacturer: TecManufacturer;
    manufacturers: TecManufacturerConnection;
    name?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type TecModelSeriesArticlesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TecArticleFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type TecModelSeriesCanIArgs = {
  action: CanIAction;
};

export type TecModelSeriesLinkagesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TecLinkageFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type TecModelSeriesManufacturersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TecManufacturerFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type TecModelSeriesConnection = {
  __typename?: "TecModelSeriesConnection";
  edges: Array<TecModelSeriesEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<TecModelSeries>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type TecModelSeriesConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type TecModelSeriesConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type TecModelSeriesEdge = {
  __typename?: "TecModelSeriesEdge";
  cursor: Scalars["String"]["output"];
  node: TecModelSeries;
};

export type TecModelSeriesFilter = {
  constructionFrom?: InputMaybe<StringFilter>;
  constructionTo?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  engineType?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  manufacturer?: InputMaybe<TecManufacturerFilter>;
  name?: InputMaybe<StringFilter>;
  nameOrDescription?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type TecOemNumber = BaseModelInterface &
  Node & {
    __typename?: "TecOemNumber";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    manufacturer: TecManufacturer;
    number: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type TecOemNumberCanIArgs = {
  action: CanIAction;
};

export type TecPart = BaseModelInterface &
  Node & {
    __typename?: "TecPart";
    article: TecArticle;
    articleId: Scalars["ID"]["output"];
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    packingUnit?: Maybe<Scalars["Int"]["output"]>;
    part: TecArticle;
    partId: Scalars["ID"]["output"];
    quantity?: Maybe<Scalars["Int"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type TecPartCanIArgs = {
  action: CanIAction;
};

export type TecPrice = BaseModelInterface &
  Node & {
    __typename?: "TecPrice";
    article?: Maybe<TecArticle>;
    brand: TecBrand;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    number: Scalars["String"]["output"];
    price: Scalars["Float"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type TecPriceCanIArgs = {
  action: CanIAction;
};

export type TecPriceFilter = {
  article?: InputMaybe<TecArticleFilter>;
  brand?: InputMaybe<TecBrandFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  number?: InputMaybe<StringFilter>;
  price?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type TecStock = BaseModelInterface &
  Node & {
    __typename?: "TecStock";
    article?: Maybe<TecArticle>;
    brand: TecBrand;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    number: Scalars["String"]["output"];
    stock: Scalars["Int"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type TecStockCanIArgs = {
  action: CanIAction;
};

export type TecStockFilter = {
  article?: InputMaybe<TecArticleFilter>;
  brand?: InputMaybe<TecBrandFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  number?: InputMaybe<StringFilter>;
  stock?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type TecVehicle = BaseModelInterface &
  Node & {
    __typename?: "TecVehicle";
    brakeSystem?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    constructionType?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    cylinder?: Maybe<Scalars["Int"]["output"]>;
    cylinderCap?: Maybe<Scalars["Int"]["output"]>;
    cylinderCapL?: Maybe<Scalars["Int"]["output"]>;
    docId?: Maybe<Scalars["String"]["output"]>;
    fuelType?: Maybe<Scalars["String"]["output"]>;
    fuelTypeProcess?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    impulsionType?: Maybe<Scalars["String"]["output"]>;
    kbaNo?: Maybe<Array<Scalars["String"]["output"]>>;
    manufacturer?: Maybe<TecManufacturer>;
    manufacturerId?: Maybe<Scalars["String"]["output"]>;
    model?: Maybe<TecModelSeries>;
    modelId?: Maybe<Scalars["ID"]["output"]>;
    motorCode?: Maybe<Array<Scalars["String"]["output"]>>;
    motorId?: Maybe<Scalars["String"]["output"]>;
    motorType?: Maybe<Scalars["String"]["output"]>;
    name?: Maybe<Scalars["String"]["output"]>;
    prototype?: Maybe<Array<Scalars["String"]["output"]>>;
    rmiTypeId?: Maybe<Scalars["ID"]["output"]>;
    typeNumber?: Maybe<Scalars["Int"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    valves?: Maybe<Scalars["Int"]["output"]>;
    yearFrom?: Maybe<Scalars["ISO8601Date"]["output"]>;
    yearTo?: Maybe<Scalars["ISO8601Date"]["output"]>;
  };

export type TecVehicleCanIArgs = {
  action: CanIAction;
};

export type Template = BaseModelInterface &
  Node & {
    __typename?: "Template";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    html?: Maybe<Scalars["String"]["output"]>;
    id: Scalars["ID"]["output"];
    name?: Maybe<Scalars["String"]["output"]>;
    text?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
  };

export type TemplateCanIArgs = {
  action: CanIAction;
};

export type TemplateConnection = {
  __typename?: "TemplateConnection";
  edges: Array<TemplateEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Template>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type TemplateConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type TemplateConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type TemplateEdge = {
  __typename?: "TemplateEdge";
  cursor: Scalars["String"]["output"];
  node: Template;
};

export type TicketTemplate = BaseModelInterface &
  Node & {
    __typename?: "TicketTemplate";
    body?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    height?: Maybe<Scalars["Int"]["output"]>;
    id: Scalars["ID"]["output"];
    pos?: Maybe<Scalars["Boolean"]["output"]>;
    sku?: Maybe<Scalars["String"]["output"]>;
    storeLocation?: Maybe<StoreLocation>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    vendor?: Maybe<Vendor>;
    website?: Maybe<Website>;
    width?: Maybe<Scalars["Int"]["output"]>;
  };

export type TicketTemplateCanIArgs = {
  action: CanIAction;
};

export type TicketTemplateConnection = {
  __typename?: "TicketTemplateConnection";
  edges: Array<TicketTemplateEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<TicketTemplate>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type TicketTemplateConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type TicketTemplateConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type TicketTemplateEdge = {
  __typename?: "TicketTemplateEdge";
  cursor: Scalars["String"]["output"];
  node: TicketTemplate;
};

export type TicketTemplateFilter = {
  createdAt?: InputMaybe<DateFilter>;
  height?: InputMaybe<IntFilter>;
  id?: InputMaybe<IdFilter>;
  pos?: InputMaybe<BoolFilter>;
  sku?: InputMaybe<StringFilter>;
  storeLocation?: InputMaybe<StoreLocationFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  vendor?: InputMaybe<VendorFilter>;
  website?: InputMaybe<WebsiteFilter>;
  width?: InputMaybe<IntFilter>;
};

export type TicketType = Node & {
  __typename?: "TicketType";
  area?: Maybe<Scalars["String"]["output"]>;
  cinema: Cinema;
  code?: Maybe<Scalars["String"]["output"]>;
  description?: Maybe<Scalars["String"]["output"]>;
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  idx?: Maybe<Scalars["String"]["output"]>;
  isComplimentary?: Maybe<Scalars["Boolean"]["output"]>;
  isPackage?: Maybe<Scalars["Boolean"]["output"]>;
  isRedemption?: Maybe<Scalars["Boolean"]["output"]>;
  movieTickets: MovieTicket;
  name?: Maybe<Scalars["String"]["output"]>;
  price?: Maybe<Scalars["Int"]["output"]>;
  session: Session;
  tax?: Maybe<Scalars["Int"]["output"]>;
};

export type TokiInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "TokiInvoice";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceId?: Maybe<Scalars["String"]["output"]>;
    invoiceNumber?: Maybe<Scalars["String"]["output"]>;
    mobile?: Maybe<Scalars["String"]["output"]>;
    requestId?: Maybe<Scalars["String"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type TokiInvoiceCanIArgs = {
  action: CanIAction;
};

export type TrackableType = BaseModelInterface &
  Node & {
    __typename?: "TrackableType";
    acceptedOrderCount?: Maybe<Scalars["Int"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    distance?: Maybe<Scalars["Float"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    isAvailable: Scalars["Boolean"]["output"];
    lastTrackingDate?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    latitude?: Maybe<Scalars["String"]["output"]>;
    longitude?: Maybe<Scalars["String"]["output"]>;
    orderCount?: Maybe<Scalars["Int"]["output"]>;
    rejectedOrderCount?: Maybe<Scalars["Int"]["output"]>;
    trackings: TrackingTypeConnection;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    website?: Maybe<Website>;
  };

export type TrackableTypeCanIArgs = {
  action: CanIAction;
};

export type TrackableTypeTrackingsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type TrackableTypeConnection = {
  __typename?: "TrackableTypeConnection";
  edges: Array<TrackableTypeEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<TrackableType>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type TrackableTypeConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type TrackableTypeConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type TrackableTypeEdge = {
  __typename?: "TrackableTypeEdge";
  cursor: Scalars["String"]["output"];
  node: TrackableType;
};

export type TrackingTarget = LineItem | Order;

export type TrackingType = BaseModelInterface &
  Node & {
    __typename?: "TrackingType";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    latitude?: Maybe<Scalars["String"]["output"]>;
    longitude?: Maybe<Scalars["String"]["output"]>;
    trackable: TrackableType;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type TrackingTypeCanIArgs = {
  action: CanIAction;
};

export type TrackingTypeConnection = {
  __typename?: "TrackingTypeConnection";
  edges: Array<TrackingTypeEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<TrackingType>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type TrackingTypeConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type TrackingTypeConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type TrackingTypeEdge = {
  __typename?: "TrackingTypeEdge";
  cursor: Scalars["String"]["output"];
  node: TrackingType;
};

export type Transaction = BaseModelInterface &
  Node & {
    __typename?: "Transaction";
    action: Scalars["String"]["output"];
    amount: Scalars["Float"]["output"];
    amountLeft?: Maybe<Scalars["Float"]["output"]>;
    amountRepaid?: Maybe<Scalars["Float"]["output"]>;
    audits: AuditConnection;
    authorizedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    authorizedBy?: Maybe<User>;
    authorizedById?: Maybe<Scalars["ID"]["output"]>;
    balance?: Maybe<Scalars["Float"]["output"]>;
    bonus: Scalars["Float"]["output"];
    canI: Scalars["Boolean"]["output"];
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    currency: Scalars["String"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    dueDate?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    isCredit: Scalars["Boolean"]["output"];
    isDebit: Scalars["Boolean"]["output"];
    isLoan: Scalars["Boolean"]["output"];
    isRepaid?: Maybe<Scalars["Boolean"]["output"]>;
    loan?: Maybe<Transaction>;
    loanStatus: Scalars["String"]["output"];
    number?: Maybe<Scalars["String"]["output"]>;
    repayments: Array<Transaction>;
    source?: Maybe<Source>;
    status: Scalars["String"]["output"];
    transactionAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    transactionDate?: Maybe<Scalars["ISO8601Date"]["output"]>;
    typeCode: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    verificationSentAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    wallet: Wallet;
    walletCode: Scalars["String"]["output"];
    website: Website;
  };

export type TransactionAuditsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AuditFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type TransactionCanIArgs = {
  action: CanIAction;
};

export type TransactionConnection = {
  __typename?: "TransactionConnection";
  edges: Array<TransactionEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Transaction>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type TransactionConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type TransactionConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type TransactionEdge = {
  __typename?: "TransactionEdge";
  cursor: Scalars["String"]["output"];
  node: Transaction;
};

export type TransactionFilter = {
  action?: InputMaybe<EnumStringFilter>;
  amount?: InputMaybe<IntFilter>;
  authorizedAt?: InputMaybe<DateFilter>;
  balance?: InputMaybe<IntFilter>;
  bonus?: InputMaybe<IntFilter>;
  code?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  description?: InputMaybe<StringFilter>;
  dueDate?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  loanStatus?: InputMaybe<EnumStringFilter>;
  number?: InputMaybe<StringFilter>;
  status?: InputMaybe<EnumStringFilter>;
  transactionAt?: InputMaybe<DateFilter>;
  transactionDate?: InputMaybe<DateFilter>;
  typeCode?: InputMaybe<EnumStringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  wallet?: InputMaybe<WalletFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type TransactionRepay = {
  __typename?: "TransactionRepay";
  amountRepay: Scalars["Float"]["output"];
  transaction: Transaction;
};

export type TransactionRepayPreview = {
  __typename?: "TransactionRepayPreview";
  amount: Scalars["Float"]["output"];
  diffAmount: Scalars["Float"]["output"];
  payableAmount: Scalars["Float"]["output"];
  repayments: Array<TransactionRepay>;
};

export type TransactionRepayPreviewInput = {
  amount: Scalars["Float"]["input"];
  amountLeft?: InputMaybe<Scalars["Float"]["input"]>;
  amountRepay?: InputMaybe<Scalars["Float"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type TranslationInput = {
  _destroy?: InputMaybe<Scalars["Boolean"]["input"]>;
  body?: InputMaybe<Scalars["String"]["input"]>;
  locale: Scalars["String"]["input"];
  metaDescription?: InputMaybe<Scalars["String"]["input"]>;
  metaKeywords?: InputMaybe<Scalars["String"]["input"]>;
  metaTitle?: InputMaybe<Scalars["String"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  title?: InputMaybe<Scalars["String"]["input"]>;
};

export type TutDeliveryPackageFilter = {
  courier?: InputMaybe<StringFilter>;
  courierOrdNumber?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  items?: InputMaybe<TutDeliveryPackageItemFilter>;
  merchant?: InputMaybe<MerchantFilter>;
  number?: InputMaybe<StringFilter>;
  order?: InputMaybe<OrderFilter>;
  sender?: InputMaybe<UserFilter>;
  senderId?: InputMaybe<IdFilter>;
  sendingQueuedAt?: InputMaybe<DateFilter>;
  sendingStatus?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringFilter>;
  tutPup?: InputMaybe<BoolFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type TutDeliveryPackageItemFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  parcelNumber?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export enum TypeCodeEnum {
  Credit = "credit",
  Debit = "debit",
}

export type UbcAddress = Node & {
  __typename?: "UbcAddress";
  address?: Maybe<Addressable>;
  addressId?: Maybe<Scalars["ID"]["output"]>;
  addressType?: Maybe<Scalars["String"]["output"]>;
  gid: Scalars["ID"]["output"];
  id: Scalars["ID"]["output"];
  source?: Maybe<Scalars["JSON"]["output"]>;
  ubcAddressId?: Maybe<Scalars["ID"]["output"]>;
};

export type UpdateWalletVerificationInput = {
  action: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type User = BaseModelInterface &
  Node & {
    __typename?: "User";
    accessToken?: Maybe<Scalars["String"]["output"]>;
    airTickets: AirTicketConnection;
    appsflyerAppId?: Maybe<Scalars["String"]["output"]>;
    appsflyerId?: Maybe<Scalars["String"]["output"]>;
    assetRoles: AssetRoleConnection;
    audits: AuditConnection;
    authenticationToken?: Maybe<Scalars["String"]["output"]>;
    avatar?: Maybe<Scalars["String"]["output"]>;
    averageRating: Scalars["Float"]["output"];
    bankAccounts: Scalars["JSON"]["output"];
    banks: Array<Bank>;
    billAddress?: Maybe<Address>;
    billAddressId?: Maybe<Scalars["ID"]["output"]>;
    birthday?: Maybe<Scalars["ISO8601Date"]["output"]>;
    businessEmployments: Array<Employee>;
    businessSuppliers?: Maybe<BusinessClientConnection>;
    canI: Scalars["Boolean"]["output"];
    cancelledCommercesCount: Scalars["Int"]["output"];
    cancelledPurchasesCount: Scalars["Int"]["output"];
    cards: Array<Card>;
    claimedOrders: OrderConnection;
    clickMiniAppAcceptance?: Maybe<Scalars["Boolean"]["output"]>;
    commerceOrders: OrderConnection;
    confirmationSentAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    confirmedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    coupons: CouponConnection;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    currentEvent?: Maybe<Scalars["JSON"]["output"]>;
    currentOrder?: Maybe<Order>;
    currentSignInAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    currentSignInIp?: Maybe<Scalars["String"]["output"]>;
    currentWallet: Wallet;
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    devices: DeviceConnection;
    dispatchCalls: DispatchCallConnection;
    downloadables: PurchasedDownloadableConnection;
    eTicketCount: Scalars["Int"]["output"];
    eTickets: ETicketConnection;
    eduDegree?: Maybe<Scalars["String"]["output"]>;
    education?: Maybe<UserEducation>;
    email?: Maybe<Scalars["String"]["output"]>;
    emergencyContacts: Array<EmergencyContact>;
    employment?: Maybe<UserEmployment>;
    failedAttempts: Scalars["Int"]["output"];
    familyName?: Maybe<Scalars["String"]["output"]>;
    finance?: Maybe<UserFinance>;
    firstName?: Maybe<Scalars["String"]["output"]>;
    followers: FollowerConnection;
    gender?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    golomtCards: Array<GolomtCard>;
    id: Scalars["ID"]["output"];
    kyc?: Maybe<KycInterface>;
    lastName?: Maybe<Scalars["String"]["output"]>;
    lastRequestAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    lastSignInAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    lastSignInIp?: Maybe<Scalars["String"]["output"]>;
    leasingInfo?: Maybe<LeasingInfo>;
    licenseCount: Scalars["Int"]["output"];
    licenses: LicenseConnection;
    listings: ListingConnection;
    loanContracts: Array<Contract>;
    lockedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    login?: Maybe<Scalars["String"]["output"]>;
    loyaltyCard?: Maybe<LoyaltyCard>;
    mailBounced?: Maybe<Scalars["Boolean"]["output"]>;
    mailComplained?: Maybe<Scalars["Boolean"]["output"]>;
    maritalStatus?: Maybe<Scalars["String"]["output"]>;
    membership?: Maybe<Membership>;
    merchants: MerchantConnection;
    mobile?: Maybe<Scalars["String"]["output"]>;
    mobileConfirmationSentAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    mobileConfirmedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    movieTicketCount: Scalars["Int"]["output"];
    movieTickets: MovieTicketConnection;
    myReview?: Maybe<Review>;
    nationality?: Maybe<Scalars["String"]["output"]>;
    ndCode?: Maybe<Scalars["String"]["output"]>;
    ndCodeAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    orderCount: Scalars["Int"]["output"];
    orderTemplates: OrderTemplateConnection;
    orders: OrderConnection;
    ordersOnBusiness?: Maybe<Array<Order>>;
    passport?: Maybe<Scalars["String"]["output"]>;
    passportBack?: Maybe<Scalars["String"]["output"]>;
    pendingCommercesCount: Scalars["Int"]["output"];
    pendingPurchasesCount: Scalars["Int"]["output"];
    perishableToken?: Maybe<Scalars["String"]["output"]>;
    persistenceToken?: Maybe<Scalars["String"]["output"]>;
    portrait?: Maybe<Scalars["String"]["output"]>;
    posSavedCarts?: Maybe<Scalars["Int"]["output"]>;
    posStores?: Maybe<Array<StoreLocation>>;
    prescriptions: PrescriptionConnection;
    publishedListingsCount: Scalars["Int"]["output"];
    purchaseCount: Scalars["Int"]["output"];
    purchaseCountBusiness?: Maybe<Scalars["Int"]["output"]>;
    purchaseCountChannel?: Maybe<Scalars["Int"]["output"]>;
    purchaseTotalBusiness?: Maybe<Scalars["Float"]["output"]>;
    qPayCards: Array<QPayCard>;
    recentlyViewedListings: RecentlyViewedListingConnection;
    referralSource?: Maybe<Scalars["String"]["output"]>;
    registerNum?: Maybe<Scalars["String"]["output"]>;
    registeredDateChannel?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    rememberCreatedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    rememberToken?: Maybe<Scalars["String"]["output"]>;
    resetPasswordSentAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    resetPasswordToken?: Maybe<Scalars["String"]["output"]>;
    reviews: ReviewConnection;
    roleMatrix?: Maybe<Scalars["JSON"]["output"]>;
    roles: Array<Scalars["String"]["output"]>;
    savedArticles: UserArticleConnection;
    segmentIds: Array<Scalars["ID"]["output"]>;
    segments: Array<SupplySegment>;
    shipAddress?: Maybe<Address>;
    shippedCommercesCount: Scalars["Int"]["output"];
    shippedCount: Scalars["Int"]["output"];
    shippedPurchasesCount: Scalars["Int"]["output"];
    shoppyTrackable?: Maybe<TrackableType>;
    signInCount: Scalars["Int"]["output"];
    storeCreditBalance: Scalars["JSON"]["output"];
    storeCreditEvents: StoreCreditEventConnection;
    storeLocationIds: Array<Scalars["ID"]["output"]>;
    storeLocations: Array<StoreLocation>;
    subscribed?: Maybe<Scalars["Boolean"]["output"]>;
    takenCount: Scalars["Int"]["output"];
    totalPurchase: Scalars["Float"]["output"];
    totalReviews: Scalars["Int"]["output"];
    totpEnabled: Scalars["Boolean"]["output"];
    totpLink: Scalars["String"]["output"];
    unapprovedListingsCount: Scalars["Int"]["output"];
    unconfirmedEmail?: Maybe<Scalars["String"]["output"]>;
    unconfirmedMobile?: Maybe<Scalars["String"]["output"]>;
    unlockToken?: Maybe<Scalars["String"]["output"]>;
    unpaidPurchasesCount: Scalars["Int"]["output"];
    unpublishedListingsCount: Scalars["Int"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userAddresses: UserAddressConnection;
    userAuthentications: Array<UserAuthentication>;
    userInvitationCode?: Maybe<Scalars["String"]["output"]>;
    userSegments: Array<UserSegment>;
    userVerifications: UserVerificationConnection;
    vccRequest?: Maybe<VccRequest>;
    verifiedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    vouchers: PromotionConnection;
    wallet: Scalars["Float"]["output"];
    wallets: Array<Wallet>;
    website?: Maybe<Website>;
    websiteAgreement?: Maybe<UserAgreement>;
    websiteAgreements?: Maybe<Array<UserAgreement>>;
    wishlist?: Maybe<Wishlist>;
    xpartnersClickId?: Maybe<Scalars["String"]["output"]>;
    xpartnersExpireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
  };

export type UserAirTicketsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AirTicketFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type UserAssetRolesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AssetFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type UserAuditsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AuditFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type UserBusinessEmploymentsArgs = {
  merchantOnly?: InputMaybe<Scalars["Boolean"]["input"]>;
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type UserBusinessSuppliersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<BusinessClientFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type UserCanIArgs = {
  action: CanIAction;
};

export type UserClaimedOrdersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OrderFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  status?: InputMaybe<OrderStatus>;
};

export type UserCommerceOrdersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OrderFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  status?: InputMaybe<OrderStatus>;
};

export type UserCouponsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<CouponFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type UserCurrentEventArgs = {
  event?: InputMaybe<Scalars["String"]["input"]>;
};

export type UserCurrentOrderArgs = {
  currency?: InputMaybe<Scalars["String"]["input"]>;
  flag?: InputMaybe<Scalars["String"]["input"]>;
  key?: InputMaybe<Scalars["String"]["input"]>;
  number?: InputMaybe<Scalars["String"]["input"]>;
  orderToken?: InputMaybe<Scalars["String"]["input"]>;
};

export type UserCurrentWalletArgs = {
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type UserDevicesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OneSignalDeviceFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  segmentId?: InputMaybe<Scalars["ID"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type UserDispatchCallsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<DispatchCallFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type UserDownloadablesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<DownloadableFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type UserETicketsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ETicketFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type UserFollowersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<FollowerFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type UserKycArgs = {
  type: Scalars["String"]["input"];
};

export type UserLicensesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<LicenseFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type UserListingsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ListingFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type UserMembershipArgs = {
  storeLocationId?: InputMaybe<Scalars["ID"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type UserMerchantsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<MerchantFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type UserMovieTicketsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<MovieTicketFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type UserOrderTemplatesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OrderTemplateFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type UserOrdersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OrderFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  status?: InputMaybe<OrderStatus>;
};

export type UserOrdersOnBusinessArgs = {
  vendorId: Scalars["ID"]["input"];
};

export type UserPosSavedCartsArgs = {
  storeLocationId: Scalars["ID"]["input"];
};

export type UserPrescriptionsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PrescriptionFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type UserPurchaseCountBusinessArgs = {
  vendorId: Scalars["ID"]["input"];
};

export type UserPurchaseCountChannelArgs = {
  storeLocationId?: InputMaybe<Scalars["ID"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type UserPurchaseTotalBusinessArgs = {
  vendorId: Scalars["ID"]["input"];
};

export type UserRecentlyViewedListingsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type UserRegisteredDateChannelArgs = {
  vendorId: Scalars["ID"]["input"];
};

export type UserReviewsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ReviewsFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  isDeleted?: InputMaybe<Scalars["Boolean"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type UserSavedArticlesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<UserArticleFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type UserSegmentIdsArgs = {
  byWebsiteVendor?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type UserShippedCountArgs = {
  from?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  to?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
};

export type UserStoreCreditEventsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<StoreCreditEventFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type UserTakenCountArgs = {
  from?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  to?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
};

export type UserUserAddressesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<UserAddressFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type UserUserVerificationsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<UserVerificationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type UserVccRequestArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  requestId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type UserVouchersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  dateType?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PromotionFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  from?: InputMaybe<Scalars["String"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  to?: InputMaybe<Scalars["String"]["input"]>;
};

export type UserWebsiteAgreementArgs = {
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type UserWishlistArgs = {
  accessHash?: InputMaybe<Scalars["String"]["input"]>;
};

export type UserAddress = BaseModelInterface &
  Node & {
    __typename?: "UserAddress";
    address?: Maybe<Address>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
  };

export type UserAddressCanIArgs = {
  action: CanIAction;
};

export type UserAddressConnection = {
  __typename?: "UserAddressConnection";
  edges: Array<UserAddressEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<UserAddress>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type UserAddressConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type UserAddressConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type UserAddressEdge = {
  __typename?: "UserAddressEdge";
  cursor: Scalars["String"]["output"];
  node: UserAddress;
};

export type UserAddressFilter = {
  address?: InputMaybe<AddressFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
};

export type UserAgreement = BaseModelInterface &
  Node & {
    __typename?: "UserAgreement";
    calculatedAt: Scalars["ISO8601Date"]["output"];
    canI: Scalars["Boolean"]["output"];
    cartState?: Maybe<Scalars["String"]["output"]>;
    cartTotal: Scalars["Float"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    currency?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    ordersCount: Scalars["Int"]["output"];
    ordersTotal: Scalars["Float"]["output"];
    storeLocation?: Maybe<StoreLocation>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user: User;
    website?: Maybe<Website>;
  };

export type UserAgreementCanIArgs = {
  action: CanIAction;
};

export type UserAgreementConnection = {
  __typename?: "UserAgreementConnection";
  edges: Array<UserAgreementEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<UserAgreement>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type UserAgreementConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type UserAgreementConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type UserAgreementEdge = {
  __typename?: "UserAgreementEdge";
  cursor: Scalars["String"]["output"];
  node: UserAgreement;
};

export type UserAgreementFilter = {
  calculatedAt?: InputMaybe<DateFilter>;
  cartState?: InputMaybe<StringFilter>;
  cartTotal?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  ordersCount?: InputMaybe<IntFilter>;
  ordersTotal?: InputMaybe<IntFilter>;
  search?: InputMaybe<StringFilter>;
  storeLocation?: InputMaybe<StoreLocationFilter>;
  termsAccepted?: InputMaybe<BoolFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type UserArticle = BaseModelInterface &
  Node & {
    __typename?: "UserArticle";
    article?: Maybe<Article>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["JSON"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    website?: Maybe<Website>;
  };

export type UserArticleCanIArgs = {
  action: CanIAction;
};

export type UserArticleConnection = {
  __typename?: "UserArticleConnection";
  edges: Array<UserArticleEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<UserArticle>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type UserArticleConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type UserArticleConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type UserArticleEdge = {
  __typename?: "UserArticleEdge";
  cursor: Scalars["String"]["output"];
  node: UserArticle;
};

export type UserArticleFilter = {
  article?: InputMaybe<ArticleFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type UserAuthentication = BaseModelInterface &
  Node & {
    __typename?: "UserAuthentication";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    provider: Scalars["String"]["output"];
    token?: Maybe<Scalars["String"]["output"]>;
    uid: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user: User;
  };

export type UserAuthenticationCanIArgs = {
  action: CanIAction;
};

export type UserConnection = {
  __typename?: "UserConnection";
  edges: Array<UserEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<User>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type UserConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type UserConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type UserEdge = {
  __typename?: "UserEdge";
  cursor: Scalars["String"]["output"];
  node: User;
};

export type UserEducation = BaseModelInterface &
  Node & {
    __typename?: "UserEducation";
    active?: Maybe<Scalars["Boolean"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    degree?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    profession?: Maybe<Scalars["String"]["output"]>;
    school?: Maybe<Scalars["String"]["output"]>;
    since?: Maybe<Scalars["ISO8601Date"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
  };

export type UserEducationCanIArgs = {
  action: CanIAction;
};

export type UserEmployment = BaseModelInterface &
  Node & {
    __typename?: "UserEmployment";
    address?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    company?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    employeeCount?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    jobTitle?: Maybe<Scalars["String"]["output"]>;
    phone?: Maybe<Scalars["String"]["output"]>;
    since?: Maybe<Scalars["ISO8601Date"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    years?: Maybe<Scalars["String"]["output"]>;
  };

export type UserEmploymentCanIArgs = {
  action: CanIAction;
};

export type UserEmploymentFilter = {
  company?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  jobTitle?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type UserFilter = {
  birthday?: InputMaybe<DateFilter>;
  createdAt?: InputMaybe<DateFilter>;
  email?: InputMaybe<StringFilter>;
  emailOrMobile?: InputMaybe<StringFilter>;
  emailOrMobileOrFirstName?: InputMaybe<StringFilter>;
  emailOrUnconfirmedEmail?: InputMaybe<StringFilter>;
  employment?: InputMaybe<UserEmploymentFilter>;
  firstName?: InputMaybe<StringFilter>;
  firstNameOrLastName?: InputMaybe<StringFilter>;
  gender?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  lastName?: InputMaybe<StringFilter>;
  mobile?: InputMaybe<StringFilter>;
  mobileOrUnconfirmedMobile?: InputMaybe<StringFilter>;
  mobileOrUnconfirmedMobileOrEmailOrFirstName?: InputMaybe<StringFilter>;
  orderCount?: InputMaybe<IntFilter>;
  registerNum?: InputMaybe<StringFilter>;
  shoppyTrackable?: InputMaybe<ShoppyTrackableFilter>;
  storeLocations?: InputMaybe<StoreLocationFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  userVerifications?: InputMaybe<UserVerificationFilter>;
  website?: InputMaybe<WebsiteFilter>;
  websiteAgreements?: InputMaybe<UserAgreementFilter>;
};

export type UserFinance = BaseModelInterface &
  Node & {
    __typename?: "UserFinance";
    businessIncome?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    creditLimit?: Maybe<Scalars["Float"]["output"]>;
    gid: Scalars["ID"]["output"];
    groceryOutcome?: Maybe<Scalars["Float"]["output"]>;
    hasCreditcard?: Maybe<Scalars["Boolean"]["output"]>;
    hasLoan?: Maybe<Scalars["Boolean"]["output"]>;
    householdOutcome?: Maybe<Scalars["Float"]["output"]>;
    id: Scalars["ID"]["output"];
    income?: Maybe<Scalars["Float"]["output"]>;
    loanExceed60?: Maybe<Scalars["Boolean"]["output"]>;
    loanpaymentAmoutMonthly?: Maybe<Scalars["Float"]["output"]>;
    otherIncome?: Maybe<Scalars["Float"]["output"]>;
    otherOutcome?: Maybe<Scalars["Float"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
  };

export type UserFinanceCanIArgs = {
  action: CanIAction;
};

export type UserInvitation = BaseModelInterface &
  Node & {
    __typename?: "UserInvitation";
    acceptedCount: Scalars["Int"]["output"];
    accepts: InvitationAcceptConnection;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    generatedAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invitation: Invitation;
    invitationId: Scalars["ID"]["output"];
    number: Scalars["String"]["output"];
    sharedCount: Scalars["Int"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user: User;
    userId: Scalars["ID"]["output"];
    website: Website;
    websiteId: Scalars["ID"]["output"];
  };

export type UserInvitationAcceptsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type UserInvitationCanIArgs = {
  action: CanIAction;
};

export type UserInvitationConnection = {
  __typename?: "UserInvitationConnection";
  edges: Array<UserInvitationEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<UserInvitation>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type UserInvitationConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type UserInvitationConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type UserInvitationEdge = {
  __typename?: "UserInvitationEdge";
  cursor: Scalars["String"]["output"];
  node: UserInvitation;
};

export type UserSegment = BaseModelInterface &
  Node & {
    __typename?: "UserSegment";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    expiresAt: Scalars["ISO8601Date"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    segment: SupplySegment;
    segmentId: Scalars["ID"]["output"];
    sourceId?: Maybe<Scalars["ID"]["output"]>;
    sourceType?: Maybe<Scalars["String"]["output"]>;
    status: Scalars["String"]["output"];
    total: Scalars["Int"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    usedCount: Scalars["Int"]["output"];
    user: User;
    userId: Scalars["ID"]["output"];
    website: Website;
    websiteId: Scalars["ID"]["output"];
  };

export type UserSegmentCanIArgs = {
  action: CanIAction;
};

export type UserSegmentConnection = {
  __typename?: "UserSegmentConnection";
  edges: Array<UserSegmentEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<UserSegment>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type UserSegmentConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type UserSegmentConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type UserSegmentEdge = {
  __typename?: "UserSegmentEdge";
  cursor: Scalars["String"]["output"];
  node: UserSegment;
};

export type UserSegmentFilter = {
  createdAt?: InputMaybe<DateFilter>;
  expiresAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  segment?: InputMaybe<SupplySegmentFilter>;
  segmentId?: InputMaybe<IdFilter>;
  status?: InputMaybe<StringFilter>;
  total?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  userId?: InputMaybe<IdFilter>;
  website?: InputMaybe<WebsiteFilter>;
  websiteId?: InputMaybe<IdFilter>;
};

export type UserSelectableGiftPromises = ActionInterface &
  Node & {
    __typename?: "UserSelectableGiftPromises";
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    position?: Maybe<Scalars["Int"]["output"]>;
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredInterval?: Maybe<Scalars["Int"]["output"]>;
    preferredLimit?: Maybe<Scalars["Int"]["output"]>;
    preferredMatchPolicy: Scalars["String"]["output"];
    preferredRule: Scalars["String"]["output"];
    promotion: Promotion;
    promotionActionLineItems: Array<PromotionActionLineItem>;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
  };

export type UserSelectableItems = ActionInterface &
  Node & {
    __typename?: "UserSelectableItems";
    calculator: CalculatorInterface;
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    position?: Maybe<Scalars["Int"]["output"]>;
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredExcludeOnSale: Scalars["Boolean"]["output"];
    preferredLimit?: Maybe<Scalars["Int"]["output"]>;
    promotion: Promotion;
    promotionActionLineItems: Array<PromotionActionLineItem>;
    promotionId: Scalars["ID"]["output"];
    type?: Maybe<Scalars["String"]["output"]>;
  };

export type UserToken = BaseModelInterface &
  Node & {
    __typename?: "UserToken";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    duration: Scalars["Int"]["output"];
    generatedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    number?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    usedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    usedBy?: Maybe<User>;
    user?: Maybe<User>;
    website?: Maybe<Website>;
  };

export type UserTokenCanIArgs = {
  action: CanIAction;
};

export type UserVerification = BaseModelInterface &
  Node & {
    __typename?: "UserVerification";
    approvedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    message?: Maybe<Scalars["String"]["output"]>;
    passport?: Maybe<Scalars["String"]["output"]>;
    passportApprovedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    passportBack?: Maybe<Scalars["String"]["output"]>;
    passportBackApprovedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    passportBackRejectedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    passportRejectedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    rejectedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    requestedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    selfie?: Maybe<Scalars["String"]["output"]>;
    selfieApprovedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    selfieRejectedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user: User;
    userId: Scalars["ID"]["output"];
    website: Website;
    websiteId: Scalars["ID"]["output"];
  };

export type UserVerificationCanIArgs = {
  action: CanIAction;
};

export type UserVerificationConnection = {
  __typename?: "UserVerificationConnection";
  edges: Array<UserVerificationEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<UserVerification>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type UserVerificationConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type UserVerificationConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type UserVerificationEdge = {
  __typename?: "UserVerificationEdge";
  cursor: Scalars["String"]["output"];
  node: UserVerification;
};

export type UserVerificationFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  status?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  vendor?: InputMaybe<VendorFilter>;
};

export type UzumNasiyaSource = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "UzumNasiyaSource";
    buyerId?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    canceledAt?: Maybe<Scalars["ISO8601Date"]["output"]>;
    confirmedAt?: Maybe<Scalars["ISO8601Date"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    hasLimit: Scalars["Boolean"]["output"];
    id: Scalars["ID"]["output"];
    invoiceNo?: Maybe<Scalars["String"]["output"]>;
    mobile?: Maybe<Scalars["String"]["output"]>;
    orderNo?: Maybe<Scalars["String"]["output"]>;
    paymentMethod: PaymentMethod;
    paymentMethodId: Scalars["ID"]["output"];
    period?: Maybe<Scalars["String"]["output"]>;
    periods?: Maybe<Scalars["JSON"]["output"]>;
    response?: Maybe<Scalars["JSON"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user: User;
    userId: Scalars["ID"]["output"];
    webview?: Maybe<Scalars["String"]["output"]>;
  };

export type UzumNasiyaSourceCanIArgs = {
  action: CanIAction;
};

export type VccRequest = BaseModelInterface &
  Node & {
    __typename?: "VCCRequest";
    amount?: Maybe<Scalars["Float"]["output"]>;
    branchId?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    chrgAmount?: Maybe<Scalars["Float"]["output"]>;
    confAmount?: Maybe<Scalars["Float"]["output"]>;
    confirmedDate?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    crnCode?: Maybe<Scalars["String"]["output"]>;
    disbChrgInt?: Maybe<Scalars["Float"]["output"]>;
    embossName?: Maybe<Scalars["String"]["output"]>;
    feePercent?: Maybe<Scalars["Float"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    instType?: Maybe<Scalars["String"]["output"]>;
    interest?: Maybe<Scalars["Float"]["output"]>;
    loanAccount?: Maybe<Scalars["String"]["output"]>;
    loanSubType?: Maybe<Scalars["String"]["output"]>;
    loanType?: Maybe<Scalars["String"]["output"]>;
    monthlyAmount?: Maybe<Scalars["Float"]["output"]>;
    payDay?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    period?: Maybe<Scalars["Int"]["output"]>;
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    prepaidAmt?: Maybe<Scalars["Float"]["output"]>;
    prodCode?: Maybe<Scalars["String"]["output"]>;
    prodType?: Maybe<Scalars["String"]["output"]>;
    registerNum?: Maybe<Scalars["String"]["output"]>;
    requestId?: Maybe<Scalars["String"]["output"]>;
    scoringAmount?: Maybe<Scalars["Float"]["output"]>;
    scoringDate?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    scoringReason?: Maybe<Scalars["String"]["output"]>;
    staffInterest?: Maybe<Scalars["Float"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    topupFlg?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type VccRequestCanIArgs = {
  action: CanIAction;
};

export type VacationSchedule = BaseModelInterface &
  Node & {
    __typename?: "VacationSchedule";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    date?: Maybe<Scalars["ISO8601Date"]["output"]>;
    dayOfWeek?: Maybe<Scalars["String"]["output"]>;
    endTime?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    repeat?: Maybe<Scalars["String"]["output"]>;
    startTime?: Maybe<Scalars["String"]["output"]>;
    timezone?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    websiteId?: Maybe<Scalars["ID"]["output"]>;
  };

export type VacationScheduleCanIArgs = {
  action: CanIAction;
};

export type Variant = BaseModelInterface &
  Node & {
    __typename?: "Variant";
    allImages: Array<ProductImage>;
    associatedAudits: Array<Audit>;
    backorderable?: Maybe<Scalars["Boolean"]["output"]>;
    barcode?: Maybe<Scalars["String"]["output"]>;
    bonusPoint?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    canSupply: Scalars["Boolean"]["output"];
    costCurrency?: Maybe<Scalars["String"]["output"]>;
    costPrice?: Maybe<Scalars["Float"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    currency?: Maybe<Scalars["String"]["output"]>;
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    depth?: Maybe<Scalars["Float"]["output"]>;
    description?: Maybe<Scalars["String"]["output"]>;
    discontinueOn?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    downloadableAttachments: Array<DownloadableAttachment>;
    eventEndDate?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    eventPrice?: Maybe<Scalars["Float"]["output"]>;
    fragile: Scalars["Boolean"]["output"];
    gid: Scalars["ID"]["output"];
    hasRules: Scalars["Boolean"]["output"];
    height?: Maybe<Scalars["Float"]["output"]>;
    hsCode?: Maybe<Scalars["String"]["output"]>;
    id: Scalars["ID"]["output"];
    image?: Maybe<Scalars["String"]["output"]>;
    imageLinks: Array<Scalars["String"]["output"]>;
    images: Array<ProductImage>;
    isBackorderable: Scalars["Boolean"]["output"];
    isMaster: Scalars["Boolean"]["output"];
    labelCode?: Maybe<Scalars["String"]["output"]>;
    licenses: LicenseConnection;
    listedWebsites: Array<Website>;
    merchantSku?: Maybe<Scalars["String"]["output"]>;
    name?: Maybe<Scalars["String"]["output"]>;
    netWeight?: Maybe<Scalars["Float"]["output"]>;
    nonReturnable: Scalars["Boolean"]["output"];
    nutritionFact?: Maybe<NutritionFact>;
    optionValues: Array<OptionValue>;
    optionsText: Scalars["String"]["output"];
    originalPrice?: Maybe<Scalars["Float"]["output"]>;
    packageCode?: Maybe<Scalars["String"]["output"]>;
    parent?: Maybe<Variant>;
    partsVariants: Array<AssemblyPart>;
    position?: Maybe<Scalars["Int"]["output"]>;
    price: Scalars["Float"]["output"];
    prices: Array<SalePrice>;
    product: Product;
    productInfo?: Maybe<Scalars["JSON"]["output"]>;
    purchasable: Scalars["Boolean"]["output"];
    rules: Array<VariantRule>;
    saleEndDate?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    salePrice?: Maybe<Scalars["Float"]["output"]>;
    salePrices: Array<SalePrice>;
    saleStartDate?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    sellingPrice: Scalars["Float"]["output"];
    series?: Maybe<Series>;
    sku: Scalars["String"]["output"];
    slug: Scalars["String"]["output"];
    stockItems: Array<StockItem>;
    stockLocationNames?: Maybe<Scalars["String"]["output"]>;
    stockLocked?: Maybe<Scalars["Boolean"]["output"]>;
    storeItems: Array<StoreItem>;
    taxCode?: Maybe<Scalars["String"]["output"]>;
    totalOnHand: Scalars["Float"]["output"];
    trackInventory?: Maybe<Scalars["Boolean"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variantSeries: Array<Variant>;
    vendor?: Maybe<Vendor>;
    weight?: Maybe<Scalars["Float"]["output"]>;
    width?: Maybe<Scalars["Float"]["output"]>;
    wishlists: WishlistConnection;
  };

export type VariantCanIArgs = {
  action: CanIAction;
};

export type VariantImageArgs = {
  mirror?: InputMaybe<Scalars["Boolean"]["input"]>;
  size?: InputMaybe<ProductImageSize>;
};

export type VariantLicensesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<LicenseFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VariantNameArgs = {
  fallback?: InputMaybe<Scalars["String"]["input"]>;
  locale?: InputMaybe<Scalars["String"]["input"]>;
};

export type VariantPriceArgs = {
  currency?: InputMaybe<Scalars["String"]["input"]>;
};

export type VariantSalePriceArgs = {
  currency?: InputMaybe<Scalars["String"]["input"]>;
};

export type VariantSalePricesArgs = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  currency?: InputMaybe<Scalars["String"]["input"]>;
};

export type VariantSellingPriceArgs = {
  currency?: InputMaybe<Scalars["String"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type VariantWishlistsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<WishlistFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VariantConnection = {
  __typename?: "VariantConnection";
  edges: Array<VariantEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Variant>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type VariantConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type VariantConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type VariantEdge = {
  __typename?: "VariantEdge";
  cursor: Scalars["String"]["output"];
  node: Variant;
};

export type VariantFilter = {
  backorderable?: InputMaybe<StringFilter>;
  barcode?: InputMaybe<StringFilter>;
  canSupply?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  defaultPrice?: InputMaybe<PriceFilter>;
  fragile?: InputMaybe<BoolFilter>;
  hasStock?: InputMaybe<BoolFilter>;
  id?: InputMaybe<IdFilter>;
  labelCode?: InputMaybe<StringFilter>;
  merchantSku?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  nameOrSku?: InputMaybe<StringFilter>;
  nonReturnable?: InputMaybe<BoolFilter>;
  optionsText?: InputMaybe<StringFilter>;
  packageCode?: InputMaybe<StringFilter>;
  price?: InputMaybe<IntFilter>;
  product?: InputMaybe<ProductFilter>;
  salePrices?: InputMaybe<PriceFilter>;
  sellingPrice?: InputMaybe<IntFilter>;
  sku?: InputMaybe<StringFilter>;
  stockItems?: InputMaybe<StockItemFilter>;
  stockLocked?: InputMaybe<StringFilter>;
  taxCode?: InputMaybe<StringFilter>;
  totalOnHand?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  weight?: InputMaybe<IntFilter>;
};

export type VariantInput = {
  _destroy?: InputMaybe<Scalars["Boolean"]["input"]>;
  barcode?: InputMaybe<Scalars["String"]["input"]>;
  bonusPoint?: InputMaybe<Scalars["Float"]["input"]>;
  costPrice?: InputMaybe<Scalars["Float"]["input"]>;
  currency?: InputMaybe<Scalars["String"]["input"]>;
  depth?: InputMaybe<Scalars["Float"]["input"]>;
  fragile?: InputMaybe<Scalars["Boolean"]["input"]>;
  height?: InputMaybe<Scalars["Float"]["input"]>;
  hsCode?: InputMaybe<Scalars["String"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  imageLinks?: InputMaybe<Array<Scalars["String"]["input"]>>;
  images?: InputMaybe<Array<Scalars["String"]["input"]>>;
  labelCode?: InputMaybe<Scalars["String"]["input"]>;
  merchantSku?: InputMaybe<Scalars["String"]["input"]>;
  netWeight?: InputMaybe<Scalars["Float"]["input"]>;
  nonReturnable?: InputMaybe<Scalars["Boolean"]["input"]>;
  options?: InputMaybe<Scalars["JSON"]["input"]>;
  originalPrice?: InputMaybe<Scalars["Float"]["input"]>;
  packageCode?: InputMaybe<Scalars["String"]["input"]>;
  position?: InputMaybe<Scalars["Int"]["input"]>;
  price?: InputMaybe<Scalars["Float"]["input"]>;
  priceCny?: InputMaybe<Scalars["Float"]["input"]>;
  priceJpy?: InputMaybe<Scalars["Float"]["input"]>;
  priceKrw?: InputMaybe<Scalars["Float"]["input"]>;
  priceMnt?: InputMaybe<Scalars["Float"]["input"]>;
  priceRub?: InputMaybe<Scalars["Float"]["input"]>;
  priceUsd?: InputMaybe<Scalars["Float"]["input"]>;
  priceUzs?: InputMaybe<Scalars["Float"]["input"]>;
  sku?: InputMaybe<Scalars["String"]["input"]>;
  stock?: InputMaybe<Scalars["Int"]["input"]>;
  stockLocations?: InputMaybe<Scalars["JSON"]["input"]>;
  stockLocked?: InputMaybe<Scalars["Boolean"]["input"]>;
  taxCode?: InputMaybe<Scalars["String"]["input"]>;
  weight?: InputMaybe<Scalars["Float"]["input"]>;
  width?: InputMaybe<Scalars["Float"]["input"]>;
};

export type VariantRule = BaseModelInterface &
  Node & {
    __typename?: "VariantRule";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    ratio: Scalars["Float"]["output"];
    targetVariant: Variant;
    targetVariantId: Scalars["ID"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variant: Variant;
    variantId: Scalars["ID"]["output"];
    website: Variant;
    websiteId: Scalars["ID"]["output"];
  };

export type VariantRuleCanIArgs = {
  action: CanIAction;
};

export enum VariantsPermission {
  Display = "display",
  Manage = "manage",
}

export type Vendor = BaseModelInterface &
  Node & {
    __typename?: "Vendor";
    address?: Maybe<Scalars["String"]["output"]>;
    averageRating: Scalars["Float"]["output"];
    branches?: Maybe<BranchConnection>;
    businessClientAttachments?: Maybe<
      Array<BusinessVerificationAttachmentType>
    >;
    businessClients?: Maybe<BusinessClientConnection>;
    businessSupplier?: Maybe<BusinessClient>;
    businessSuppliers?: Maybe<BusinessClientConnection>;
    campaigns: ShoppyCampaignConnection;
    canI: Scalars["Boolean"]["output"];
    category?: Maybe<Scalars["String"]["output"]>;
    cdq?: Maybe<Array<Scalars["ID"]["output"]>>;
    channel?: Maybe<Merchant>;
    channels?: Maybe<MerchantConnection>;
    clientsStoresRelay?: Maybe<ClientsStoreConnection>;
    contracts: VendorContractConnection;
    country?: Maybe<Country>;
    coupons?: Maybe<CouponConnection>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    customers: UserConnection;
    data?: Maybe<Scalars["JSON"]["output"]>;
    deliveryOrders: ShipmentConnection;
    description?: Maybe<Scalars["String"]["output"]>;
    district?: Maybe<District>;
    drivers?: Maybe<Array<Order>>;
    eMailTemplates?: Maybe<Array<EMailTemplate>>;
    eTickets?: Maybe<ETicketConnection>;
    ebarimtType?: Maybe<Scalars["String"]["output"]>;
    elasticReport?: Maybe<Scalars["JSON"]["output"]>;
    email?: Maybe<Scalars["String"]["output"]>;
    employees?: Maybe<EmployeeConnection>;
    erpIntegrations: Array<ErpIntegration>;
    exportTemplate?: Maybe<Scalars["String"]["output"]>;
    facebook?: Maybe<Scalars["String"]["output"]>;
    follow: Follow;
    follows: Array<Follow>;
    fulfillmentDashboard?: Maybe<Scalars["JSON"]["output"]>;
    fullAddress?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    hideInfo?: Maybe<Scalars["Boolean"]["output"]>;
    id: Scalars["ID"]["output"];
    instagram?: Maybe<Scalars["String"]["output"]>;
    isBlocking: Scalars["Boolean"]["output"];
    isCityTaxPayer?: Maybe<Scalars["Boolean"]["output"]>;
    isExcSelling: Scalars["Boolean"]["output"];
    isIndividual?: Maybe<Scalars["Boolean"]["output"]>;
    isVerified?: Maybe<Scalars["Boolean"]["output"]>;
    latitude?: Maybe<Scalars["String"]["output"]>;
    lineItemReport?: Maybe<Array<LineItemReport>>;
    lineItems?: Maybe<LineItemConnection>;
    listings?: Maybe<ListingConnection>;
    logo?: Maybe<Scalars["String"]["output"]>;
    longitude?: Maybe<Scalars["String"]["output"]>;
    manager?: Maybe<Scalars["String"]["output"]>;
    msCodeList?: Maybe<Array<Scalars["String"]["output"]>>;
    myReview?: Maybe<Review>;
    name?: Maybe<Scalars["String"]["output"]>;
    nameEn?: Maybe<Scalars["String"]["output"]>;
    note1?: Maybe<Scalars["String"]["output"]>;
    note2?: Maybe<Scalars["String"]["output"]>;
    note3?: Maybe<Scalars["String"]["output"]>;
    note4?: Maybe<Scalars["String"]["output"]>;
    note5?: Maybe<Scalars["String"]["output"]>;
    note6?: Maybe<Scalars["String"]["output"]>;
    note7?: Maybe<Scalars["String"]["output"]>;
    note8?: Maybe<Scalars["String"]["output"]>;
    nutritionFacts?: Maybe<NutritionFactConnection>;
    orderDashboard?: Maybe<Scalars["JSON"]["output"]>;
    orderReport?: Maybe<Array<OrderReport>>;
    orders?: Maybe<CommerceOrderConnection>;
    otherVendorsSelling?: Maybe<Scalars["Boolean"]["output"]>;
    paymentMethods: Array<PaymentMethod>;
    personalNumber?: Maybe<Scalars["String"]["output"]>;
    phone?: Maybe<Scalars["String"]["output"]>;
    pos?: Maybe<Scalars["Boolean"]["output"]>;
    posListings?: Maybe<PosListingConnection>;
    posOrders?: Maybe<OrderConnection>;
    posOrdersData?: Maybe<Scalars["JSON"]["output"]>;
    preferredSeoAutoUpdate?: Maybe<Scalars["Boolean"]["output"]>;
    primaryTaxons: Array<Scalars["ID"]["output"]>;
    primaryTaxonsData?: Maybe<Scalars["JSON"]["output"]>;
    productDashboard?: Maybe<ProductDashboard>;
    productReturns: ProductReturnConnection;
    products?: Maybe<ProductConnection>;
    productsCount?: Maybe<Scalars["Int"]["output"]>;
    promotions?: Maybe<PromotionConnection>;
    publishedListingsCount: Scalars["Int"]["output"];
    quarter?: Maybe<Quarter>;
    register?: Maybe<Scalars["String"]["output"]>;
    reviews: ReviewConnection;
    salesByProduct: Scalars["JSON"]["output"];
    salesBySku: Scalars["JSON"]["output"];
    salesCount: Scalars["Int"]["output"];
    salesOverTime: Scalars["JSON"]["output"];
    shipments?: Maybe<ShipmentConnection>;
    shoppyImages?: Maybe<ImageConnection>;
    sizingGuides?: Maybe<SizingGuideConnection>;
    sms: SmsConnection;
    smsReport?: Maybe<Scalars["JSON"]["output"]>;
    smsTemplates?: Maybe<Array<SmsTemplate>>;
    state?: Maybe<State>;
    stockItems?: Maybe<StockItemConnection>;
    stockLocations?: Maybe<StockLocationConnection>;
    storeCreditReport?: Maybe<Array<StoreCreditReport>>;
    storeCredits: StoreCreditConnection;
    storeListings: StoreListingConnection;
    storeLocation?: Maybe<StoreLocation>;
    storeLocations?: Maybe<StoreLocationConnection>;
    supplierCategories: SupplierCategoryConnection;
    supplySegment?: Maybe<SupplySegment>;
    supplySegments?: Maybe<SupplySegmentConnection>;
    taxNumber?: Maybe<Scalars["String"]["output"]>;
    ticketTemplates?: Maybe<TicketTemplateConnection>;
    token?: Maybe<Scalars["String"]["output"]>;
    totalReviews: Scalars["Int"]["output"];
    tutDeliveryPackages?: Maybe<DeliveryPackageConnection>;
    unapprovedListingsCount: Scalars["Int"]["output"];
    unpublishedListingsCount: Scalars["Int"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variants?: Maybe<VariantConnection>;
    vat?: Maybe<Scalars["Boolean"]["output"]>;
    vendorIsSelling?: Maybe<Scalars["Boolean"]["output"]>;
    wallets?: Maybe<WalletConnection>;
    website?: Maybe<Scalars["String"]["output"]>;
    websites?: Maybe<WebsiteConnection>;
    withSalesCount?: Maybe<Scalars["Int"]["output"]>;
  };

export type VendorBranchesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<BranchFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorBusinessClientsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<BusinessClientFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorBusinessSuppliersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<BusinessClientFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorCampaignsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<CampaignFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorCanIArgs = {
  action: CanIAction;
};

export type VendorChannelArgs = {
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type VendorChannelsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<MerchantFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorClientsStoresRelayArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ClientsStoreFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorContractsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<VendorContractFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorCouponsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<CouponFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorCustomersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<UserFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorDeliveryOrdersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ShipmentFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorDriversArgs = {
  filter?: InputMaybe<OrderFilter>;
  from: Scalars["ISO8601DateTime"]["input"];
  to: Scalars["ISO8601DateTime"]["input"];
};

export type VendorETicketsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ETicketFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorElasticReportArgs = {
  params?: InputMaybe<Scalars["JSON"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type VendorEmployeesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<BusinessUserFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorFollowArgs = {
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type VendorFulfillmentDashboardArgs = {
  filter?: InputMaybe<OrderFilter>;
};

export type VendorLineItemReportArgs = {
  coupon?: InputMaybe<Scalars["Boolean"]["input"]>;
  couponFrom?: InputMaybe<Scalars["String"]["input"]>;
  couponTo?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<LineItemFilter>;
  flag?: InputMaybe<Scalars["JSON"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  storeId?: InputMaybe<Scalars["ID"]["input"]>;
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type VendorLineItemsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  excludeBankPending?: InputMaybe<Scalars["Boolean"]["input"]>;
  filter?: InputMaybe<LineItemFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  ready?: InputMaybe<Scalars["Boolean"]["input"]>;
  reportType?: InputMaybe<Scalars["String"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorListingsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ListingFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorMsCodeListArgs = {
  msCode?: InputMaybe<Scalars["String"]["input"]>;
};

export type VendorNutritionFactsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<NutritionFactFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorOrderDashboardArgs = {
  filter?: InputMaybe<LineItemFilter>;
};

export type VendorOrderReportArgs = {
  filter?: InputMaybe<OrderFilter>;
  from: Scalars["String"]["input"];
  promotion?: InputMaybe<Scalars["Boolean"]["input"]>;
  status?: InputMaybe<Scalars["String"]["input"]>;
  to: Scalars["String"]["input"];
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type VendorOrdersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OrderFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorPaymentMethodsArgs = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  afterPay?: InputMaybe<Scalars["Boolean"]["input"]>;
  displayOn?: InputMaybe<Array<PmDisplayKind>>;
};

export type VendorPosListingsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PosListingFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorPosOrdersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OrderFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorPosOrdersDataArgs = {
  businessId: Scalars["ID"]["input"];
  from: Scalars["ISO8601DateTime"]["input"];
  to: Scalars["ISO8601DateTime"]["input"];
  userId?: InputMaybe<Scalars["ID"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type VendorProductReturnsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ProductReturnFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorProductsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ProductFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type VendorPromotionsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  dateType?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PromotionFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  from?: InputMaybe<Scalars["String"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  to?: InputMaybe<Scalars["String"]["input"]>;
};

export type VendorReviewsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ReviewsFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  isDeleted?: InputMaybe<Scalars["Boolean"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorSalesByProductArgs = {
  filter?: InputMaybe<LineItemFilter>;
};

export type VendorSalesBySkuArgs = {
  filter?: InputMaybe<LineItemFilter>;
};

export type VendorSalesOverTimeArgs = {
  filter?: InputMaybe<LineItemFilter>;
  interval: Scalars["String"]["input"];
};

export type VendorShipmentsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ShipmentFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorShoppyImagesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ShoppyImageFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorSizingGuidesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<SizingGuideFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorSmsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<SmsFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorSmsReportArgs = {
  filter?: InputMaybe<SmsFilter>;
  interval?: InputMaybe<Scalars["String"]["input"]>;
};

export type VendorSmsTemplatesArgs = {
  storeLocationId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type VendorStockItemsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<StockItemFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorStockLocationsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<StockLocationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorStoreCreditReportArgs = {
  filter?: InputMaybe<StoreCreditEventFilter>;
  from?: InputMaybe<Scalars["String"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  to?: InputMaybe<Scalars["String"]["input"]>;
};

export type VendorStoreCreditsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<StoreCreditFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorStoreListingsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<StoreListingFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorStoreLocationArgs = {
  id: Scalars["ID"]["input"];
};

export type VendorStoreLocationsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<StoreLocationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorSupplierCategoriesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<SupplierCategoryFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorSupplySegmentArgs = {
  id: Scalars["ID"]["input"];
};

export type VendorSupplySegmentsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<SupplySegmentFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorTicketTemplatesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TicketTemplateFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorTutDeliveryPackagesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TutDeliveryPackageFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorVariantsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<VariantFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  permission?: InputMaybe<VariantsPermission>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorWalletsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<WalletFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorWebsitesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<WebsiteFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type VendorConnection = {
  __typename?: "VendorConnection";
  edges: Array<VendorEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Vendor>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type VendorConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type VendorConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type VendorContract = BaseModelInterface &
  Node & {
    __typename?: "VendorContract";
    canI: Scalars["Boolean"]["output"];
    commissionRules?: Maybe<Array<Scalars["JSON"]["output"]>>;
    contractNumber?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    ebarimt?: Maybe<Scalars["String"]["output"]>;
    expireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    fee?: Maybe<Scalars["Float"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    manager?: Maybe<User>;
    monthlyFee?: Maybe<Scalars["Float"]["output"]>;
    note?: Maybe<Scalars["String"]["output"]>;
    shipment?: Maybe<Scalars["Float"]["output"]>;
    shipmentRules?: Maybe<Array<Scalars["JSON"]["output"]>>;
    startAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    state?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    vendor?: Maybe<Vendor>;
    website?: Maybe<Website>;
  };

export type VendorContractCanIArgs = {
  action: CanIAction;
};

export type VendorContractConnection = {
  __typename?: "VendorContractConnection";
  edges: Array<VendorContractEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<VendorContract>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type VendorContractConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type VendorContractConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type VendorContractEdge = {
  __typename?: "VendorContractEdge";
  cursor: Scalars["String"]["output"];
  node: VendorContract;
};

export type VendorContractFilter = {
  contractNumber?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  ebarimt?: InputMaybe<StringFilter>;
  expireAt?: InputMaybe<DateFilter>;
  fee?: InputMaybe<IntFilter>;
  id?: InputMaybe<IdFilter>;
  manager?: InputMaybe<UserFilter>;
  monthlyFee?: InputMaybe<IntFilter>;
  shipment?: InputMaybe<IntFilter>;
  startAt?: InputMaybe<DateFilter>;
  state?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  vendor?: InputMaybe<VendorFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type VendorEdge = {
  __typename?: "VendorEdge";
  cursor: Scalars["String"]["output"];
  node: Vendor;
};

export type VendorFilter = {
  channels?: InputMaybe<MerchantFilter>;
  createdAt?: InputMaybe<DateFilter>;
  ebarimtType?: InputMaybe<StringFilter>;
  email?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  isIndividual?: InputMaybe<BoolFilter>;
  listingVendor?: InputMaybe<ListingVendorFilter>;
  name?: InputMaybe<StringFilter>;
  nameEn?: InputMaybe<StringFilter>;
  nameOrRegister?: InputMaybe<StringFilter>;
  nameOrRegisterOrNameEn?: InputMaybe<StringFilter>;
  personalNumber?: InputMaybe<StringFilter>;
  phone?: InputMaybe<StringFilter>;
  pos?: InputMaybe<BoolFilter>;
  products?: InputMaybe<ProductFilter>;
  register?: InputMaybe<StringFilter>;
  taxNumber?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type VendorListingFilter = {
  status: Scalars["String"]["input"];
  vendorId: Scalars["ID"]["input"];
};

export type VirtualManifest = Node &
  ProductManifestInterface & {
    __typename?: "VirtualManifest";
    brand?: Maybe<Brand>;
    canSupply?: Maybe<Scalars["Boolean"]["output"]>;
    expireAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    fulfillDuration?: Maybe<Scalars["Int"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    image?: Maybe<Scalars["String"]["output"]>;
    maxQty?: Maybe<Scalars["Int"]["output"]>;
    name: Scalars["String"]["output"];
    optionsText?: Maybe<Scalars["String"]["output"]>;
    price: Scalars["Float"]["output"];
    productCat?: Maybe<Scalars["String"]["output"]>;
    sku?: Maybe<Scalars["String"]["output"]>;
    slug: Scalars["String"]["output"];
    totalOnHand?: Maybe<Scalars["Int"]["output"]>;
    vendor?: Maybe<Vendor>;
    virtualProduct?: Maybe<VirtualProduct>;
    weight?: Maybe<Scalars["Float"]["output"]>;
  };

export type VirtualProduct = BaseModelInterface &
  Node & {
    __typename?: "VirtualProduct";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    image?: Maybe<Scalars["String"]["output"]>;
    lineItem: LineItem;
    name?: Maybe<Scalars["String"]["output"]>;
    options?: Maybe<Scalars["String"]["output"]>;
    order: Order;
    price?: Maybe<Scalars["Float"]["output"]>;
    sku?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    userId: Scalars["ID"]["output"];
    website: Website;
    websiteId: Scalars["ID"]["output"];
  };

export type VirtualProductCanIArgs = {
  action: CanIAction;
};

export type Wallet = BaseModelInterface &
  Node & {
    __typename?: "Wallet";
    audits: AuditConnection;
    availableAmount: Scalars["Float"]["output"];
    balance: Scalars["Float"]["output"];
    banks: Array<Bank>;
    bonus: Scalars["Float"]["output"];
    canI: Scalars["Boolean"]["output"];
    code: Scalars["String"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    creditProfile?: Maybe<CreditProfile>;
    currency: Scalars["String"]["output"];
    dueDate?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    freezeAmount: Scalars["Float"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    isVerified: Scalars["Boolean"]["output"];
    lastTransactionDate?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    name: Scalars["String"]["output"];
    product: WalletProduct;
    status: Scalars["String"]["output"];
    totalActivePaidAmount: Scalars["Float"]["output"];
    totalActiveRepaidAmount: Scalars["Float"]["output"];
    totalAllocatedAmount: Scalars["Float"]["output"];
    totalCashInAmount: Scalars["Float"]["output"];
    totalCreditAmount: Scalars["Float"]["output"];
    totalCreditUsedAmount: Scalars["Float"]["output"];
    totalDebitAmount: Scalars["Float"]["output"];
    totalPaymentAmount: Scalars["Float"]["output"];
    totalPendingAmount: Scalars["Float"]["output"];
    totalRepaidAmount: Scalars["Float"]["output"];
    transactions?: Maybe<TransactionConnection>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    vendor?: Maybe<Vendor>;
    vendorId?: Maybe<Scalars["ID"]["output"]>;
    verifications: Array<UserVerification>;
    website: Website;
    withdrawalAmount: Scalars["Float"]["output"];
  };

export type WalletAuditsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AuditFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WalletCanIArgs = {
  action: CanIAction;
};

export type WalletTransactionsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TransactionFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WalletConnection = {
  __typename?: "WalletConnection";
  edges: Array<WalletEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Wallet>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type WalletConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type WalletConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type WalletDashboard = {
  __typename?: "WalletDashboard";
  count: Scalars["Int"]["output"];
  currency?: Maybe<Scalars["String"]["output"]>;
  group: Scalars["String"]["output"];
  name?: Maybe<Scalars["String"]["output"]>;
  value: Scalars["Float"]["output"];
};

export type WalletEdge = {
  __typename?: "WalletEdge";
  cursor: Scalars["String"]["output"];
  node: Wallet;
};

export type WalletFilter = {
  availableAmount?: InputMaybe<IntFilter>;
  balance?: InputMaybe<IntFilter>;
  bonus?: InputMaybe<IntFilter>;
  code?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  freezeAmount?: InputMaybe<IntFilter>;
  id?: InputMaybe<IdFilter>;
  isVerified?: InputMaybe<StringFilter>;
  lastTransactionDate?: InputMaybe<DateFilter>;
  name?: InputMaybe<StringFilter>;
  product?: InputMaybe<WalletProductFilter>;
  status?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  userFirstNameOrUserMobileOrUserEmail?: InputMaybe<StringFilter>;
  website?: InputMaybe<WebsiteFilter>;
};

export type WalletPaymentSourceType = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "WalletPaymentSourceType";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    paymentMethod: PaymentMethod;
    transactionId?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user: User;
    wallet: Wallet;
    walletTransaction?: Maybe<Transaction>;
  };

export type WalletPaymentSourceTypeCanIArgs = {
  action: CanIAction;
};

export type WalletProduct = BaseModelInterface &
  Node & {
    __typename?: "WalletProduct";
    canI: Scalars["Boolean"]["output"];
    code?: Maybe<Scalars["String"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    currency?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    loanDays?: Maybe<Scalars["Int"]["output"]>;
    name?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    wallets: WalletConnection;
  };

export type WalletProductCanIArgs = {
  action: CanIAction;
};

export type WalletProductWalletsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<WalletFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WalletProductConnection = {
  __typename?: "WalletProductConnection";
  edges: Array<WalletProductEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<WalletProduct>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type WalletProductConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type WalletProductConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type WalletProductEdge = {
  __typename?: "WalletProductEdge";
  cursor: Scalars["String"]["output"];
  node: WalletProduct;
};

export type WalletProductFilter = {
  code?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type WalletProductsFilter = {
  code?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export enum WalletTransactionAction {
  Allocation = "allocation",
  CashIn = "cash_in",
  Fix = "fix",
  Payment = "payment",
  Repayment = "repayment",
  Return = "return",
  Sales = "sales",
  SalesBonus = "sales_bonus",
  ServiceFee = "service_fee",
  Withdraw = "withdraw",
  XxoatTax = "xxoat_tax",
}

export type Warranty = BaseModelInterface &
  Node & {
    __typename?: "Warranty";
    branch?: Maybe<Scalars["String"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    createdBy?: Maybe<User>;
    deletedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    duration?: Maybe<Scalars["Int"]["output"]>;
    email?: Maybe<Scalars["String"]["output"]>;
    emailSentAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    expireDate?: Maybe<Scalars["ISO8601Date"]["output"]>;
    firstName?: Maybe<Scalars["String"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    isActive?: Maybe<Scalars["Boolean"]["output"]>;
    lastName?: Maybe<Scalars["String"]["output"]>;
    mobile?: Maybe<Scalars["String"]["output"]>;
    number?: Maybe<Scalars["String"]["output"]>;
    order?: Maybe<Order>;
    serialNumber?: Maybe<Scalars["String"]["output"]>;
    startDate?: Maybe<Scalars["ISO8601Date"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    usedAt?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    user?: Maybe<User>;
    variant?: Maybe<Variant>;
    vendor?: Maybe<Vendor>;
    website?: Maybe<Website>;
  };

export type WarrantyCanIArgs = {
  action: CanIAction;
};

export type Webhook = BaseModelInterface &
  Node & {
    __typename?: "Webhook";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    data?: Maybe<Scalars["JSON"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    name: Scalars["String"]["output"];
    status: Scalars["String"]["output"];
    type: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    vendorId?: Maybe<Scalars["ID"]["output"]>;
    website: Website;
    websiteId: Scalars["ID"]["output"];
  };

export type WebhookCanIArgs = {
  action: CanIAction;
};

export type WebhookConnection = {
  __typename?: "WebhookConnection";
  edges: Array<WebhookEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Webhook>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type WebhookConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type WebhookConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type WebhookEdge = {
  __typename?: "WebhookEdge";
  cursor: Scalars["String"]["output"];
  node: Webhook;
};

export type Website = BaseModelInterface &
  Node & {
    __typename?: "Website";
    activeMerchants: Array<Scalars["String"]["output"]>;
    activeQuiz?: Maybe<Quiz>;
    address?: Maybe<Scalars["String"]["output"]>;
    adjustmentReport?: Maybe<Array<AdjustmentReport>>;
    agendaTags?: Maybe<Array<Tag>>;
    agendas: AgendaConnection;
    airBookings: AirBookingConnection;
    airCommissions: CommissionConnection;
    airLimitations: LimitationConnection;
    airTickets: AirTicketConnection;
    alibabaOrders: AlibabaOrderConnection;
    alibabaWaybills: AlibabaWaybillConnection;
    alternateDomain?: Maybe<Scalars["String"]["output"]>;
    applications: ApplicationConnection;
    articleTags?: Maybe<Array<Tag>>;
    articles: ArticleConnection;
    assetRoles: AssetRoleConnection;
    authors: AuthorConnection;
    autoAcceptBusinessClients?: Maybe<Scalars["Boolean"]["output"]>;
    autoAcceptMerchants?: Maybe<Scalars["Boolean"]["output"]>;
    autoEbarimt?: Maybe<Scalars["Boolean"]["output"]>;
    availableTickets: ProductConnection;
    badge?: Maybe<Badge>;
    badges: BadgeConnection;
    bankAccountName: Scalars["String"]["output"];
    black?: Maybe<Scalars["String"]["output"]>;
    bonus?: Maybe<Scalars["Float"]["output"]>;
    branches: BranchConnection;
    brands: BrandListingConnection;
    businessClientIds: Array<Scalars["ID"]["output"]>;
    businessClients: BusinessClientConnection;
    businessTypes: BusinessTypeConnection;
    byVendor?: Maybe<Scalars["JSON"]["output"]>;
    campaign: ShoppyCampaign;
    campaigns: ShoppyCampaignConnection;
    canI: Scalars["Boolean"]["output"];
    cancelHour?: Maybe<Scalars["Int"]["output"]>;
    cancelReasons: CancelReasonConnection;
    candy?: Maybe<Scalars["Boolean"]["output"]>;
    categoryHeader?: Maybe<Scalars["String"]["output"]>;
    chatRooms: RoomConnection;
    clientsStore?: Maybe<ClientsStore>;
    clientsStores: ClientsStoreConnection;
    commission?: Maybe<Scalars["Float"]["output"]>;
    contactStats?: Maybe<Scalars["JSON"]["output"]>;
    copyrightText?: Maybe<Scalars["String"]["output"]>;
    corporateGateways: Array<CorporateGateway>;
    coupon?: Maybe<Scalars["Boolean"]["output"]>;
    couponCodeUsages: CouponCodeUsageConnection;
    coupons: CouponConnection;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    creditCards: CreditCardConnection;
    currency?: Maybe<Scalars["String"]["output"]>;
    data?: Maybe<Scalars["JSON"]["output"]>;
    dataBooleanProperty?: Maybe<Scalars["Boolean"]["output"]>;
    deliveryReport?: Maybe<OrderConnection>;
    deliveryUntil?: Maybe<Scalars["Int"]["output"]>;
    dispatchCalls: DispatchCallConnection;
    domain: Scalars["String"]["output"];
    donations: DonationConnection;
    drivers: Array<Order>;
    eMailCampaigns: CampaignConnection;
    eMailContacts: ContactConnection;
    eMailSegments: SegmentConnection;
    eMailTemplates: Array<EMailTemplate>;
    eTickets: ETicketConnection;
    ebarimt?: Maybe<Scalars["Boolean"]["output"]>;
    ebarimtReport?: Maybe<Array<Scalars["JSON"]["output"]>>;
    elastic8Support: Scalars["Boolean"]["output"];
    elasticReport?: Maybe<Scalars["JSON"]["output"]>;
    email?: Maybe<Scalars["String"]["output"]>;
    emailFrom?: Maybe<Scalars["String"]["output"]>;
    erpIntegrations: Array<ErpIntegration>;
    eventEntries?: Maybe<EventEntryConnection>;
    eventInvite: EventInvite;
    eventInvites: EventInviteConnection;
    facebookAppId?: Maybe<Scalars["String"]["output"]>;
    facebookAppSecret?: Maybe<Scalars["String"]["output"]>;
    facebookChatId?: Maybe<Scalars["String"]["output"]>;
    featureds: FeaturedConnection;
    features: Array<FeatureType>;
    feedbackTopics: FeedbackTopicConnection;
    feedbacks: FeedbackTypeConnection;
    fulfillmentDashboard?: Maybe<Scalars["JSON"]["output"]>;
    games: GameConnection;
    gamifications: GamificationConnection;
    gc?: Maybe<GiftCard>;
    gid: Scalars["ID"]["output"];
    giftCard?: Maybe<Scalars["Boolean"]["output"]>;
    giftCards: GiftCardConnection;
    googleAndroidKey?: Maybe<Scalars["String"]["output"]>;
    googleIosKey?: Maybe<Scalars["String"]["output"]>;
    googleWebKey?: Maybe<Scalars["String"]["output"]>;
    group?: Maybe<Scalars["Boolean"]["output"]>;
    groupIds: Array<Scalars["String"]["output"]>;
    handlebarTemplates: HandlebarTemplateConnection;
    id: Scalars["ID"]["output"];
    index: Scalars["String"]["output"];
    integrationReports?: Maybe<IntegrationReportConnection>;
    isActive?: Maybe<Scalars["Boolean"]["output"]>;
    language: Scalars["String"]["output"];
    languages: Array<Scalars["String"]["output"]>;
    lastUsedPaymentMethods: Array<PaymentMethod>;
    leaseAccount?: Maybe<Scalars["String"]["output"]>;
    leaseName?: Maybe<Scalars["String"]["output"]>;
    leasing?: Maybe<Scalars["Boolean"]["output"]>;
    lineItemReport?: Maybe<LineItemReportConnection>;
    lineItems: LineItemConnection;
    listingBonus?: Maybe<Scalars["Boolean"]["output"]>;
    listingDuration: Scalars["Int"]["output"];
    listings: ListingConnection;
    logo?: Maybe<Scalars["String"]["output"]>;
    lookBooks: LookBookConnection;
    mTemplates: TemplateConnection;
    main?: Maybe<Scalars["String"]["output"]>;
    mapDrivers: TrackableTypeConnection;
    mapOrders: OrderConnection;
    mapStores: StoreLocationConnection;
    massMessages: MassMessageConnection;
    menu?: Maybe<DynamicMenu>;
    menus: Array<DynamicMenu>;
    merchant?: Maybe<Merchant>;
    merchantData: Scalars["String"]["output"];
    merchantNames: Scalars["JSON"]["output"];
    merchants: MerchantConnection;
    minCartAmount?: Maybe<Scalars["Float"]["output"]>;
    movieTickets: MovieTicketConnection;
    name: Scalars["String"]["output"];
    news?: Maybe<News>;
    newsTags?: Maybe<Array<Tag>>;
    newses: NewsConnection;
    notices: NoticeConnection;
    notifications: NotificationConnection;
    oneSignalDevices: DeviceConnection;
    oneSignalSegments: OSegmentConnection;
    onesignalAppId?: Maybe<Scalars["String"]["output"]>;
    onesignalAppKey?: Maybe<Scalars["String"]["output"]>;
    optionTypes: OptionTypeConnection;
    orderCancellationBase?: Maybe<Scalars["Float"]["output"]>;
    orderCancellationFee?: Maybe<Scalars["Float"]["output"]>;
    orderDashboard?: Maybe<Scalars["JSON"]["output"]>;
    orderNotes?: Maybe<OrderCommentConnection>;
    orderPaymentDashboard?: Maybe<Scalars["JSON"]["output"]>;
    orderReport?: Maybe<Array<OrderReport>>;
    orderTemplates: OrderTemplateConnection;
    orders: OrderConnection;
    package?: Maybe<DeliveryPackage>;
    packageList?: Maybe<DeliveryPackageConnection>;
    packages?: Maybe<Array<DeliveryPackage>>;
    page?: Maybe<DynamicPage>;
    pages: DynamicPageConnection;
    parent?: Maybe<Website>;
    paymentAccountData?: Maybe<Scalars["JSON"]["output"]>;
    paymentGuideText?: Maybe<Scalars["String"]["output"]>;
    paymentMethods: Array<PaymentMethod>;
    paymentReturnReasons: PaymentReturnReasonConnection;
    paymentReturnSources: PaymentReturnSourceConnection;
    paymentReturns: PaymentReturnConnection;
    payments: PaymentConnection;
    phone1?: Maybe<Scalars["String"]["output"]>;
    phone2?: Maybe<Scalars["String"]["output"]>;
    polls: PollConnection;
    preferences?: Maybe<Scalars["JSON"]["output"]>;
    preferredBonus?: Maybe<Scalars["JSON"]["output"]>;
    prescription?: Maybe<Prescription>;
    prescriptions: PrescriptionConnection;
    printings: PrintingConnection;
    productReturns: ProductReturnConnection;
    promotions: PromotionConnection;
    prototypes: PrototypeConnection;
    pushTemplates: PushTemplateConnection;
    quizzes: QuizConnection;
    relatedProducts: RelationConnection;
    reportReasons: Array<ReportReason>;
    reports: ReportConnection;
    requireKycVerification?: Maybe<Scalars["Boolean"]["output"]>;
    reviews: ReviewConnection;
    rfm: Array<Rfm>;
    searchSuggestion?: Maybe<Scalars["String"]["output"]>;
    shipmentHours?: Maybe<Scalars["Int"]["output"]>;
    shipmentTrackings: ShipmentTrackingConnection;
    shipments: ShipmentConnection;
    shippers: ShipperConnection;
    shippingCategories: Array<ShippingCategory>;
    shippingMethods: Array<ShippingMethod>;
    shoppyImages: ImageConnection;
    showUser?: Maybe<Scalars["Boolean"]["output"]>;
    signonBonus?: Maybe<Scalars["Float"]["output"]>;
    sms: SmsConnection;
    smsFee?: Maybe<Scalars["Int"]["output"]>;
    smsFrom?: Maybe<Scalars["String"]["output"]>;
    smsReport?: Maybe<Scalars["JSON"]["output"]>;
    smsTemplates: Array<SmsTemplate>;
    soldBrands: Array<Scalars["String"]["output"]>;
    soldMerchants: Array<Scalars["String"]["output"]>;
    stockLocations: StockLocationConnection;
    storeCreditLineItemsReport?: Maybe<Array<LineItemReport>>;
    storeCreditReport?: Maybe<Array<StoreCreditReport>>;
    storeCredits: StoreCreditConnection;
    storeLocation?: Maybe<StoreLocation>;
    storesAddresses: AddressConnection;
    supplierCategories: SupplierCategoryConnection;
    supplySegments: SupplySegmentConnection;
    tags: TagConnection;
    taxCategories: TaxCategoryConnection;
    taxRates: TaxRateConnection;
    taxons: TaxonConnection;
    ticket?: Maybe<Scalars["Boolean"]["output"]>;
    ticketTemplates?: Maybe<TicketTemplateConnection>;
    unreadNotifications: Scalars["Int"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    useAlternatePassword?: Maybe<Scalars["Boolean"]["output"]>;
    useCustomPrototypes?: Maybe<Scalars["Boolean"]["output"]>;
    useDeliveryCode: Scalars["Boolean"]["output"];
    useWallet?: Maybe<Scalars["Boolean"]["output"]>;
    user?: Maybe<User>;
    userAgreements: UserAgreementConnection;
    users: UserConnection;
    vacationSchedules: Array<VacationSchedule>;
    variants: VariantConnection;
    vatSender: Scalars["String"]["output"];
    vendor?: Maybe<Vendor>;
    vendorContracts: VendorContractConnection;
    vendors: VendorConnection;
    wallet?: Maybe<Scalars["Boolean"]["output"]>;
    walletDashboard: Array<WalletDashboard>;
    walletReports: Scalars["JSON"]["output"];
    walletSales: Scalars["JSON"]["output"];
    walletTransactions: TransactionConnection;
    wallets: WalletConnection;
    webListings: ListingConnection;
    webhooks: WebhookConnection;
    white?: Maybe<Scalars["String"]["output"]>;
    wishedProducts: WishedProductConnection;
    wishlists: WishlistConnection;
    zones: Array<Zone>;
  };

export type WebsiteAdjustmentReportArgs = {
  filter?: InputMaybe<LineItemFilter>;
  from?: InputMaybe<Scalars["String"]["input"]>;
  promotion?: InputMaybe<Scalars["Boolean"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  to?: InputMaybe<Scalars["String"]["input"]>;
};

export type WebsiteAgendaTagsArgs = {
  filter?: InputMaybe<TagFilter>;
};

export type WebsiteAgendasArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AgendaFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteAirBookingsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AirBookingFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteAirCommissionsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AirCommissionFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteAirLimitationsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AirLimitationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteAirTicketsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AirTicketFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteAlibabaOrdersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AlibabaOrderFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteAlibabaWaybillsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AlibabaWaybillFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteApplicationsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ApplicationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteArticleTagsArgs = {
  filter?: InputMaybe<TagFilter>;
};

export type WebsiteArticlesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ArticleFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteAssetRolesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AssetFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteAuthorsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<AuthorFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteAvailableTicketsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ListingFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteBadgeArgs = {
  id: Scalars["ID"]["input"];
};

export type WebsiteBadgesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<BadgeFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteBankAccountNameArgs = {
  bankAccount: B2bBusinessUserBankAccountInput;
};

export type WebsiteBranchesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<BranchFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteBrandsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<BrandListingFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteBusinessClientIdsArgs = {
  filter?: InputMaybe<BusinessClientFilter>;
};

export type WebsiteBusinessClientsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<BusinessClientFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteBusinessTypesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<BusinessTypeFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteByVendorArgs = {
  filter?: InputMaybe<LineItemFilter>;
  orders: Scalars["String"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type WebsiteCampaignArgs = {
  id: Scalars["ID"]["input"];
};

export type WebsiteCampaignsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<CampaignFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteCanIArgs = {
  action: CanIAction;
};

export type WebsiteCancelReasonsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteChatRoomsArgs = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<RoomFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteClientsStoreArgs = {
  id: Scalars["ID"]["input"];
};

export type WebsiteClientsStoresArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ClientsStoreFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteCorporateGatewaysArgs = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type WebsiteCouponCodeUsagesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<CouponCodeUsageFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteCouponsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<CouponFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteCreditCardsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<CreditCardsFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteDataBooleanPropertyArgs = {
  name: Scalars["String"]["input"];
};

export type WebsiteDeliveryReportArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OrderFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  from: Scalars["String"]["input"];
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  promotion?: InputMaybe<Scalars["Boolean"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  status?: InputMaybe<Scalars["String"]["input"]>;
  to: Scalars["String"]["input"];
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type WebsiteDispatchCallsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<DispatchCallFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteDonationsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<DonationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteDriversArgs = {
  filter?: InputMaybe<OrderFilter>;
  from: Scalars["ISO8601DateTime"]["input"];
  to: Scalars["ISO8601DateTime"]["input"];
};

export type WebsiteEMailCampaignsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<EMailCampaignFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteEMailContactsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<EMailContactFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteEMailSegmentsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<EMailSegmentFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteETicketsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ETicketFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteEbarimtReportArgs = {
  filter?: InputMaybe<OrderFilter>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteElasticReportArgs = {
  params?: InputMaybe<Scalars["JSON"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type WebsiteErpIntegrationsArgs = {
  filter?: InputMaybe<ErpIntegrationFilter>;
};

export type WebsiteEventEntriesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<EventEntryFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteEventInviteArgs = {
  id: Scalars["ID"]["input"];
};

export type WebsiteEventInvitesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<EventInviteFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteFeaturedsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<FeaturedFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteFeedbackTopicsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<FeedbackTopicFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteFeedbacksArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<FeedbackFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteFulfillmentDashboardArgs = {
  filter?: InputMaybe<OrderFilter>;
};

export type WebsiteGamesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<GameFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteGamificationsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<GamificationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteGcArgs = {
  id?: InputMaybe<Scalars["String"]["input"]>;
  redemptionCode?: InputMaybe<Scalars["String"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type WebsiteGiftCardsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<GiftCardFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteHandlebarTemplatesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<HandlebarTemplateFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteIntegrationReportsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<IntegrationReportFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteLineItemReportArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  coupon?: InputMaybe<Scalars["Boolean"]["input"]>;
  couponFrom?: InputMaybe<Scalars["String"]["input"]>;
  couponTo?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<LineItemFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  flag?: InputMaybe<Scalars["JSON"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  storeId?: InputMaybe<Scalars["ID"]["input"]>;
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type WebsiteLineItemsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  excludeBankPending?: InputMaybe<Scalars["Boolean"]["input"]>;
  filter?: InputMaybe<LineItemFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  ready?: InputMaybe<Scalars["Boolean"]["input"]>;
  reportType?: InputMaybe<Scalars["String"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteListingsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ListingFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteLookBooksArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<LookBookFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteMTemplatesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<EMailTemplateFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteMapDriversArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  latitude: Scalars["String"]["input"];
  longitude: Scalars["String"]["input"];
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteMapOrdersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OrderFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  latitude: Scalars["String"]["input"];
  longitude: Scalars["String"]["input"];
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteMapStoresArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<StoreLocationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  latitude: Scalars["String"]["input"];
  longitude: Scalars["String"]["input"];
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteMassMessagesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<MassMessageFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteMenuArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  title?: InputMaybe<Scalars["String"]["input"]>;
};

export type WebsiteMerchantArgs = {
  id: Scalars["ID"]["input"];
};

export type WebsiteMerchantsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<MerchantFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteMovieTicketsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<MovieTicketFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteNewsArgs = {
  id: Scalars["ID"]["input"];
};

export type WebsiteNewsTagsArgs = {
  filter?: InputMaybe<TagFilter>;
  websiteSpecific?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type WebsiteNewsesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<NewsFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteNoticesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<NoticeFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteNotificationsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<NotificationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteOneSignalDevicesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OneSignalDeviceFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  segmentId?: InputMaybe<Scalars["ID"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteOneSignalSegmentsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OneSignalSegmentFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteOptionTypesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OptionTypeFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteOrderDashboardArgs = {
  filter?: InputMaybe<OrderFilter>;
};

export type WebsiteOrderNotesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OrderCommentFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteOrderPaymentDashboardArgs = {
  filter?: InputMaybe<OrderFilter>;
};

export type WebsiteOrderReportArgs = {
  filter?: InputMaybe<OrderFilter>;
  from: Scalars["String"]["input"];
  promotion?: InputMaybe<Scalars["Boolean"]["input"]>;
  status?: InputMaybe<Scalars["String"]["input"]>;
  to: Scalars["String"]["input"];
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type WebsiteOrderTemplatesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OrderTemplateFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteOrdersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<OrderFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  status?: InputMaybe<OrderStatus>;
};

export type WebsitePackageArgs = {
  id: Scalars["ID"]["input"];
};

export type WebsitePackageListArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TutDeliveryPackageFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsitePackagesArgs = {
  ids: Array<Scalars["ID"]["input"]>;
};

export type WebsitePageArgs = {
  id?: InputMaybe<Scalars["ID"]["input"]>;
  slug?: InputMaybe<Scalars["String"]["input"]>;
};

export type WebsitePagesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PageFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsitePaymentMethodsArgs = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  afterPay?: InputMaybe<Scalars["Boolean"]["input"]>;
  displayOn?: InputMaybe<Array<PmDisplayKind>>;
};

export type WebsitePaymentReturnReasonsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PaymentReturnReasonFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsitePaymentReturnSourcesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PaymentReturnSourceFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsitePaymentReturnsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PaymentReturnFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsitePaymentsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PaymentFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsitePollsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PollFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsitePrescriptionArgs = {
  id: Scalars["ID"]["input"];
};

export type WebsitePrescriptionsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PrescriptionFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsitePrintingsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PrintingFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteProductReturnsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ProductReturnFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsitePromotionsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  dateType?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PromotionFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  from?: InputMaybe<Scalars["String"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  to?: InputMaybe<Scalars["String"]["input"]>;
};

export type WebsitePrototypesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PrototypeFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsitePushTemplatesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<PushTemplateFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteQuizzesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<QuizFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteRelatedProductsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<RelationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteReportsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ReportsFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteReviewsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ReviewsFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  isDeleted?: InputMaybe<Scalars["Boolean"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteShipmentTrackingsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ShipmentTrackingFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteShipmentsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ShipmentFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteShippersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteShippingCategoriesArgs = {
  filter?: InputMaybe<ShippingCategoryFilter>;
};

export type WebsiteShippingMethodsArgs = {
  filter?: InputMaybe<ShippingMethodFilter>;
};

export type WebsiteShoppyImagesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ShoppyImageFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteSmsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<SmsFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteSmsReportArgs = {
  filter?: InputMaybe<SmsFilter>;
  interval?: InputMaybe<Scalars["String"]["input"]>;
};

export type WebsiteStockLocationsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<StockLocationFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteStoreCreditLineItemsReportArgs = {
  filter?: InputMaybe<LineItemFilter>;
  filterType?: InputMaybe<Scalars["String"]["input"]>;
  from: Scalars["String"]["input"];
  sort?: InputMaybe<SortFilter>;
  to: Scalars["String"]["input"];
};

export type WebsiteStoreCreditReportArgs = {
  filter?: InputMaybe<StoreCreditEventFilter>;
  from?: InputMaybe<Scalars["String"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  to?: InputMaybe<Scalars["String"]["input"]>;
};

export type WebsiteStoreCreditsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<StoreCreditFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteStoreLocationArgs = {
  id: Scalars["ID"]["input"];
};

export type WebsiteStoresAddressesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  categoryIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  filter?: InputMaybe<AddressFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  wid?: InputMaybe<Scalars["ID"]["input"]>;
};

export type WebsiteSupplierCategoriesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<SupplierCategoryFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteSupplySegmentsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<SupplySegmentFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteTagsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TagFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
  websiteSpecific?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type WebsiteTaxCategoriesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteTaxRatesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteTaxonsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TaxonFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteTicketTemplatesArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TicketTemplateFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteUserArgs = {
  id: Scalars["ID"]["input"];
};

export type WebsiteUserAgreementsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<UserAgreementFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteUsersArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<UserFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteVariantsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<VariantFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  permission?: InputMaybe<VariantsPermission>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteVendorContractsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<VendorContractFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteVendorsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<VendorFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteWalletReportsArgs = {
  dateFrom: Scalars["ISO8601Date"]["input"];
  dateTo: Scalars["ISO8601Date"]["input"];
  first?: InputMaybe<Scalars["Int"]["input"]>;
  page?: InputMaybe<Scalars["Int"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type WebsiteWalletSalesArgs = {
  dateFrom: Scalars["ISO8601Date"]["input"];
  dateTo: Scalars["ISO8601Date"]["input"];
  first?: InputMaybe<Scalars["Int"]["input"]>;
  page?: InputMaybe<Scalars["Int"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type WebsiteWalletTransactionsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<TransactionFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteWalletsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<WalletFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteWebListingsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<ListingFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteWebhooksArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteWishedProductsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<WishedProductFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteWishlistsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>;
  before?: InputMaybe<Scalars["String"]["input"]>;
  filter?: InputMaybe<WishlistFilter>;
  first?: InputMaybe<Scalars["Int"]["input"]>;
  last?: InputMaybe<Scalars["Int"]["input"]>;
  offset?: InputMaybe<Scalars["Int"]["input"]>;
  sort?: InputMaybe<SortFilter>;
};

export type WebsiteConnection = {
  __typename?: "WebsiteConnection";
  edges: Array<WebsiteEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Website>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type WebsiteConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type WebsiteConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type WebsiteEdge = {
  __typename?: "WebsiteEdge";
  cursor: Scalars["String"]["output"];
  node: Website;
};

export type WebsiteFilter = {
  createdAt?: InputMaybe<DateFilter>;
  currency?: InputMaybe<StringFilter>;
  domain?: InputMaybe<StringFilter>;
  id?: InputMaybe<IdFilter>;
  index?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  nameOrDomain?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  vendor?: InputMaybe<VendorFilter>;
};

export type WhiteListEntry = BaseModelInterface &
  Node & {
    __typename?: "WhiteListEntry";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    entryDate?: Maybe<Scalars["ISO8601Date"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
  };

export type WhiteListEntryCanIArgs = {
  action: CanIAction;
};

export type WhiteListEntryFilter = {
  createdAt?: InputMaybe<DateFilter>;
  entryDate?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  updatedAt?: InputMaybe<DateFilter>;
};

export type WishedProduct = BaseModelInterface &
  Node & {
    __typename?: "WishedProduct";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    quantity?: Maybe<Scalars["Int"]["output"]>;
    remark?: Maybe<Scalars["String"]["output"]>;
    slug?: Maybe<Scalars["String"]["output"]>;
    total: Scalars["Int"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    variant: Variant;
    variantId: Scalars["ID"]["output"];
    websiteTotal: Scalars["Int"]["output"];
    wishlist: Wishlist;
  };

export type WishedProductCanIArgs = {
  action: CanIAction;
};

export type WishedProductConnection = {
  __typename?: "WishedProductConnection";
  edges: Array<WishedProductEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<WishedProduct>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type WishedProductConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type WishedProductConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type WishedProductEdge = {
  __typename?: "WishedProductEdge";
  cursor: Scalars["String"]["output"];
  node: WishedProduct;
};

export type WishedProductFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  quantity?: InputMaybe<IntFilter>;
  total?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  userId?: InputMaybe<IdFilter>;
  variant?: InputMaybe<VariantFilter>;
  variantId?: InputMaybe<IdFilter>;
  website?: InputMaybe<WebsiteFilter>;
  websiteId?: InputMaybe<IdFilter>;
  websiteTotal?: InputMaybe<IntFilter>;
};

export type Wishlist = BaseModelInterface &
  Node & {
    __typename?: "Wishlist";
    accessHash: Scalars["String"]["output"];
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    isDefault: Scalars["Boolean"]["output"];
    isPrivate: Scalars["Boolean"]["output"];
    name: Scalars["String"]["output"];
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user: User;
    website: Website;
    wishedProducts: Array<WishedProduct>;
    wishedVariantIds: Array<Scalars["ID"]["output"]>;
  };

export type WishlistCanIArgs = {
  action: CanIAction;
};

export type WishlistWishedProductsArgs = {
  take?: InputMaybe<Scalars["Int"]["input"]>;
};

export type WishlistConnection = {
  __typename?: "WishlistConnection";
  edges: Array<WishlistEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<Wishlist>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type WishlistConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type WishlistConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type WishlistEdge = {
  __typename?: "WishlistEdge";
  cursor: Scalars["String"]["output"];
  node: Wishlist;
};

export type WishlistFilter = {
  createdAt?: InputMaybe<DateFilter>;
  id?: InputMaybe<IdFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateFilter>;
  user?: InputMaybe<UserFilter>;
  userId?: InputMaybe<IdFilter>;
  website?: InputMaybe<WebsiteFilter>;
  websiteId?: InputMaybe<IdFilter>;
};

export type Zipcode = BaseModelInterface &
  Node & {
    __typename?: "Zipcode";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    level?: Maybe<Scalars["Int"]["output"]>;
    name?: Maybe<Scalars["String"]["output"]>;
    nameEn?: Maybe<Scalars["String"]["output"]>;
    parent?: Maybe<Zipcode>;
    point?: Maybe<Scalars["String"]["output"]>;
    polydataString?: Maybe<Scalars["String"]["output"]>;
    state?: Maybe<State>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    zipcode?: Maybe<Scalars["String"]["output"]>;
  };

export type ZipcodeCanIArgs = {
  action: CanIAction;
};

export type Zone = BaseModelInterface &
  Node & {
    __typename?: "Zone";
    canI: Scalars["Boolean"]["output"];
    countries: Array<Country>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    defaultTax?: Maybe<Scalars["Boolean"]["output"]>;
    description?: Maybe<Scalars["String"]["output"]>;
    districts: Array<District>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    kind?: Maybe<Scalars["String"]["output"]>;
    name?: Maybe<Scalars["String"]["output"]>;
    pup: Scalars["Boolean"]["output"];
    quarters: Array<Quarter>;
    states: Array<State>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
    zonableIds: Array<Scalars["ID"]["output"]>;
    zoneMembersCount?: Maybe<Scalars["Int"]["output"]>;
  };

export type ZoneCanIArgs = {
  action: CanIAction;
};

export type AcceptDispatchInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type AcceptMassChatMessageInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type AcceptPrescriptionInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  reviewComment?: InputMaybe<Scalars["String"]["input"]>;
  status?: InputMaybe<PrescriptionStatus | `${PrescriptionStatus}`>;
};

export type ActionCollectInput = {
  action: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  params?: InputMaybe<Scalars["JSON"]["input"]>;
};

export type AddBankAccountInput = {
  accountNo: Scalars["String"]["input"];
  additionalDetails: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  password: Scalars["String"]["input"];
};

export type AddBankToWalletInput = {
  accountNo: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  walletId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type AddBatchStoreListingsInput = {
  businessId: Scalars["ID"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  sku: Scalars["String"]["input"];
  status: Scalars["String"]["input"];
  vendorId: Scalars["ID"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type AddBtobEmployeeBankAccountInput = {
  bankAccount: B2bBusinessUserBankAccountInput;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
};

export type AddCampaignListInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  listings: Array<CampaignListingInput>;
};

export type AddClientsToSegmentInput = {
  clientIds: Array<Scalars["ID"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  segmentId: Scalars["ID"]["input"];
};

export type AddCommentInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  comment: Scalars["String"]["input"];
  commentableId: Scalars["ID"]["input"];
  commentableType: Scalars["String"]["input"];
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  mentions?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  title?: InputMaybe<Scalars["String"]["input"]>;
};

export type AddEmployeeInput = {
  assets?: InputMaybe<Scalars["JSON"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  firstName: Scalars["String"]["input"];
  lastName?: InputMaybe<Scalars["String"]["input"]>;
  mobile?: InputMaybe<Scalars["String"]["input"]>;
  msCode?: InputMaybe<Scalars["String"]["input"]>;
  role: EmployeeRole | `${EmployeeRole}`;
  salesManagerBonus?: InputMaybe<Scalars["Float"]["input"]>;
  salesManagerIsVendor?: InputMaybe<Scalars["Boolean"]["input"]>;
  userId?: InputMaybe<Scalars["ID"]["input"]>;
  vendorId: Scalars["ID"]["input"];
};

export type AddEmployeeToSegmentInput = {
  businessUserIds: Array<Scalars["ID"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  duration: Scalars["Int"]["input"];
  id: Scalars["ID"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type AddEventInviteItemInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  items: Scalars["JSON"]["input"];
};

export type AddItemToCompleteOrderInput = {
  actn?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  options?: InputMaybe<Scalars["JSON"]["input"]>;
  shipmentId?: InputMaybe<Scalars["ID"]["input"]>;
  variants: Array<LineItemInput>;
};

export type AddOrderNoteInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  comment: Scalars["String"]["input"];
  commentTypeId?: InputMaybe<Scalars["ID"]["input"]>;
  mentions?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  orderId: Scalars["ID"]["input"];
};

export type AddPrescriptionItemInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  drugName: Scalars["String"]["input"];
  drugNumber?: InputMaybe<Scalars["String"]["input"]>;
  frequency?: InputMaybe<Scalars["Int"]["input"]>;
  prescriptionId: Scalars["ID"]["input"];
  quantity: Scalars["Int"]["input"];
  variantIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
};

export type AddPriceInput = {
  amount: Scalars["Float"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  currency: Scalars["String"]["input"];
  position?: InputMaybe<Scalars["Int"]["input"]>;
  updateAll?: InputMaybe<Scalars["Boolean"]["input"]>;
  variantId: Scalars["ID"]["input"];
};

export type AddPromotionNoteInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  comment: Scalars["String"]["input"];
  commentTypeId?: InputMaybe<Scalars["ID"]["input"]>;
  mentions?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  promotionId: Scalars["ID"]["input"];
};

export type AddPrototypeToWebsiteInput = {
  action: Scalars["String"]["input"];
  applyChildren: Scalars["Boolean"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type AddStockToLocationInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  quantity: Scalars["Int"]["input"];
  stockLocationId: Scalars["ID"]["input"];
  variantId: Scalars["ID"]["input"];
};

export type AddToCartInput = {
  batch?: InputMaybe<Array<CartItemInput>>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  number?: InputMaybe<Scalars["String"]["input"]>;
  params?: InputMaybe<Scalars["JSON"]["input"]>;
  single?: InputMaybe<CartItemInput>;
  takeLocationId?: InputMaybe<Scalars["ID"]["input"]>;
  token?: InputMaybe<Scalars["String"]["input"]>;
};

export type AddToPosCartInput = {
  batch?: InputMaybe<Array<CartItemInput>>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  forceNew?: InputMaybe<Scalars["Boolean"]["input"]>;
  number?: InputMaybe<Scalars["String"]["input"]>;
  params?: InputMaybe<Scalars["JSON"]["input"]>;
  single?: InputMaybe<CartItemInput>;
  storeLocationId: Scalars["ID"]["input"];
  token?: InputMaybe<Scalars["String"]["input"]>;
};

export type AddToWishInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  quantity?: InputMaybe<Scalars["Int"]["input"]>;
  remark?: InputMaybe<Scalars["String"]["input"]>;
  variantId: Scalars["ID"]["input"];
  wishlistId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type AddUsersToSegmentInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  duration: Scalars["Int"]["input"];
  segmentId: Scalars["ID"]["input"];
  userIds: Array<Scalars["ID"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type AdminAddBtobEmployeeBankAccountInput = {
  bankAccount: B2bBusinessUserBankAccountInput;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type AdminCreateBtobBusinessClientInput = {
  businessSupplierObject: BusinessClientInput;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type AdminCreateCreditWalletInput = {
  businessClientId: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  productId: Scalars["String"]["input"];
};

export type AdminCreateDebitWalletInput = {
  businessClientId: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  productId: Scalars["String"]["input"];
};

export type AdminCreateRepaymentTransactionInput = {
  amount: Scalars["Float"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description: Scalars["String"]["input"];
  transactionId: Scalars["ID"]["input"];
};

export type AdminCreateWalletTransactionInput = {
  action?: InputMaybe<WalletTransactionAction | `${WalletTransactionAction}`>;
  amount: Scalars["Float"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  dueDate?: InputMaybe<Scalars["String"]["input"]>;
  typeCode?: InputMaybe<TypeCodeEnum | `${TypeCodeEnum}`>;
  walletId: Scalars["ID"]["input"];
};

export type AdminDecideBtobEmployeeBankAccountInput = {
  bankAccount: B2bBusinessUserBankAccountInput;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  status: B2bApprovalDecisionStatusEnum | `${B2bApprovalDecisionStatusEnum}`;
};

export type AdminDecisionBtobBusinessClientInput = {
  approvalDecisionInput: Array<ApprovalDecision>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
};

export type AdminRemoveBtobEmployeeBankAccountInput = {
  bankAccount: B2bBusinessUserBankAccountInput;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type AdminSyncBtobVendorsInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  syncWithErp?: InputMaybe<Scalars["Boolean"]["input"]>;
  websiteId: Scalars["String"]["input"];
};

export type AdminUpdateBtobBusinessClientInput = {
  businessSupplierObject: BusinessClientInput;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
};

export type AirCompleteBookingInput = {
  alternativePhone?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  email: Scalars["String"]["input"];
  firstname: Scalars["String"]["input"];
  id: Scalars["ID"]["input"];
  lastname: Scalars["String"]["input"];
  phone: Scalars["String"]["input"];
};

export type AirCreateBookingInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  itineraries: Array<ItineraryInput>;
  options?: InputMaybe<Scalars["JSON"]["input"]>;
  passengers: Array<PassengerInput>;
  vc: Scalars["String"]["input"];
};

export type AirIssueTicketInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type AirPnrRetrieveInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type AirRestartBookingInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type AirSellBookingInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type AirUpdatePassengerForBookingInput = {
  bookingsPassengers: Scalars["JSON"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type ApplyCouponInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  couponCode: Scalars["String"]["input"];
  orderId: Scalars["ID"]["input"];
};

export type ApproveEventInviteInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["String"]["input"];
};

export type ApproveOrdersInput = {
  action?: InputMaybe<ApproveAction | `${ApproveAction}`>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  clientsStoreId: Scalars["ID"]["input"];
  comment?: InputMaybe<Scalars["String"]["input"]>;
  ids: Array<Scalars["ID"]["input"]>;
};

export type AssignCreditCardInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  userId: Scalars["ID"]["input"];
};

export type AssignEmployeesInput = {
  channelRoles: Array<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  userId: Scalars["ID"]["input"];
  vendorIds: Array<Scalars["ID"]["input"]>;
  vendorRoles: Array<Scalars["String"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type AssignMassPromoInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  promotionId: Scalars["ID"]["input"];
  users: Scalars["String"]["input"];
};

export type AssignSalesManagerByMsCodeInput = {
  businessClientId?: InputMaybe<Scalars["ID"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  msCode: Scalars["String"]["input"];
};

export type AuthChangePasswordInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  login?: InputMaybe<Scalars["String"]["input"]>;
  password: Scalars["String"]["input"];
  token: Scalars["String"]["input"];
};

export type AuthChangePasswordWithOldInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  currentPassword: Scalars["String"]["input"];
  password: Scalars["String"]["input"];
  passwordConfirm: Scalars["String"]["input"];
};

export type AuthCheckLoginInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  login: Scalars["String"]["input"];
  noToken?: InputMaybe<Scalars["Boolean"]["input"]>;
  otp?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type AuthCheckPosInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  login: Scalars["String"]["input"];
};

export type AuthRegisterInput = {
  birthday?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  familyName?: InputMaybe<Scalars["String"]["input"]>;
  firstName?: InputMaybe<Scalars["String"]["input"]>;
  gender?: InputMaybe<Gender | `${Gender}`>;
  lastName?: InputMaybe<Scalars["String"]["input"]>;
  login: Scalars["String"]["input"];
  nationality?: InputMaybe<Scalars["String"]["input"]>;
  password: Scalars["String"]["input"];
  registerNum?: InputMaybe<Scalars["String"]["input"]>;
  token?: InputMaybe<Scalars["String"]["input"]>;
};

export type AuthResetPasswordInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  login: Scalars["String"]["input"];
  redirectUri?: InputMaybe<Scalars["String"]["input"]>;
};

export type AuthValidateOtpInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  login: Scalars["String"]["input"];
  token: Scalars["String"]["input"];
};

export type AuthorizeTransactionInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type BatchCreateRelationInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  expireAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  relatedSku: Scalars["String"]["input"];
  relation: Scalars["String"]["input"];
  sku: Scalars["String"]["input"];
  startAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type BatchEMailContactCreateInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  contacts: Array<EMailContactInput>;
  websiteId: Scalars["ID"]["input"];
};

export type BatchUpdateVariantsInput = {
  barcode?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  costPrice?: InputMaybe<Scalars["Float"]["input"]>;
  depth?: InputMaybe<Scalars["Float"]["input"]>;
  fragile?: InputMaybe<Scalars["Boolean"]["input"]>;
  height?: InputMaybe<Scalars["Float"]["input"]>;
  hsCode?: InputMaybe<Scalars["String"]["input"]>;
  id: Array<Scalars["ID"]["input"]>;
  labelCode?: InputMaybe<Scalars["String"]["input"]>;
  netWeight?: InputMaybe<Scalars["Float"]["input"]>;
  nonReturnable?: InputMaybe<Scalars["Boolean"]["input"]>;
  packageCode?: InputMaybe<Scalars["String"]["input"]>;
  price?: InputMaybe<Scalars["Float"]["input"]>;
  priceCny?: InputMaybe<Scalars["Float"]["input"]>;
  priceJpy?: InputMaybe<Scalars["Float"]["input"]>;
  priceKrw?: InputMaybe<Scalars["Float"]["input"]>;
  priceMnt?: InputMaybe<Scalars["Float"]["input"]>;
  priceRub?: InputMaybe<Scalars["Float"]["input"]>;
  priceUsd?: InputMaybe<Scalars["Float"]["input"]>;
  priceUzs?: InputMaybe<Scalars["Float"]["input"]>;
  taxCode?: InputMaybe<Scalars["String"]["input"]>;
  weight?: InputMaybe<Scalars["Float"]["input"]>;
  width?: InputMaybe<Scalars["Float"]["input"]>;
};

export type BlackFridayPromotionInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
};

export type BuyParkingInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  locationCode?: InputMaybe<Scalars["String"]["input"]>;
  params?: InputMaybe<Scalars["JSON"]["input"]>;
  sessionId: Scalars["ID"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type CancelDispatchInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type CancelETicketInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type CancelEventInviteInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type CancelOrderTemplateInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type CapturePaymentInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type ChangeCustomerPosInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  customerId?: InputMaybe<Scalars["ID"]["input"]>;
  storeLocationId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type ChangeItemInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  quantity?: InputMaybe<Scalars["Int"]["input"]>;
  token?: InputMaybe<Scalars["String"]["input"]>;
  variantId: Scalars["ID"]["input"];
};

export type ChangeLoyaltyCardPasswordInput = {
  cardId: Scalars["ID"]["input"];
  cardPassword: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  otp: Scalars["String"]["input"];
};

export type ChargeGiftCardInput = {
  amount: Scalars["Float"]["input"];
  billAddress?: InputMaybe<AddressInput>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  number: Scalars["String"]["input"];
};

export type CheckAlifPayCardInput = {
  cardNum: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  paymentId: Scalars["ID"]["input"];
};

export type CheckBankAccountInput = {
  account: Scalars["String"]["input"];
  bankCode: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
};

export type CheckGolomtCardPasswordInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  golomtCardId: Scalars["ID"]["input"];
  password?: InputMaybe<Scalars["String"]["input"]>;
};

export type CheckIntendUserInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  username: Scalars["String"]["input"];
};

export type CheckLoyaltyCardInfoInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  phone: Scalars["String"]["input"];
};

export type CheckMobileInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  mobile: Scalars["String"]["input"];
};

export type CheckPaymentInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type CheckPosStageTicketInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  options?: InputMaybe<Scalars["JSON"]["input"]>;
  quantity: Scalars["Int"]["input"];
  variantId: Scalars["ID"]["input"];
};

export type CheckSegmentWhiteListInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  options?: InputMaybe<Scalars["JSON"]["input"]>;
};

export type CheckSpicInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  codes?: InputMaybe<Array<Scalars["String"]["input"]>>;
};

export type CheckTicketDuplicatesInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  variantId: Scalars["ID"]["input"];
};

export type ChristmasSlotPromotionInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
};

export type ClaimGiftInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  ids: Array<Scalars["ID"]["input"]>;
  lineItemId?: InputMaybe<Scalars["ID"]["input"]>;
  orderId?: InputMaybe<Scalars["ID"]["input"]>;
  promiseId: Scalars["ID"]["input"];
};

export type ClaimOrderAsDriverInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  number: Scalars["String"]["input"];
};

export type ClaimPromotionInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  ids: Array<Scalars["ID"]["input"]>;
};

export type ClearViewTrackInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  datetime?: InputMaybe<Scalars["String"]["input"]>;
};

export type ClearWishInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  wishlistId: Scalars["ID"]["input"];
};

export type ClickPaymentInvoice = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "clickPaymentInvoice";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    invoiceNumber?: Maybe<Scalars["String"]["output"]>;
    paymentMethod?: Maybe<PaymentMethod>;
    paymentMethodId?: Maybe<Scalars["ID"]["output"]>;
    phone?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type ClickPaymentInvoiceCanIArgs = {
  action: CanIAction;
};

export type ClonePageInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type CloneProductInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type CloneTicketTemplateInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type CollectOrderInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  orderId: Scalars["ID"]["input"];
};

export type ConfirmAlifPayChargeInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  lang?: InputMaybe<Scalars["String"]["input"]>;
  otp: Scalars["String"]["input"];
  paymentId: Scalars["ID"]["input"];
};

export type ConfirmGolomtVccInput = {
  amount?: InputMaybe<Scalars["Int"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  requestId: Scalars["String"]["input"];
};

export type ConfirmIntendInvoiceInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code: Scalars["String"]["input"];
  paymentId: Scalars["ID"]["input"];
};

export type ConfirmMerchantInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type ConfirmPosStageTicketInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  orderNumber: Scalars["String"]["input"];
};

export type ConfirmPrescriptionInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  shippingAddress?: InputMaybe<AddressInput>;
  shippingAddressId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type ConnectOrderToCgwInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  orderId: Scalars["ID"]["input"];
};

export type ConvertDropshipProductInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  ids: Array<Scalars["ID"]["input"]>;
  providerId: Scalars["ID"]["input"];
};

export type CreateAddressInput = {
  address1?: InputMaybe<Scalars["String"]["input"]>;
  address2?: InputMaybe<Scalars["String"]["input"]>;
  alias?: InputMaybe<Scalars["String"]["input"]>;
  alternativePhone?: InputMaybe<Scalars["String"]["input"]>;
  cdq?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  city?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  company?: InputMaybe<Scalars["String"]["input"]>;
  countryId?: InputMaybe<Scalars["ID"]["input"]>;
  districtId?: InputMaybe<Scalars["ID"]["input"]>;
  firstname?: InputMaybe<Scalars["String"]["input"]>;
  gender?: InputMaybe<Scalars["String"]["input"]>;
  geoPoint?: InputMaybe<Scalars["String"]["input"]>;
  isCompany?: InputMaybe<Scalars["Boolean"]["input"]>;
  lastname?: InputMaybe<Scalars["String"]["input"]>;
  latitude?: InputMaybe<Scalars["String"]["input"]>;
  longitude?: InputMaybe<Scalars["String"]["input"]>;
  mnQuarterId?: InputMaybe<Scalars["ID"]["input"]>;
  owningType?: InputMaybe<Scalars["String"]["input"]>;
  phone?: InputMaybe<Scalars["String"]["input"]>;
  quarterId?: InputMaybe<Scalars["ID"]["input"]>;
  stateId?: InputMaybe<Scalars["ID"]["input"]>;
  what3words?: InputMaybe<Scalars["String"]["input"]>;
  year?: InputMaybe<Scalars["String"]["input"]>;
  zipcode?: InputMaybe<Scalars["String"]["input"]>;
};

export type CreateAdjustmentInput = {
  adjustableId?: InputMaybe<Scalars["ID"]["input"]>;
  adjustableType?: InputMaybe<Adjustable | `${Adjustable}`>;
  amount: Scalars["Float"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  label: Scalars["String"]["input"];
  orderId: Scalars["ID"]["input"];
  taxAmount?: InputMaybe<Scalars["Float"]["input"]>;
};

export type CreateAgendaInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  date?: InputMaybe<Scalars["String"]["input"]>;
  location?: InputMaybe<Scalars["String"]["input"]>;
  preview?: InputMaybe<Scalars["String"]["input"]>;
  tagList?: InputMaybe<Array<Scalars["String"]["input"]>>;
  time?: InputMaybe<Scalars["String"]["input"]>;
  title: Scalars["String"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type CreateAirCommissionInput = {
  airline: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  commission1: Scalars["Float"]["input"];
  commission2: Scalars["Float"]["input"];
  fm1: Scalars["Float"]["input"];
  fm2: Scalars["Float"]["input"];
  rule1?: InputMaybe<Scalars["JSON"]["input"]>;
  rule2?: InputMaybe<Scalars["JSON"]["input"]>;
  stockAirline: Scalars["String"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type CreateAirLimitationInput = {
  basedOn: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type CreateAircraftInput = {
  cat?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  iata?: InputMaybe<Scalars["String"]["input"]>;
  icao?: InputMaybe<Scalars["String"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
};

export type CreateAirlineInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code: Scalars["String"]["input"];
  mn: Scalars["String"]["input"];
  name: Scalars["String"]["input"];
};

export type CreateAirportInput = {
  city?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  country?: InputMaybe<Scalars["String"]["input"]>;
  elevation?: InputMaybe<Scalars["Int"]["input"]>;
  iata?: InputMaybe<Scalars["String"]["input"]>;
  icao?: InputMaybe<Scalars["String"]["input"]>;
  lat?: InputMaybe<Scalars["Float"]["input"]>;
  lon?: InputMaybe<Scalars["Float"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  state?: InputMaybe<Scalars["String"]["input"]>;
  tz?: InputMaybe<Scalars["String"]["input"]>;
};

export type CreateApplicationInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  confidential?: InputMaybe<Scalars["Boolean"]["input"]>;
  name: Scalars["String"]["input"];
  onesignalAppId?: InputMaybe<Scalars["String"]["input"]>;
  onesignalAppKey?: InputMaybe<Scalars["String"]["input"]>;
  redirectUri?: InputMaybe<Scalars["String"]["input"]>;
  scopes?: InputMaybe<Scalars["String"]["input"]>;
  secret: Scalars["String"]["input"];
  uid: Scalars["String"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type CreateArticleInput = {
  blocks: Scalars["JSON"]["input"];
  canonicalLink?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  isDraft?: InputMaybe<Scalars["Boolean"]["input"]>;
  isFeatured?: InputMaybe<Scalars["Boolean"]["input"]>;
  isPublished?: InputMaybe<Scalars["Boolean"]["input"]>;
  items: Scalars["JSON"]["input"];
  licensing?: InputMaybe<Scalars["String"]["input"]>;
  seoDescription?: InputMaybe<Scalars["String"]["input"]>;
  seoKeywords?: InputMaybe<Scalars["String"]["input"]>;
  seoTitle?: InputMaybe<Scalars["String"]["input"]>;
  slug?: InputMaybe<Scalars["String"]["input"]>;
  title?: InputMaybe<Scalars["String"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type CreateAssemblyPartInput = {
  assemblyId?: InputMaybe<Scalars["ID"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  partId?: InputMaybe<Scalars["ID"]["input"]>;
  quantity: Scalars["Int"]["input"];
};

export type CreateAssetRoleInput = {
  assetId: Scalars["ID"]["input"];
  assetType: Scalars["String"]["input"];
  businessId: Scalars["ID"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  peopleId: Scalars["ID"]["input"];
  roles: Array<Scalars["String"]["input"]>;
};

export type CreateAuthorInput = {
  avatar?: InputMaybe<Scalars["Upload"]["input"]>;
  bio?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  fullName?: InputMaybe<Scalars["String"]["input"]>;
  isFeatured?: InputMaybe<Scalars["Boolean"]["input"]>;
  isPublic?: InputMaybe<Scalars["Boolean"]["input"]>;
  social?: InputMaybe<Scalars["JSON"]["input"]>;
  userId: Scalars["ID"]["input"];
  username?: InputMaybe<Scalars["String"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type CreateBadgeInput = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  attachment?: InputMaybe<Scalars["Upload"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description: Scalars["String"]["input"];
  expireAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  name: Scalars["String"]["input"];
  priority?: InputMaybe<Scalars["Int"]["input"]>;
  promotable?: InputMaybe<Scalars["Boolean"]["input"]>;
  startAt: Scalars["ISO8601DateTime"]["input"];
  style?: InputMaybe<Scalars["String"]["input"]>;
  url?: InputMaybe<Scalars["String"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type CreateBranchInput = {
  businessTypeId?: InputMaybe<Scalars["ID"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code?: InputMaybe<Scalars["String"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  phone?: InputMaybe<Scalars["String"]["input"]>;
  phone1?: InputMaybe<Scalars["String"]["input"]>;
  supplySegmentIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  vendorId: Scalars["ID"]["input"];
};

export type CreateBrandInput = {
  categoryType?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code: Scalars["String"]["input"];
  cover?: InputMaybe<Scalars["Upload"]["input"]>;
  isPublished?: InputMaybe<Scalars["Boolean"]["input"]>;
  logo?: InputMaybe<Scalars["Upload"]["input"]>;
  lvl3?: InputMaybe<Scalars["String"]["input"]>;
  lvl4?: InputMaybe<Scalars["String"]["input"]>;
  metaDescription?: InputMaybe<Scalars["String"]["input"]>;
  metaKeywords?: InputMaybe<Scalars["String"]["input"]>;
  monthlyFee?: InputMaybe<Scalars["Float"]["input"]>;
  name: Scalars["String"]["input"];
  officialLogo?: InputMaybe<Scalars["Upload"]["input"]>;
  seoTitle?: InputMaybe<Scalars["String"]["input"]>;
  storeType?: InputMaybe<Scalars["String"]["input"]>;
  url?: InputMaybe<Scalars["String"]["input"]>;
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
  websiteIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  whiteLogoId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type CreateBtobBusinessClientInput = {
  businessSupplierObject: BusinessClientInput;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
};

export type CreateBusinessTypeInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code: Scalars["String"]["input"];
  name: Scalars["String"]["input"];
};

export type CreateCampaignInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  cover?: InputMaybe<Scalars["Upload"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  endsAt: Scalars["ISO8601DateTime"]["input"];
  fulfillDate: Scalars["ISO8601Date"]["input"];
  listings: Array<CampaignListingInput>;
  location?: InputMaybe<Scalars["String"]["input"]>;
  maxItemsCount: Scalars["Int"]["input"];
  minItemsCount: Scalars["Int"]["input"];
  startsAt: Scalars["ISO8601DateTime"]["input"];
  title: Scalars["String"]["input"];
  vendorId: Scalars["ID"]["input"];
};

export type CreateCancelReasonInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  display?: InputMaybe<Scalars["Int"]["input"]>;
  position?: InputMaybe<Scalars["Int"]["input"]>;
  title: Scalars["String"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type CreateCardInput = {
  cardHolder?: InputMaybe<Scalars["String"]["input"]>;
  cardNumber: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  expiresAt: Scalars["String"]["input"];
  provider: Scalars["String"]["input"];
};

export type CreateChatRoomInput = {
  aroundId: Scalars["ID"]["input"];
  aroundType: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
};

export type CreateClientsStoreInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  clientsStoreObject: ClientsStoreInputType;
};

export type CreateClonedPrototypeInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  clonedIds: Array<Scalars["ID"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type CreateCorporateGatewayInput = {
  bank: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  preferences?: InputMaybe<Scalars["JSON"]["input"]>;
  transferPassword?: InputMaybe<Scalars["String"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type CreateCountryInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  iso: Scalars["String"]["input"];
  iso3: Scalars["String"]["input"];
  isoName: Scalars["String"]["input"];
  numcode: Scalars["Int"]["input"];
  statesRequired: Scalars["Boolean"]["input"];
  zipcodeRequired: Scalars["Boolean"]["input"];
};

export type CreateCreditCardInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  registerNum: Scalars["String"]["input"];
  token: Scalars["String"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type CreateDepartmentStoreInput = {
  address?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  cover?: InputMaybe<Scalars["Upload"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  logo?: InputMaybe<Scalars["Upload"]["input"]>;
  map?: InputMaybe<Scalars["String"]["input"]>;
  phoneNumber?: InputMaybe<Scalars["String"]["input"]>;
  schedule?: InputMaybe<Scalars["JSON"]["input"]>;
  timeSheets?: InputMaybe<Scalars["JSON"]["input"]>;
  title: Scalars["String"]["input"];
  winterTimeSheets?: InputMaybe<Scalars["JSON"]["input"]>;
};

export type CreateDispatchInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  orderId: Scalars["ID"]["input"];
};

export type CreateDistrictInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  preferences?: InputMaybe<Scalars["JSON"]["input"]>;
  stateId: Scalars["ID"]["input"];
  zipId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type CreateDownloadableAttachmentInput = {
  attachment: Scalars["Upload"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  variantId: Scalars["ID"]["input"];
};

export type CreateDynamicMenuInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  data: Scalars["JSON"]["input"];
  title: Scalars["String"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type CreateEMailCampaignInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  deliveredAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  fromEmail?: InputMaybe<Scalars["String"]["input"]>;
  fromName: Scalars["String"]["input"];
  name: Scalars["String"]["input"];
  preview?: InputMaybe<Scalars["String"]["input"]>;
  segmentId?: InputMaybe<Scalars["ID"]["input"]>;
  slug?: InputMaybe<Scalars["String"]["input"]>;
  state?: InputMaybe<Scalars["String"]["input"]>;
  subject?: InputMaybe<Scalars["String"]["input"]>;
  templateId?: InputMaybe<Scalars["ID"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type CreateEMailContactInput = {
  additionalInfo: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  email: Scalars["String"]["input"];
  firstName?: InputMaybe<Scalars["String"]["input"]>;
  lastName?: InputMaybe<Scalars["String"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type CreateEMailSegmentInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  name: Scalars["String"]["input"];
  operator?: InputMaybe<Scalars["String"]["input"]>;
  status?: InputMaybe<Scalars["String"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type CreateEMailTemplateInput = {
  bcc?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  from?: InputMaybe<Scalars["String"]["input"]>;
  isMjml?: InputMaybe<Scalars["Boolean"]["input"]>;
  mjml?: InputMaybe<Scalars["String"]["input"]>;
  reply?: InputMaybe<Scalars["String"]["input"]>;
  subject?: InputMaybe<Scalars["String"]["input"]>;
  template?: InputMaybe<Scalars["String"]["input"]>;
  title: Scalars["String"]["input"];
  to?: InputMaybe<Scalars["String"]["input"]>;
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type CreateErpIntegrationInput = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  autoSync?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  erp: Scalars["String"]["input"];
  frequency?: InputMaybe<Scalars["String"]["input"]>;
  matchField: Scalars["String"]["input"];
  name: Scalars["String"]["input"];
  preferences?: InputMaybe<Scalars["JSON"]["input"]>;
  repeat?: InputMaybe<Scalars["String"]["input"]>;
  time?: InputMaybe<Scalars["String"]["input"]>;
  vendorId: Scalars["ID"]["input"];
};

export type CreateEventInviteInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  company: Scalars["String"]["input"];
  description?: InputMaybe<Scalars["String"]["input"]>;
  items?: InputMaybe<Scalars["JSON"]["input"]>;
  productId: Scalars["ID"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type CreateFeaturedInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  from: Scalars["ISO8601DateTime"]["input"];
  isActive: Scalars["Boolean"]["input"];
  targetId: Scalars["ID"]["input"];
  targetType: Scalars["String"]["input"];
  to: Scalars["ISO8601DateTime"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type CreateGameInput = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  expireAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  icon?: InputMaybe<Scalars["Upload"]["input"]>;
  preferredFreeTryGiftCount?: InputMaybe<Scalars["Int"]["input"]>;
  preferredFreeTryGiftIntervalStartAt?: InputMaybe<
    Scalars["ISO8601DateTime"]["input"]
  >;
  preferredFreeTryGiftsEnabled?: InputMaybe<Scalars["Boolean"]["input"]>;
  preferredFreeTryInterval?: InputMaybe<Scalars["Int"]["input"]>;
  preferredMaxScoreOnSingleInstance?: InputMaybe<Scalars["Int"]["input"]>;
  preferredOrderTotalThreshold?: InputMaybe<Scalars["Int"]["input"]>;
  preferredOrderTryApplyOnEachInstance?: InputMaybe<
    Scalars["Boolean"]["input"]
  >;
  preferredOrderTryGiftCount?: InputMaybe<Scalars["Int"]["input"]>;
  preferredOrderTryGiftsEnabled?: InputMaybe<Scalars["Boolean"]["input"]>;
  preferredPrizeDistributionAt?: InputMaybe<
    Scalars["ISO8601DateTime"]["input"]
  >;
  preferredPrizeDistributionPool?: InputMaybe<Scalars["Int"]["input"]>;
  preferredPrizeDistributionType?: InputMaybe<Scalars["String"]["input"]>;
  preferredScoreThreshold?: InputMaybe<Scalars["Int"]["input"]>;
  preferredTotalPrizePool?: InputMaybe<Scalars["Int"]["input"]>;
  preferredTriesStoreEnabled?: InputMaybe<Scalars["Boolean"]["input"]>;
  preferredTryStorePrice?: InputMaybe<Scalars["Int"]["input"]>;
  preferredUserDailyUsageLimit?: InputMaybe<Scalars["Int"]["input"]>;
  preferredUserTryMaxLimit?: InputMaybe<Scalars["Int"]["input"]>;
  prizes?: InputMaybe<Array<GamePrizeInput>>;
  startAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  title: Scalars["String"]["input"];
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type CreateHandlebarTemplateInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code?: InputMaybe<Scalars["String"]["input"]>;
  data?: InputMaybe<Scalars["String"]["input"]>;
  paperSize?: InputMaybe<Scalars["String"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type CreateInvitationInput = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code: Scalars["String"]["input"];
  endsAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  name: Scalars["String"]["input"];
  preferences: Scalars["JSON"]["input"];
  startsAt: Scalars["ISO8601DateTime"]["input"];
  type: Scalars["String"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type CreateKeywordInput = {
  alias?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  gpc?: InputMaybe<Scalars["String"]["input"]>;
  mn?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  prototypeId: Scalars["ID"]["input"];
};

export type CreateLeaseBlackListInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  registerNum: Scalars["String"]["input"];
};

export type CreateLeaseInput = {
  address?: InputMaybe<AddressInput>;
  birthday?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  eduDegree?: InputMaybe<Scalars["String"]["input"]>;
  education?: InputMaybe<EducationInput>;
  emergencyContracts: Array<EmergencyContactInput>;
  employment?: InputMaybe<EmploymentInput>;
  familyName?: InputMaybe<Scalars["String"]["input"]>;
  finance?: InputMaybe<FinanceInput>;
  firstName?: InputMaybe<Scalars["String"]["input"]>;
  gender?: InputMaybe<Scalars["String"]["input"]>;
  lastName?: InputMaybe<Scalars["String"]["input"]>;
  loanContracts?: InputMaybe<LoanContractInput>;
  maritalStatus?: InputMaybe<Scalars["String"]["input"]>;
  nameInvalid?: InputMaybe<Scalars["String"]["input"]>;
  nationality?: InputMaybe<Scalars["String"]["input"]>;
  ndCode?: InputMaybe<Scalars["String"]["input"]>;
  registerNum?: InputMaybe<Scalars["String"]["input"]>;
  repaymentDay?: InputMaybe<Scalars["Int"]["input"]>;
};

export type CreateListingsInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  fulfillDuration?: InputMaybe<Scalars["Int"]["input"]>;
  maxQty?: InputMaybe<Scalars["Int"]["input"]>;
  minQty?: InputMaybe<Scalars["Int"]["input"]>;
  productIds: Array<Scalars["ID"]["input"]>;
  shippingCategoryId: Scalars["ID"]["input"];
  stockLocationIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  taxCategoryId?: InputMaybe<Scalars["ID"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type CreateLookBookInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  cover?: InputMaybe<Scalars["Upload"]["input"]>;
  coverSquare?: InputMaybe<Scalars["Upload"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  isDraft?: InputMaybe<Scalars["Boolean"]["input"]>;
  photo?: InputMaybe<Scalars["Upload"]["input"]>;
  title: Scalars["String"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type CreateLoyaltyCardInput = {
  address?: InputMaybe<Scalars["String"]["input"]>;
  birthDate?: InputMaybe<Scalars["String"]["input"]>;
  cardPassword: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  customerName?: InputMaybe<Scalars["String"]["input"]>;
  customerParentName?: InputMaybe<Scalars["String"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  gender?: InputMaybe<Scalars["String"]["input"]>;
  homeAddress?: InputMaybe<AddressInput>;
  maritalStatus?: InputMaybe<Scalars["String"]["input"]>;
  note?: InputMaybe<Scalars["String"]["input"]>;
  otp?: InputMaybe<Scalars["String"]["input"]>;
  phone: Scalars["String"]["input"];
  registerNumber?: InputMaybe<Scalars["String"]["input"]>;
};

export type CreateMTemplateInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  html?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  text?: InputMaybe<Scalars["String"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type CreateMassChatMessageInput = {
  attachments?: InputMaybe<Array<Scalars["Upload"]["input"]>>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  content?: InputMaybe<Scalars["String"]["input"]>;
  roomIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  segment?: InputMaybe<Scalars["String"]["input"]>;
  sendAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type CreateNewsInput = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  body?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  cover?: InputMaybe<Scalars["JSON"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  tagList?: InputMaybe<Array<Scalars["String"]["input"]>>;
  thumbnail?: InputMaybe<Scalars["JSON"]["input"]>;
  title: Scalars["String"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type CreateNoticeInput = {
  body?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  expireAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  link?: InputMaybe<Scalars["String"]["input"]>;
  linkName?: InputMaybe<Scalars["String"]["input"]>;
  path?: InputMaybe<Scalars["String"]["input"]>;
  position?: InputMaybe<Scalars["Int"]["input"]>;
  startAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  title: Scalars["String"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type CreateNutritionFactInput = {
  altMeasures?: InputMaybe<Scalars["JSON"]["input"]>;
  brand?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code: Scalars["String"]["input"];
  fullNutrients?: InputMaybe<Scalars["JSON"]["input"]>;
  name: Scalars["String"]["input"];
  nfCalories?: InputMaybe<Scalars["Float"]["input"]>;
  nfCholesterol?: InputMaybe<Scalars["Float"]["input"]>;
  nfDietaryFiber?: InputMaybe<Scalars["Float"]["input"]>;
  nfP?: InputMaybe<Scalars["Float"]["input"]>;
  nfPotassium?: InputMaybe<Scalars["Float"]["input"]>;
  nfProtein?: InputMaybe<Scalars["Float"]["input"]>;
  nfSaturatedFat?: InputMaybe<Scalars["Float"]["input"]>;
  nfSodium?: InputMaybe<Scalars["Float"]["input"]>;
  nfSugars?: InputMaybe<Scalars["Float"]["input"]>;
  nfTotalCarbohydrate?: InputMaybe<Scalars["Float"]["input"]>;
  nfTotalFat?: InputMaybe<Scalars["Float"]["input"]>;
  servingQty?: InputMaybe<Scalars["Float"]["input"]>;
  servingUnit?: InputMaybe<Scalars["String"]["input"]>;
  servingWeightGrams?: InputMaybe<Scalars["Float"]["input"]>;
  vendorId: Scalars["ID"]["input"];
};

export type CreateOneSignalNotificationInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  data: Scalars["JSON"]["input"];
  deliveryIds?: InputMaybe<Array<Scalars["String"]["input"]>>;
  deliveryType?: InputMaybe<Scalars["String"]["input"]>;
  segmentId?: InputMaybe<Scalars["ID"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type CreateOneSignalSegmentInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  name: Scalars["String"]["input"];
  operator?: InputMaybe<Scalars["String"]["input"]>;
  status?: InputMaybe<Scalars["String"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type CreateOptionTypeInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  position?: InputMaybe<Scalars["Int"]["input"]>;
  presentation: Scalars["String"]["input"];
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type CreateOptionValueImageInput = {
  attachment: Scalars["Upload"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  optionValueId: Scalars["ID"]["input"];
  productId: Scalars["ID"]["input"];
};

export type CreateOptionValueInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  optionTypeId: Scalars["ID"]["input"];
  position?: InputMaybe<Scalars["Int"]["input"]>;
  presentation: Scalars["String"]["input"];
};

export type CreateOrUpdateProductInput = {
  availableOn?: InputMaybe<Scalars["String"]["input"]>;
  barcode?: InputMaybe<Scalars["String"]["input"]>;
  brand?: InputMaybe<Scalars["String"]["input"]>;
  cancelDuration?: InputMaybe<Scalars["Int"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  condition?: InputMaybe<Scalars["String"]["input"]>;
  costPrice?: InputMaybe<Scalars["Float"]["input"]>;
  currency?: InputMaybe<Scalars["String"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  depth?: InputMaybe<Scalars["Float"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  fileImages?: InputMaybe<Array<Scalars["Upload"]["input"]>>;
  fragile?: InputMaybe<Scalars["Boolean"]["input"]>;
  height?: InputMaybe<Scalars["Float"]["input"]>;
  hsCode?: InputMaybe<Scalars["String"]["input"]>;
  images?: InputMaybe<Array<Scalars["String"]["input"]>>;
  keyword?: InputMaybe<Scalars["String"]["input"]>;
  labelCode?: InputMaybe<Scalars["String"]["input"]>;
  merchantSku?: InputMaybe<Scalars["String"]["input"]>;
  metaDescription?: InputMaybe<Scalars["String"]["input"]>;
  metaKeywords?: InputMaybe<Scalars["String"]["input"]>;
  metaTitle?: InputMaybe<Scalars["String"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  netWeight?: InputMaybe<Scalars["Float"]["input"]>;
  nonReturnable?: InputMaybe<Scalars["Boolean"]["input"]>;
  optionValueImages?: InputMaybe<Scalars["JSON"]["input"]>;
  originalPrice?: InputMaybe<Scalars["Float"]["input"]>;
  packageCode?: InputMaybe<Scalars["String"]["input"]>;
  price?: InputMaybe<Scalars["Float"]["input"]>;
  priceCny?: InputMaybe<Scalars["Float"]["input"]>;
  priceJpy?: InputMaybe<Scalars["Float"]["input"]>;
  priceKrw?: InputMaybe<Scalars["Float"]["input"]>;
  priceMnt?: InputMaybe<Scalars["Float"]["input"]>;
  priceRub?: InputMaybe<Scalars["Float"]["input"]>;
  priceUsd?: InputMaybe<Scalars["Float"]["input"]>;
  priceUzs?: InputMaybe<Scalars["Float"]["input"]>;
  productCat?: InputMaybe<ProductCat | `${ProductCat}`>;
  property?: InputMaybe<Scalars["JSON"]["input"]>;
  shippingCategoryId?: InputMaybe<Scalars["ID"]["input"]>;
  sku: Scalars["String"]["input"];
  slug?: InputMaybe<Scalars["String"]["input"]>;
  stock?: InputMaybe<Scalars["Int"]["input"]>;
  stockLocations?: InputMaybe<Array<Scalars["JSON"]["input"]>>;
  stockLocked?: InputMaybe<Scalars["Boolean"]["input"]>;
  storeId?: InputMaybe<Scalars["ID"]["input"]>;
  taxCode?: InputMaybe<Scalars["String"]["input"]>;
  title?: InputMaybe<Scalars["String"]["input"]>;
  translations?: InputMaybe<Array<TranslationInput>>;
  variants?: InputMaybe<Array<VariantInput>>;
  vendorId: Scalars["ID"]["input"];
  weight?: InputMaybe<Scalars["Float"]["input"]>;
  width?: InputMaybe<Scalars["Float"]["input"]>;
};

export type CreateOrUpdateStoreListingInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  storeListings: Array<StoreListingInput>;
};

export type CreateOrderTemplateFromOrderInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  orderId: Scalars["ID"]["input"];
};

export type CreateOrderTemplateInput = {
  billAddress?: InputMaybe<AddressInput>;
  branchId?: InputMaybe<Scalars["ID"]["input"]>;
  businessId?: InputMaybe<Scalars["ID"]["input"]>;
  businessTypeIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  dayOfWeek?: InputMaybe<Scalars["String"]["input"]>;
  extraData?: InputMaybe<Scalars["JSON"]["input"]>;
  isDefault?: InputMaybe<Scalars["Boolean"]["input"]>;
  items?: InputMaybe<Array<OrderTemplateItemInput>>;
  name: Scalars["String"]["input"];
  nextDate: Scalars["ISO8601DateTime"]["input"];
  rule?: InputMaybe<Scalars["String"]["input"]>;
  shipAddress?: InputMaybe<AddressInput>;
  storeLocationId?: InputMaybe<Scalars["ID"]["input"]>;
  time?: InputMaybe<Scalars["String"]["input"]>;
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
  whenToShip?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
};

export type CreatePageInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  items?: InputMaybe<Scalars["JSON"]["input"]>;
  layout?: InputMaybe<Scalars["String"]["input"]>;
  menuId?: InputMaybe<Scalars["ID"]["input"]>;
  metaDescription?: InputMaybe<Scalars["String"]["input"]>;
  metaKeywords?: InputMaybe<Scalars["String"]["input"]>;
  metaTitle?: InputMaybe<Scalars["String"]["input"]>;
  preferences?: InputMaybe<Scalars["JSON"]["input"]>;
  slug: Scalars["String"]["input"];
  title?: InputMaybe<Scalars["String"]["input"]>;
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
  visible?: InputMaybe<Scalars["Boolean"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type CreateParcelLabelInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type CreatePaymentInput = {
  amount: Scalars["Float"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  orderId: Scalars["ID"]["input"];
  type?: InputMaybe<PaymentKind | `${PaymentKind}`>;
};

export type CreatePaymentMethodInput = {
  active?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  currencies?: InputMaybe<Array<Scalars["String"]["input"]>>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  position?: InputMaybe<Scalars["Int"]["input"]>;
  storeLocationId?: InputMaybe<Scalars["ID"]["input"]>;
  type: PaymentMethodKind | `${PaymentMethodKind}`;
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type CreatePaymentReturnInput = {
  accountBank: Scalars["String"]["input"];
  accountName?: InputMaybe<Scalars["String"]["input"]>;
  accountNumber?: InputMaybe<Scalars["String"]["input"]>;
  amount: Scalars["Float"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  commission?: InputMaybe<Scalars["Float"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  lineItemIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  note?: InputMaybe<Scalars["String"]["input"]>;
  orderId?: InputMaybe<Scalars["ID"]["input"]>;
  otherFee?: InputMaybe<Scalars["Float"]["input"]>;
  paidAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  paymentId?: InputMaybe<Scalars["ID"]["input"]>;
  reasonId?: InputMaybe<Scalars["ID"]["input"]>;
  sourceId?: InputMaybe<Scalars["ID"]["input"]>;
  transactionId?: InputMaybe<Scalars["ID"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type CreatePaymentReturnReasonInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type CreatePaymentReturnSourceInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type CreatePollInput = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  expireAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  image?: InputMaybe<Scalars["Upload"]["input"]>;
  question: Scalars["String"]["input"];
  startAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type CreatePosCustomerInput = {
  addresses?: InputMaybe<Array<AddressInput>>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  firstName?: InputMaybe<Scalars["String"]["input"]>;
  lastName?: InputMaybe<Scalars["String"]["input"]>;
  mobile: Scalars["String"]["input"];
  storeLocationId?: InputMaybe<Scalars["ID"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type CreatePosListingsInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  productIds: Array<Scalars["ID"]["input"]>;
  storeLocationId: Scalars["ID"]["input"];
};

export type CreatePrescriptionInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  image: Scalars["Upload"]["input"];
  image1?: InputMaybe<Scalars["Upload"]["input"]>;
};

export type CreateProductDocumentInput = {
  attachment: Scalars["Upload"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type CreateProductInput = {
  availableOn?: InputMaybe<Scalars["String"]["input"]>;
  barcode?: InputMaybe<Scalars["String"]["input"]>;
  brand?: InputMaybe<Scalars["String"]["input"]>;
  cancelDuration?: InputMaybe<Scalars["Int"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  condition?: InputMaybe<Scalars["String"]["input"]>;
  currency?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  fileImages?: InputMaybe<Array<Scalars["Upload"]["input"]>>;
  imageLinks?: InputMaybe<Array<Scalars["String"]["input"]>>;
  images?: InputMaybe<Array<Scalars["String"]["input"]>>;
  info?: InputMaybe<Scalars["JSON"]["input"]>;
  keyword?: InputMaybe<Scalars["String"]["input"]>;
  keywordId?: InputMaybe<Scalars["ID"]["input"]>;
  labelCode?: InputMaybe<Scalars["String"]["input"]>;
  listingOptions?: InputMaybe<Scalars["JSON"]["input"]>;
  merchantSku?: InputMaybe<Scalars["String"]["input"]>;
  metaDescription?: InputMaybe<Scalars["String"]["input"]>;
  metaKeywords?: InputMaybe<Scalars["String"]["input"]>;
  metaTitle?: InputMaybe<Scalars["String"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  packageCode?: InputMaybe<Scalars["String"]["input"]>;
  price?: InputMaybe<Scalars["Float"]["input"]>;
  productCat?: InputMaybe<ProductCat | `${ProductCat}`>;
  property?: InputMaybe<Scalars["JSON"]["input"]>;
  shippingCategoryId?: InputMaybe<Scalars["ID"]["input"]>;
  sku?: InputMaybe<Scalars["String"]["input"]>;
  slug?: InputMaybe<Scalars["String"]["input"]>;
  stock?: InputMaybe<Scalars["Int"]["input"]>;
  storeId?: InputMaybe<Scalars["ID"]["input"]>;
  taxCode?: InputMaybe<Scalars["String"]["input"]>;
  taxonIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  title?: InputMaybe<Scalars["String"]["input"]>;
  translations?: InputMaybe<Array<TranslationInput>>;
  variants?: InputMaybe<Array<VariantInput>>;
  vendor?: InputMaybe<Scalars["JSON"]["input"]>;
  vendorId: Scalars["ID"]["input"];
  youtube?: InputMaybe<Scalars["String"]["input"]>;
};

export type CreateProductReturnInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  lineItemIds: Array<Scalars["Int"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type CreatePromotionInput = {
  actions?: InputMaybe<Scalars["JSON"]["input"]>;
  advertise?: InputMaybe<Scalars["Boolean"]["input"]>;
  autoClaim?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  expiresAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  imageId?: InputMaybe<Scalars["ID"]["input"]>;
  link?: InputMaybe<Scalars["String"]["input"]>;
  matchPolicy?: InputMaybe<Scalars["String"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  preferences?: InputMaybe<Scalars["JSON"]["input"]>;
  priority?: InputMaybe<Scalars["Int"]["input"]>;
  rule?: InputMaybe<Scalars["JSON"]["input"]>;
  rules?: InputMaybe<Scalars["JSON"]["input"]>;
  startsAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  tagList?: InputMaybe<Array<Scalars["String"]["input"]>>;
  terms?: InputMaybe<Scalars["String"]["input"]>;
  usageLimit?: InputMaybe<Scalars["Int"]["input"]>;
  websiteIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
};

export type CreatePropertyInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  presentation: Scalars["String"]["input"];
};

export type CreatePropertyValueInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  presentation: Scalars["String"]["input"];
};

export type CreatePrototypeInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  keywordIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name: Scalars["String"]["input"];
  options?: InputMaybe<Scalars["JSON"]["input"]>;
  parentId?: InputMaybe<Scalars["ID"]["input"]>;
  presentation?: InputMaybe<Scalars["String"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type CreatePushTemplateInput = {
  appId?: InputMaybe<Scalars["ID"]["input"]>;
  appIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  body?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  deeplink?: InputMaybe<Scalars["String"]["input"]>;
  name: PushTemplateName | `${PushTemplateName}`;
  title: Scalars["String"]["input"];
  url?: InputMaybe<Scalars["String"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type CreateQuarterInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  districtId: Scalars["ID"]["input"];
  name: Scalars["String"]["input"];
  preferences?: InputMaybe<Scalars["JSON"]["input"]>;
  zipId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type CreateQuizInput = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  cover?: InputMaybe<Scalars["Upload"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  expireAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  gradeBy?: InputMaybe<Scalars["String"]["input"]>;
  permalink?: InputMaybe<Scalars["String"]["input"]>;
  preferredEntryPerUser?: InputMaybe<Scalars["Int"]["input"]>;
  preferredFrequency?: InputMaybe<Scalars["String"]["input"]>;
  preferredOnDisplay?: InputMaybe<Scalars["Int"]["input"]>;
  preferredRewardPerUser?: InputMaybe<Scalars["Int"]["input"]>;
  preferredTime?: InputMaybe<Scalars["Int"]["input"]>;
  questions?: InputMaybe<Array<QuizQuestionInput>>;
  rewards?: InputMaybe<Array<QuizRewardInput>>;
  startAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  title: Scalars["String"]["input"];
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type CreateRelationInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  expireAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  listingId?: InputMaybe<Scalars["ID"]["input"]>;
  relation: Scalars["String"]["input"];
  skus: Scalars["String"]["input"];
  slug?: InputMaybe<Scalars["ID"]["input"]>;
  startAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type CreateReportInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  message?: InputMaybe<Scalars["String"]["input"]>;
  reportReasonId?: InputMaybe<Scalars["ID"]["input"]>;
  targetId: Scalars["ID"]["input"];
  targetType: Scalars["String"]["input"];
};

export type CreateReportReasonInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  position: Scalars["Int"]["input"];
  status?: InputMaybe<Scalars["String"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type CreateReviewInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  comment?: InputMaybe<Scalars["String"]["input"]>;
  images?: InputMaybe<Array<Scalars["Upload"]["input"]>>;
  rating: Scalars["Float"]["input"];
  reviewableId: Scalars["ID"]["input"];
  reviewableType: Scalars["String"]["input"];
};

export type CreateSmsTemplateInput = {
  body: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  storeLocationId?: InputMaybe<Scalars["ID"]["input"]>;
  title: Scalars["String"]["input"];
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type CreateSalePriceInput = {
  amount: Scalars["Float"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  currency?: InputMaybe<Scalars["String"]["input"]>;
  eventLabel?: InputMaybe<Scalars["Boolean"]["input"]>;
  expireAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  forceOthers?: InputMaybe<Scalars["Boolean"]["input"]>;
  isEvent?: InputMaybe<Scalars["Boolean"]["input"]>;
  qty?: InputMaybe<Scalars["Int"]["input"]>;
  segmentId?: InputMaybe<Scalars["ID"]["input"]>;
  startAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  updateAll?: InputMaybe<Scalars["Boolean"]["input"]>;
  variantId: Scalars["ID"]["input"];
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type CreateSegmentWhiteListInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  email: Scalars["String"]["input"];
  mobile?: InputMaybe<Scalars["String"]["input"]>;
  referralId?: InputMaybe<Scalars["ID"]["input"]>;
  segmentId: Scalars["ID"]["input"];
};

export type CreateShipperInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  logo?: InputMaybe<Scalars["Upload"]["input"]>;
  name: Scalars["String"]["input"];
  phoneNumber?: InputMaybe<Scalars["String"]["input"]>;
  taxer?: InputMaybe<Scalars["Boolean"]["input"]>;
  vendorId: Scalars["ID"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type CreateShippingCategoryInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  step?: InputMaybe<Scalars["Int"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type CreateShippingMethodInput = {
  adminName?: InputMaybe<Scalars["String"]["input"]>;
  calculatorAttributes?: InputMaybe<Scalars["JSON"]["input"]>;
  calculatorType: Scalars["String"]["input"];
  channel?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  displayOn?: InputMaybe<Scalars["String"]["input"]>;
  logo?: InputMaybe<Scalars["Upload"]["input"]>;
  name: Scalars["String"]["input"];
  phone?: InputMaybe<Scalars["String"]["input"]>;
  shipperId?: InputMaybe<Scalars["ID"]["input"]>;
  shippingCategoryIds: Array<Scalars["ID"]["input"]>;
  step?: InputMaybe<Scalars["Int"]["input"]>;
  taxCategoryId?: InputMaybe<Scalars["ID"]["input"]>;
  trackingUrl?: InputMaybe<Scalars["String"]["input"]>;
  websiteId: Scalars["ID"]["input"];
  zoneIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
};

export type CreateShoppyImageInput = {
  attachment: Scalars["Upload"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type CreateSizingGuideInput = {
  ageGroup?: InputMaybe<Scalars["String"]["input"]>;
  brand?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  data?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  gender?: InputMaybe<Scalars["String"]["input"]>;
  grouping?: InputMaybe<Scalars["String"]["input"]>;
  storeId?: InputMaybe<Scalars["ID"]["input"]>;
  title: Scalars["String"]["input"];
  vendorId: Scalars["ID"]["input"];
};

export type CreateSmartGridInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  items?: InputMaybe<Scalars["JSON"]["input"]>;
  vendorId: Scalars["ID"]["input"];
  visible?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type CreateStateInput = {
  abbr: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  countryId: Scalars["ID"]["input"];
  name: Scalars["String"]["input"];
};

export type CreateStockLocationInput = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  address1?: InputMaybe<Scalars["String"]["input"]>;
  adminName: Scalars["String"]["input"];
  backorderableDefault?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code?: InputMaybe<Scalars["String"]["input"]>;
  countryId?: InputMaybe<Scalars["ID"]["input"]>;
  default?: InputMaybe<Scalars["Boolean"]["input"]>;
  name: Scalars["String"]["input"];
  phone?: InputMaybe<Scalars["String"]["input"]>;
  propagateAllVariants?: InputMaybe<Scalars["Boolean"]["input"]>;
  stateId?: InputMaybe<Scalars["ID"]["input"]>;
  storeLocationId?: InputMaybe<Scalars["ID"]["input"]>;
  timeSheets?: InputMaybe<Scalars["JSON"]["input"]>;
  vendorId: Scalars["ID"]["input"];
};

export type CreateStoreCreditInput = {
  amount: Scalars["Float"]["input"];
  amountUsed?: InputMaybe<Scalars["Float"]["input"]>;
  categoryId: Scalars["ID"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  memo?: InputMaybe<Scalars["String"]["input"]>;
  userId: Scalars["ID"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type CreateStoreLocationInput = {
  address?: InputMaybe<Scalars["String"]["input"]>;
  businessTypeId?: InputMaybe<Scalars["ID"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code?: InputMaybe<Scalars["String"]["input"]>;
  departmentStoreId?: InputMaybe<Scalars["ID"]["input"]>;
  floor?: InputMaybe<Scalars["Int"]["input"]>;
  locationAddressId?: InputMaybe<Scalars["ID"]["input"]>;
  map?: InputMaybe<Scalars["String"]["input"]>;
  phone?: InputMaybe<Scalars["String"]["input"]>;
  photo?: InputMaybe<Scalars["Upload"]["input"]>;
  preferences?: InputMaybe<Scalars["JSON"]["input"]>;
  schedule?: InputMaybe<Scalars["JSON"]["input"]>;
  storeIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  timeSheets?: InputMaybe<Scalars["JSON"]["input"]>;
  title: Scalars["String"]["input"];
  vendorId: Scalars["ID"]["input"];
  winterTimeSheets?: InputMaybe<Scalars["JSON"]["input"]>;
};

export type CreateSupplierCategoryInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type CreateSupplySegmentInput = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code: Scalars["String"]["input"];
  name: Scalars["String"]["input"];
  originId?: InputMaybe<Scalars["ID"]["input"]>;
  preference?: InputMaybe<Scalars["JSON"]["input"]>;
  type: Scalars["String"]["input"];
  vendorId: Scalars["ID"]["input"];
};

export type CreateSupplySegmentRestrictionInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  createdById: Scalars["ID"]["input"];
  sourceId: Scalars["ID"]["input"];
  sourceType: Scalars["String"]["input"];
  supplySegmentId: Scalars["ID"]["input"];
};

export type CreateTaxCategoryInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  taxCode?: InputMaybe<Scalars["String"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type CreateTaxRateInput = {
  amount: Scalars["Float"]["input"];
  calculatorAttributes: Scalars["JSON"]["input"];
  calculatorType: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  includedInPrice?: InputMaybe<Scalars["Boolean"]["input"]>;
  name: Scalars["String"]["input"];
  showRateInLabel?: InputMaybe<Scalars["Boolean"]["input"]>;
  taxCategoryId: Scalars["ID"]["input"];
  websiteId: Scalars["ID"]["input"];
  zoneId: Scalars["ID"]["input"];
};

export type CreateTaxonInput = {
  bannerLink?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  icon?: InputMaybe<Scalars["String"]["input"]>;
  imeiCodesEnabled?: InputMaybe<Scalars["Boolean"]["input"]>;
  isAdult?: InputMaybe<Scalars["Boolean"]["input"]>;
  labelCodesEnabled?: InputMaybe<Scalars["Boolean"]["input"]>;
  metaDescription?: InputMaybe<Scalars["String"]["input"]>;
  metaKeywords?: InputMaybe<Scalars["String"]["input"]>;
  metaTitle?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  parentId?: InputMaybe<Scalars["ID"]["input"]>;
  permalink: Scalars["String"]["input"];
  position?: InputMaybe<Scalars["Int"]["input"]>;
  propertyIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  queryString?: InputMaybe<Scalars["String"]["input"]>;
  taxCode?: InputMaybe<Scalars["String"]["input"]>;
  translationEn?: InputMaybe<Scalars["String"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type CreateTecAlliancePriceInput = {
  articleId: Scalars["ID"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  price?: InputMaybe<Scalars["Float"]["input"]>;
  stock?: InputMaybe<Scalars["Int"]["input"]>;
};

export type CreateTecAlliancePricesInput = {
  articles: Scalars["JSON"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
};

export type CreateTicketTemplateInput = {
  body: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  height: Scalars["Int"]["input"];
  pos?: InputMaybe<Scalars["Boolean"]["input"]>;
  sku: Scalars["String"]["input"];
  storeLocationId?: InputMaybe<Scalars["ID"]["input"]>;
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
  width: Scalars["Int"]["input"];
};

export type CreateTrackingInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  latitude: Scalars["String"]["input"];
  longitude: Scalars["String"]["input"];
};

export type CreateUserAddressInput = {
  address: AddressInput;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  userId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type CreateUserArticleInput = {
  articleId: Scalars["ID"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
};

export type CreateUserInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  login: Scalars["String"]["input"];
  password: Scalars["String"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type CreateVacationScheduleInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  date?: InputMaybe<Scalars["String"]["input"]>;
  dayOfWeek?: InputMaybe<Scalars["String"]["input"]>;
  endTime?: InputMaybe<Scalars["String"]["input"]>;
  repeat?: InputMaybe<Scalars["String"]["input"]>;
  startTime?: InputMaybe<Scalars["String"]["input"]>;
  timezone?: InputMaybe<Scalars["String"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type CreateVariantImageInput = {
  attachment: Scalars["Upload"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  variantId: Scalars["ID"]["input"];
};

export type CreateVariantImagesFromUrlInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  urls: Array<Scalars["String"]["input"]>;
  variantId: Scalars["ID"]["input"];
};

export type CreateVariantInput = {
  barcode?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  costPrice?: InputMaybe<Scalars["Float"]["input"]>;
  depth?: InputMaybe<Scalars["Float"]["input"]>;
  fragile?: InputMaybe<Scalars["Boolean"]["input"]>;
  height?: InputMaybe<Scalars["Float"]["input"]>;
  hsCode?: InputMaybe<Scalars["String"]["input"]>;
  labelCode?: InputMaybe<Scalars["String"]["input"]>;
  merchantSku?: InputMaybe<Scalars["String"]["input"]>;
  netWeight?: InputMaybe<Scalars["Float"]["input"]>;
  nonReturnable?: InputMaybe<Scalars["Boolean"]["input"]>;
  options?: InputMaybe<Scalars["JSON"]["input"]>;
  packageCode?: InputMaybe<Scalars["String"]["input"]>;
  price?: InputMaybe<Scalars["Float"]["input"]>;
  priceCny?: InputMaybe<Scalars["Float"]["input"]>;
  priceJpy?: InputMaybe<Scalars["Float"]["input"]>;
  priceKrw?: InputMaybe<Scalars["Float"]["input"]>;
  priceMnt?: InputMaybe<Scalars["Float"]["input"]>;
  priceRub?: InputMaybe<Scalars["Float"]["input"]>;
  priceUsd?: InputMaybe<Scalars["Float"]["input"]>;
  priceUzs?: InputMaybe<Scalars["Float"]["input"]>;
  productId: Scalars["ID"]["input"];
  sku?: InputMaybe<Scalars["String"]["input"]>;
  taxCode?: InputMaybe<Scalars["String"]["input"]>;
  weight?: InputMaybe<Scalars["Float"]["input"]>;
  width?: InputMaybe<Scalars["Float"]["input"]>;
};

export type CreateVendorContractInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  commissionRules?: InputMaybe<Array<Scalars["JSON"]["input"]>>;
  contractNumber?: InputMaybe<Scalars["String"]["input"]>;
  ebarimt?: InputMaybe<Scalars["String"]["input"]>;
  expireAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  fee?: InputMaybe<Scalars["Float"]["input"]>;
  managerId?: InputMaybe<Scalars["ID"]["input"]>;
  monthlyFee?: InputMaybe<Scalars["Float"]["input"]>;
  note?: InputMaybe<Scalars["String"]["input"]>;
  shipment?: InputMaybe<Scalars["Float"]["input"]>;
  shipmentRules?: InputMaybe<Array<Scalars["JSON"]["input"]>>;
  startAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  state?: InputMaybe<Scalars["String"]["input"]>;
  vendorId: Scalars["ID"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type CreateVendorInput = {
  address?: InputMaybe<Scalars["String"]["input"]>;
  cdq?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  districtId?: InputMaybe<Scalars["ID"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  facebook?: InputMaybe<Scalars["String"]["input"]>;
  hideInfo?: InputMaybe<Scalars["Boolean"]["input"]>;
  instagram?: InputMaybe<Scalars["String"]["input"]>;
  isIndividual: Scalars["Boolean"]["input"];
  latitude?: InputMaybe<Scalars["String"]["input"]>;
  logo?: InputMaybe<Scalars["Upload"]["input"]>;
  longitude?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  nameEn?: InputMaybe<Scalars["String"]["input"]>;
  personalNumber?: InputMaybe<Scalars["String"]["input"]>;
  phone?: InputMaybe<Scalars["String"]["input"]>;
  primaryTaxons?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  quarterId?: InputMaybe<Scalars["ID"]["input"]>;
  register?: InputMaybe<Scalars["String"]["input"]>;
  stateId?: InputMaybe<Scalars["ID"]["input"]>;
  taxNumber?: InputMaybe<Scalars["String"]["input"]>;
  website?: InputMaybe<Scalars["String"]["input"]>;
};

export type CreateWalletInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  productId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type CreateWebhookInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  type: Scalars["String"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type CreateWebsiteInput = {
  address?: InputMaybe<Scalars["String"]["input"]>;
  alternateDomain?: InputMaybe<Scalars["String"]["input"]>;
  autoAcceptBusinessClients?: InputMaybe<Scalars["Boolean"]["input"]>;
  autoAcceptMerchants?: InputMaybe<Scalars["Boolean"]["input"]>;
  autoEbarimt?: InputMaybe<Scalars["Boolean"]["input"]>;
  black?: InputMaybe<Scalars["Upload"]["input"]>;
  bonus?: InputMaybe<Scalars["Float"]["input"]>;
  cancelHour?: InputMaybe<Scalars["Int"]["input"]>;
  candy?: InputMaybe<Scalars["Boolean"]["input"]>;
  categoryHeader?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  commission?: InputMaybe<Scalars["Float"]["input"]>;
  copyrightText?: InputMaybe<Scalars["String"]["input"]>;
  coupon?: InputMaybe<Scalars["Boolean"]["input"]>;
  currency?: InputMaybe<Scalars["String"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  deliveryUntil?: InputMaybe<Scalars["Int"]["input"]>;
  domain: Scalars["String"]["input"];
  ebarimt?: InputMaybe<Scalars["Boolean"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  emailFrom?: InputMaybe<Scalars["String"]["input"]>;
  facebookAppId?: InputMaybe<Scalars["String"]["input"]>;
  facebookAppSecret?: InputMaybe<Scalars["String"]["input"]>;
  facebookChatId?: InputMaybe<Scalars["String"]["input"]>;
  giftCard?: InputMaybe<Scalars["Boolean"]["input"]>;
  group?: InputMaybe<Scalars["Boolean"]["input"]>;
  groupIds?: InputMaybe<Array<Scalars["String"]["input"]>>;
  index: Scalars["String"]["input"];
  isActive?: InputMaybe<Scalars["Boolean"]["input"]>;
  leaseAccount?: InputMaybe<Scalars["String"]["input"]>;
  leaseName?: InputMaybe<Scalars["String"]["input"]>;
  leasing?: InputMaybe<Scalars["Boolean"]["input"]>;
  listingBonus?: InputMaybe<Scalars["Boolean"]["input"]>;
  listingDuration?: InputMaybe<Scalars["Int"]["input"]>;
  main?: InputMaybe<Scalars["Upload"]["input"]>;
  minCartAmount?: InputMaybe<Scalars["Float"]["input"]>;
  name: Scalars["String"]["input"];
  onesignalAppId?: InputMaybe<Scalars["String"]["input"]>;
  onesignalAppKey?: InputMaybe<Scalars["String"]["input"]>;
  orderCancellationBase?: InputMaybe<Scalars["Float"]["input"]>;
  orderCancellationFee?: InputMaybe<Scalars["Float"]["input"]>;
  parentId?: InputMaybe<Scalars["ID"]["input"]>;
  paymentAccountData?: InputMaybe<Scalars["JSON"]["input"]>;
  paymentGuideText?: InputMaybe<Scalars["String"]["input"]>;
  phone1?: InputMaybe<Scalars["String"]["input"]>;
  phone2?: InputMaybe<Scalars["String"]["input"]>;
  preferences?: InputMaybe<Scalars["JSON"]["input"]>;
  requireKycVerification?: InputMaybe<Scalars["Boolean"]["input"]>;
  searchSuggestion?: InputMaybe<Scalars["String"]["input"]>;
  shipmentHours?: InputMaybe<Scalars["Int"]["input"]>;
  showUser?: InputMaybe<Scalars["Boolean"]["input"]>;
  signonBonus?: InputMaybe<Scalars["Float"]["input"]>;
  smsFee?: InputMaybe<Scalars["Int"]["input"]>;
  smsFrom?: InputMaybe<Scalars["String"]["input"]>;
  ticket?: InputMaybe<Scalars["Boolean"]["input"]>;
  useAlternatePassword?: InputMaybe<Scalars["Boolean"]["input"]>;
  useDeliveryCode?: InputMaybe<Scalars["Boolean"]["input"]>;
  useWallet?: InputMaybe<Scalars["Boolean"]["input"]>;
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
  wallet?: InputMaybe<Scalars["Boolean"]["input"]>;
  white?: InputMaybe<Scalars["Upload"]["input"]>;
};

export type CreateWishlistInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  isDefault?: InputMaybe<Scalars["Boolean"]["input"]>;
  isPrivate?: InputMaybe<Scalars["Boolean"]["input"]>;
  name: Scalars["String"]["input"];
};

export type CreateZoneInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  defaultTax?: InputMaybe<Scalars["Boolean"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  kind?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  pup?: InputMaybe<Scalars["Boolean"]["input"]>;
  websiteId: Scalars["ID"]["input"];
  zonableIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
};

export type CustomActionPaymentReturnInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DeactivateCardInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
};

export type DeactivateVoucherInput = {
  adjustmentId?: InputMaybe<Scalars["ID"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code?: InputMaybe<Scalars["String"]["input"]>;
  number?: InputMaybe<Scalars["String"]["input"]>;
  params?: InputMaybe<Scalars["JSON"]["input"]>;
  token?: InputMaybe<Scalars["String"]["input"]>;
};

export type DeleteCancelReasonInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DeliverPackageInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  pinCode: Scalars["String"]["input"];
};

export type DestroyAddressInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyAdjustmentInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyAgendaInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyAirCommissionInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyAirLimitationInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyAircraftInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyAirlineInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyAirportInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyApplicationInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyArticleInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyAssemblyPartInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyAssetRoleInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyAuthorInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyBadgeInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyBankAccountInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  password: Scalars["String"]["input"];
};

export type DestroyBatchVariantsInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Array<Scalars["ID"]["input"]>;
};

export type DestroyBranchInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyBrandInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyBusinessTypeInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyCorporateGatewayInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyCountryInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyDepartmentStoreInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyDistrictInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyDownloadableAttachmentInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  variantId: Scalars["ID"]["input"];
};

export type DestroyDynamicMenuInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyEMailBounceInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyEMailCampaignInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyEMailSegmentInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyEMailTemplateInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyEmployeeInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyErpIntegrationInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyFeedbackTopicInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyGameInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyHandlebarTemplateInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyKeywordInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyLeaseBlackListInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyLineItemInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyListingsInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  ids: Array<Scalars["ID"]["input"]>;
  index?: InputMaybe<Scalars["String"]["input"]>;
};

export type DestroyLookBookInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyMTemplateInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyMerchantInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyNewsInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyNoticeInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyNutritionFactInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyOneSignalNotificationInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["String"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type DestroyOneSignalSegmentInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyOptionTypeInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyOptionValueInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyOrderTemplateInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyPageInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyPaymentMethodInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyPaymentReturnInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyPaymentReturnReasonInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyPaymentReturnSourceInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyPollInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyPosListingsInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  ids: Array<Scalars["ID"]["input"]>;
  index?: InputMaybe<Scalars["String"]["input"]>;
};

export type DestroyProductDocumentInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyProductImageInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  variantId: Scalars["ID"]["input"];
};

export type DestroyProductInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyProductOptionValueImageInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  optionValueId: Scalars["ID"]["input"];
  productId: Scalars["ID"]["input"];
};

export type DestroyProductReturnInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyPromotionInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyPropertyInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyPropertyValueInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyPrototypeInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyPushTemplateInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyQuarterInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyQuizInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyRelationInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyReviewInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyReviewsInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  ids: Array<Scalars["ID"]["input"]>;
  restore?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type DestroySmsTemplateInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroySalePriceInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroySavedCardInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  kind: Scalars["String"]["input"];
};

export type DestroySegmentWhiteListInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyShipperInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyShippingCategoryInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyShippingMethodInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyShoppyImageInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroySizingGuideInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroySmartGridInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyStateInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyStockItemInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyStockLocationInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyStoreListingInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyStoreLocationInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroySupplierCategoryInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroySupplySegmentInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroySupplySegmentRestrictionInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyTaxonInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyTicketTemplateInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyUserAddressInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyUserArticleInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyVacationScheduleInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyVariantInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyVendorContractInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyWebsiteInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyWishInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  variantId?: InputMaybe<Scalars["ID"]["input"]>;
  wishlistId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type DestroyWishlistInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DestroyZoneInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type DisableCurrentUserInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  password: Scalars["String"]["input"];
};

export type DisableTotpInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  otp: Scalars["String"]["input"];
};

export type DynamicSyncListingsInput = {
  brandIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  vendorIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  websiteId: Scalars["ID"]["input"];
};

export type EmptyCartInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  number: Scalars["String"]["input"];
  seller?: InputMaybe<Scalars["String"]["input"]>;
  token: Scalars["String"]["input"];
};

export type EmptyWalletInput = {
  amount?: InputMaybe<Scalars["Float"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type EnableTotpInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  key: Scalars["String"]["input"];
  otp: Scalars["String"]["input"];
};

export type EventBuyInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  quantity: Scalars["Int"]["input"];
};

export type EventEntry = BaseModelInterface &
  Node & {
    __typename?: "eventEntry";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    description?: Maybe<Scalars["String"]["output"]>;
    entree?: Maybe<EventEntree>;
    entreeIdx?: Maybe<Scalars["String"]["output"]>;
    entryDate?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    number?: Maybe<Scalars["String"]["output"]>;
    score?: Maybe<Scalars["Int"]["output"]>;
    status?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
    winning?: Maybe<EventWinning>;
    winningIdx?: Maybe<Scalars["String"]["output"]>;
    winnings: Array<EventEntryWinning>;
  };

export type EventEntryCanIArgs = {
  action: CanIAction;
};

export type EventEntryConnection = {
  __typename?: "eventEntryConnection";
  edges: Array<EventEntryEdge>;
  metrics: Array<MetricResponse>;
  nodes: Array<EventEntry>;
  pageInfo: PageInfo;
  sum: Scalars["Float"]["output"];
  tagCounts: Array<TagCount>;
  totalCount: Scalars["Int"]["output"];
};

export type EventEntryConnectionMetricsArgs = {
  dateField: Scalars["String"]["input"];
  granularity: MetricGranularity;
  sumField?: InputMaybe<Scalars["String"]["input"]>;
};

export type EventEntryConnectionSumArgs = {
  field: Scalars["String"]["input"];
};

export type EventEntryEdge = {
  __typename?: "eventEntryEdge";
  cursor: Scalars["String"]["output"];
  node: EventEntry;
};

export type FindAlibabaOrderInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  waybill: Scalars["String"]["input"];
};

export type GamificationCreateInput = {
  actions?: InputMaybe<Scalars["JSON"]["input"]>;
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  expiresAt?: InputMaybe<Scalars["String"]["input"]>;
  goalPolicy?: InputMaybe<Scalars["String"]["input"]>;
  goals?: InputMaybe<Scalars["JSON"]["input"]>;
  name: Scalars["String"]["input"];
  startsAt?: InputMaybe<Scalars["String"]["input"]>;
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type GamificationDestroyInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type GamificationRecalibrateInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  cycle: Scalars["String"]["input"];
  goalId: Scalars["ID"]["input"];
};

export type GamificationUpdateInput = {
  actions?: InputMaybe<Scalars["JSON"]["input"]>;
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  expiresAt?: InputMaybe<Scalars["String"]["input"]>;
  goalPolicy?: InputMaybe<Scalars["String"]["input"]>;
  goals?: InputMaybe<Scalars["JSON"]["input"]>;
  id: Scalars["ID"]["input"];
  name?: InputMaybe<Scalars["String"]["input"]>;
  scope?: InputMaybe<Scalars["String"]["input"]>;
  segmentIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  startsAt?: InputMaybe<Scalars["String"]["input"]>;
  userIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  vendorIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
};

export type GenerateLoyaltyCardQrInput = {
  cardId: Scalars["ID"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
};

export type GenerateUsageCodesInput = {
  amount: Scalars["Int"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  numbers?: InputMaybe<Array<Scalars["String"]["input"]>>;
};

export type GenerateUserTokenQrInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
};

export type GenerateVariantsInput = {
  barcode?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  costPrice?: InputMaybe<Scalars["Float"]["input"]>;
  depth?: InputMaybe<Scalars["Float"]["input"]>;
  fragile?: InputMaybe<Scalars["Boolean"]["input"]>;
  height?: InputMaybe<Scalars["Float"]["input"]>;
  hsCode?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  netWeight?: InputMaybe<Scalars["Float"]["input"]>;
  nonReturnable?: InputMaybe<Scalars["Boolean"]["input"]>;
  options?: InputMaybe<Scalars["JSON"]["input"]>;
  price?: InputMaybe<Scalars["Float"]["input"]>;
  weight?: InputMaybe<Scalars["Float"]["input"]>;
  width?: InputMaybe<Scalars["Float"]["input"]>;
};

export type GenerateWebsiteReportInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  params?: InputMaybe<Scalars["JSON"]["input"]>;
  template: Scalars["String"]["input"];
};

export type GolomtOtpInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  otp?: InputMaybe<Scalars["String"]["input"]>;
  scope: Scalars["String"]["input"];
  state: Scalars["String"]["input"];
};

export type HalloweenPromotionInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
};

export type HikVisionReApplicationInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
};

export type HikVisionSyncByDateInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  date?: InputMaybe<Scalars["String"]["input"]>;
};

export type HikVisionSyncByOrdersInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  orderNumbers: Array<Scalars["String"]["input"]>;
};

export type ImageSearchInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  image: Scalars["Upload"]["input"];
};

export type ImportShoppyImagesInput = {
  attachments: Array<Scalars["Upload"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type InviteBtobEmployeeInput = {
  assetRoles?: InputMaybe<Array<AssetRoleInput>>;
  businessClientId: Scalars["ID"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  firstName?: InputMaybe<Scalars["String"]["input"]>;
  groups?: InputMaybe<Array<BusinessUserGroupInput>>;
  lastName?: InputMaybe<Scalars["String"]["input"]>;
  mobile?: InputMaybe<Scalars["String"]["input"]>;
  profile?: InputMaybe<BusinessUserProfileInput>;
  role?: InputMaybe<EmployeeRole | `${EmployeeRole}`>;
  status?: InputMaybe<
    B2bApprovalDecisionStatusEnum | `${B2bApprovalDecisionStatusEnum}`
  >;
};

export type InviteEmployeeInput = {
  assets?: InputMaybe<Scalars["JSON"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  firstName: Scalars["String"]["input"];
  lastName?: InputMaybe<Scalars["String"]["input"]>;
  mobile?: InputMaybe<Scalars["String"]["input"]>;
  role: EmployeeRole | `${EmployeeRole}`;
  vendorId: Scalars["ID"]["input"];
};

export type InviteMerchantInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  vendorId: Scalars["ID"]["input"];
  websiteId: Scalars["ID"]["input"];
};

export type JoinBusinessInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  storeLocationId?: InputMaybe<Scalars["ID"]["input"]>;
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type LeaseAcceptTermInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  number?: InputMaybe<Scalars["String"]["input"]>;
};

export type LeaseCancelInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  number?: InputMaybe<Scalars["String"]["input"]>;
};

export type LeaseChangeNameInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  firstName?: InputMaybe<Scalars["String"]["input"]>;
  lastName?: InputMaybe<Scalars["String"]["input"]>;
  nameInvalid?: InputMaybe<Scalars["String"]["input"]>;
  number?: InputMaybe<Scalars["String"]["input"]>;
};

export type LeaseCompleteFixInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  number?: InputMaybe<Scalars["String"]["input"]>;
};

export type LeaseCompleteInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  leaseAmount?: InputMaybe<Scalars["Float"]["input"]>;
  months?: InputMaybe<Scalars["Int"]["input"]>;
  number?: InputMaybe<Scalars["String"]["input"]>;
  repaymentDay?: InputMaybe<Scalars["Int"]["input"]>;
};

export type LeaseDeclineTermInput = {
  accountNumber?: InputMaybe<Scalars["String"]["input"]>;
  bankName?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  number?: InputMaybe<Scalars["String"]["input"]>;
};

export type LeaseMakeNormalInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  number?: InputMaybe<Scalars["String"]["input"]>;
};

export type LeaseUpdateAddressInput = {
  address: AddressInput;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
};

export type LeaseUpdateEducationInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  education: EducationInput;
};

export type LeaseUpdateEmergencyInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  emergencyContacts: Array<EmergencyContactInput>;
};

export type LeaseUpdateEmploymentInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  employment: EmploymentInput;
};

export type LeaseUpdateFinanceInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  finance: FinanceInput;
  loanContracts?: InputMaybe<LoanContractInput>;
};

export type LeaseUploadPassportInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  passport?: InputMaybe<Scalars["Upload"]["input"]>;
  passportBack?: InputMaybe<Scalars["Upload"]["input"]>;
  selfie?: InputMaybe<Scalars["Upload"]["input"]>;
};

export type LeaveChatRoomInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type LinkCorporateGatewayInput = {
  branch: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code: Scalars["String"]["input"];
  id: Scalars["ID"]["input"];
  redirectUri: Scalars["String"]["input"];
};

export type LinkDeviceInput = {
  adId?: InputMaybe<Scalars["String"]["input"]>;
  amountSpent?: InputMaybe<Scalars["Float"]["input"]>;
  badgeCount?: InputMaybe<Scalars["Float"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  country?: InputMaybe<Scalars["String"]["input"]>;
  deviceModel?: InputMaybe<Scalars["String"]["input"]>;
  deviceOs?: InputMaybe<Scalars["String"]["input"]>;
  deviceType?: InputMaybe<Scalars["Int"]["input"]>;
  gameVersion?: InputMaybe<Scalars["String"]["input"]>;
  identifier?: InputMaybe<Scalars["String"]["input"]>;
  lang?: InputMaybe<Scalars["String"]["input"]>;
  language?: InputMaybe<Scalars["String"]["input"]>;
  playerId: Scalars["String"]["input"];
  sessionCount?: InputMaybe<Scalars["Int"]["input"]>;
  subscribed: Scalars["Boolean"]["input"];
  tags?: InputMaybe<Scalars["String"]["input"]>;
  timezone?: InputMaybe<Scalars["Int"]["input"]>;
  webAuth?: InputMaybe<Scalars["String"]["input"]>;
  webP256?: InputMaybe<Scalars["String"]["input"]>;
};

export type LockWalletInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  walletId: Scalars["ID"]["input"];
};

export type LotteryEntry = BaseModelInterface &
  Node & {
    __typename?: "lotteryEntry";
    canI: Scalars["Boolean"]["output"];
    createdAt: Scalars["ISO8601DateTime"]["output"];
    entree?: Maybe<LotteryEntree>;
    entryDate?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    number?: Maybe<Scalars["String"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    website?: Maybe<Website>;
    winning?: Maybe<LotteryWinning>;
  };

export type LotteryEntryCanIArgs = {
  action: CanIAction;
};

export type MarkETicketAsInput = {
  action?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type MassCreateRepaymentTransactionInput = {
  amount: Scalars["Float"]["input"];
  batch: Array<TransactionRepayPreviewInput>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
};

export type OrderPayInput = {
  action: PaymentMethodKind | `${PaymentMethodKind}`;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  number: Scalars["String"]["input"];
  params?: InputMaybe<Scalars["JSON"]["input"]>;
};

export type PassCouponInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  email: Scalars["String"]["input"];
  id: Scalars["ID"]["input"];
};

export type PassETicketInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  email: Scalars["String"]["input"];
  id: Scalars["ID"]["input"];
};

export type PayCargoPriceInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  number: Scalars["String"]["input"];
};

export type PaymentActionInput = {
  action: PaymentMethodKind | `${PaymentMethodKind}`;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  number: Scalars["String"]["input"];
  params?: InputMaybe<Scalars["JSON"]["input"]>;
};

export type PaynetPaymentSource = BaseModelInterface &
  Node &
  PaymentSourceInterface & {
    __typename?: "paynetPaymentSource";
    amount?: Maybe<Scalars["Float"]["output"]>;
    canI: Scalars["Boolean"]["output"];
    cancelTime?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    createdAt: Scalars["ISO8601DateTime"]["output"];
    fiscalSent: Scalars["Boolean"]["output"];
    gid: Scalars["ID"]["output"];
    id: Scalars["ID"]["output"];
    paymentMethod?: Maybe<PaymentMethod>;
    paymentMethodId?: Maybe<Scalars["ID"]["output"]>;
    performTime?: Maybe<Scalars["ISO8601DateTime"]["output"]>;
    status?: Maybe<Scalars["Int"]["output"]>;
    transactionId?: Maybe<Scalars["Int"]["output"]>;
    updatedAt: Scalars["ISO8601DateTime"]["output"];
    user?: Maybe<User>;
    userId?: Maybe<Scalars["ID"]["output"]>;
  };

export type PaynetPaymentSourceCanIArgs = {
  action: CanIAction;
};

export type PerformId1Input = {
  address?: InputMaybe<AddressInput>;
  birthday?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  eduDegree?: InputMaybe<Scalars["String"]["input"]>;
  familyName?: InputMaybe<Scalars["String"]["input"]>;
  firstName?: InputMaybe<Scalars["String"]["input"]>;
  gender?: InputMaybe<Scalars["String"]["input"]>;
  green?: InputMaybe<Scalars["Int"]["input"]>;
  incomeConfirm?: InputMaybe<Scalars["Int"]["input"]>;
  lastName?: InputMaybe<Scalars["String"]["input"]>;
  maritalStatus?: InputMaybe<Scalars["String"]["input"]>;
  nationality?: InputMaybe<Scalars["String"]["input"]>;
  ndCode?: InputMaybe<Scalars["String"]["input"]>;
  number?: InputMaybe<Scalars["String"]["input"]>;
  registerNum?: InputMaybe<Scalars["String"]["input"]>;
  total?: InputMaybe<Scalars["Int"]["input"]>;
};

export type PerformLineItemActionInput = {
  action: LineItemAction | `${LineItemAction}`;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  params?: InputMaybe<Scalars["JSON"]["input"]>;
  shipmentId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type PerformOrderActionInput = {
  action: OrderAction | `${OrderAction}`;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  params?: InputMaybe<Scalars["JSON"]["input"]>;
};

export type PlacePackageInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  itemIds: Array<Scalars["ID"]["input"]>;
  parcelNumber: Scalars["String"]["input"];
};

export type PosEmployeeAcceptInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  userId: Scalars["ID"]["input"];
  vendorId: Scalars["ID"]["input"];
};

export type PosOrderActionInput = {
  action: PosOrderAction | `${PosOrderAction}`;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  params?: InputMaybe<Scalars["JSON"]["input"]>;
};

export type PosOrderPayInput = {
  action: PaymentMethodKind | `${PaymentMethodKind}`;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  number: Scalars["String"]["input"];
  params?: InputMaybe<Scalars["JSON"]["input"]>;
  storeLocationId: Scalars["ID"]["input"];
};

export type PosReturnInput = {
  accountBank?: InputMaybe<Scalars["String"]["input"]>;
  accountName?: InputMaybe<Scalars["String"]["input"]>;
  accountNumber?: InputMaybe<Scalars["String"]["input"]>;
  amount?: InputMaybe<Scalars["Float"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  note?: InputMaybe<Scalars["String"]["input"]>;
  orderId?: InputMaybe<Scalars["ID"]["input"]>;
  param: Scalars["JSON"]["input"];
  storeLocationId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type PositionProductAttributesInput = {
  attributeIds: Array<Scalars["ID"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type PositionProductVariantsInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  variantIds: Array<Scalars["ID"]["input"]>;
};

export type PrintETicketsInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  ids: Array<Scalars["ID"]["input"]>;
};

export type PrintOrdersInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  ids: Array<Scalars["ID"]["input"]>;
  templateName?: InputMaybe<Scalars["String"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type ProductBatchSaleInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  params: Scalars["JSON"]["input"];
  vendorId: Scalars["ID"]["input"];
};

export type ProductBatchUpdateInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  data: Scalars["JSON"]["input"];
  vendorId: Scalars["ID"]["input"];
};

export type ProductOutOfStockInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type ProductUpdateAttributeInput = {
  attributes: Scalars["JSON"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  keywordId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type QuickBuyInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  flag: Scalars["String"]["input"];
  sku: Scalars["String"]["input"];
};

export type ReadAllNotificationInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
};

export type ReadNotificationInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type ReadyShipmentInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  cost?: InputMaybe<Scalars["Float"]["input"]>;
  deliveryPhoto?: InputMaybe<Scalars["Upload"]["input"]>;
  deliveryPhoto1?: InputMaybe<Scalars["Upload"]["input"]>;
  deliveryPhoto1Url?: InputMaybe<Scalars["String"]["input"]>;
  deliveryPhotoUrl?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type RebuildPrototypeTreeInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type RebuildTaxonTreeInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type RefreshOrderTrackingsInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type RegisterQPayCardInput = {
  callbackUrl: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  firstName?: InputMaybe<Scalars["String"]["input"]>;
  lastName?: InputMaybe<Scalars["String"]["input"]>;
  mobile?: InputMaybe<Scalars["String"]["input"]>;
  registerNum?: InputMaybe<Scalars["String"]["input"]>;
};

export type RejectDispatchInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type RemoveBadgeListingInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  listingIds: Array<Scalars["ID"]["input"]>;
};

export type RemoveBankFromWalletInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  walletId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type RemoveBtobEmployeeBankAccountInput = {
  bankAccount: B2bBusinessUserBankAccountInput;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
};

export type RemoveCampaignListInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  ids: Array<Scalars["ID"]["input"]>;
};

export type RemoveChatMessageInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type RemoveClientsFromSegmentInput = {
  clientIds: Array<Scalars["ID"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  segmentId: Scalars["ID"]["input"];
};

export type RemoveEmployeesFromSegmentInput = {
  businessUserIds: Array<Scalars["ID"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type RemoveEventInviteItemInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  itemIds: Array<Scalars["ID"]["input"]>;
};

export type RemoveInvitationInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type RemovePrescriptionInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type RemovePrescriptionItemInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type RemovePriceInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type RemoveTaxCategoryInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type RemoveTaxRateInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type RemoveUsersFromSegmentInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  ids: Array<Scalars["ID"]["input"]>;
  segmentId: Scalars["ID"]["input"];
};

export type RemoveViewTrackInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
};

export type RemoveWebhookInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type RequestCardOtpInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type RequestGolomtVccInput = {
  callback?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
};

export type RequestListingOtpInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  phoneNumber: Scalars["String"]["input"];
};

export type RequestMerchantInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  domain: Scalars["String"]["input"];
  vendorId: Scalars["ID"]["input"];
};

export type RequestPaymentReturnInput = {
  accountBank?: InputMaybe<Scalars["String"]["input"]>;
  accountName?: InputMaybe<Scalars["String"]["input"]>;
  accountNumber?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  orderId: Scalars["ID"]["input"];
  reasonId: Scalars["ID"]["input"];
};

export type ResendGiftCardInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  email: Scalars["String"]["input"];
  id: Scalars["ID"]["input"];
};

export type ResendIntendSmsInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  paymentId: Scalars["ID"]["input"];
};

export type ResendShipmentTrackingInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type ReturnOrderEBarimtInput = {
  billId?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  group?: InputMaybe<Scalars["Boolean"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type ReviewDriverInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  comment?: InputMaybe<Scalars["String"]["input"]>;
  orderId: Scalars["ID"]["input"];
  rating: Scalars["Float"]["input"];
};

export type ScheduleSendCampaignInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type SearchAddressInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  filterId?: InputMaybe<Scalars["ID"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  lat?: InputMaybe<Scalars["String"]["input"]>;
  lon?: InputMaybe<Scalars["String"]["input"]>;
  page?: InputMaybe<Scalars["Int"]["input"]>;
  q?: InputMaybe<Scalars["String"]["input"]>;
  type?: InputMaybe<Scalars["String"]["input"]>;
};

export type SearchParkingInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  freeze?: InputMaybe<Scalars["Boolean"]["input"]>;
  locationCode?: InputMaybe<Scalars["String"]["input"]>;
  plate: Scalars["String"]["input"];
};

export type SeenChatMessageInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  roomId: Scalars["ID"]["input"];
};

export type SelectPrescriptionItemInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  quantity: Scalars["Int"]["input"];
  variantId: Scalars["ID"]["input"];
};

export type SendCargoInvoiceInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  number: Scalars["String"]["input"];
};

export type SendChangeLoyaltyCardPasswordOtpInput = {
  cardId: Scalars["ID"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
};

export type SendChatMessageInput = {
  admin?: InputMaybe<Scalars["Boolean"]["input"]>;
  attachment?: InputMaybe<Scalars["Upload"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  content?: InputMaybe<Scalars["String"]["input"]>;
  roomId: Scalars["ID"]["input"];
};

export type SendCouponInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  dateToSend?: InputMaybe<Scalars["ISO8601Date"]["input"]>;
  greeting?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  receiverEmail?: InputMaybe<Scalars["String"]["input"]>;
  receiverName?: InputMaybe<Scalars["String"]["input"]>;
  receiverPhone?: InputMaybe<Scalars["String"]["input"]>;
  sender?: InputMaybe<Scalars["String"]["input"]>;
};

export type SendCreateLoyaltyCardOtpInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
};

export type SendEventInviteItemInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type SendInvoiceInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  email: Scalars["String"]["input"];
  id: Scalars["ID"]["input"];
};

export type SendInvoiceNotificationInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type SendJobApplicationEmailInput = {
  address?: InputMaybe<Scalars["String"]["input"]>;
  award?: InputMaybe<Scalars["JSON"]["input"]>;
  birthday?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  birthplace?: InputMaybe<Scalars["String"]["input"]>;
  childrenCount?: InputMaybe<Scalars["Int"]["input"]>;
  clanName?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  drivingYears?: InputMaybe<Scalars["Int"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  facebook?: InputMaybe<Scalars["String"]["input"]>;
  familyMemberCount?: InputMaybe<Scalars["Int"]["input"]>;
  familyMembers?: InputMaybe<Scalars["JSON"]["input"]>;
  firstEmploymentDate?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  firstName?: InputMaybe<Scalars["String"]["input"]>;
  gender?: InputMaybe<Scalars["String"]["input"]>;
  hasPoliticalInsider?: InputMaybe<Scalars["Boolean"]["input"]>;
  hasServedMilitary?: InputMaybe<Scalars["Boolean"]["input"]>;
  hobby?: InputMaybe<Scalars["String"]["input"]>;
  image?: InputMaybe<Scalars["String"]["input"]>;
  intestedPosition?: InputMaybe<Scalars["String"]["input"]>;
  isMarried?: InputMaybe<Scalars["Boolean"]["input"]>;
  language?: InputMaybe<Scalars["JSON"]["input"]>;
  lastName?: InputMaybe<Scalars["String"]["input"]>;
  married?: InputMaybe<Scalars["String"]["input"]>;
  medicalCondition?: InputMaybe<Scalars["String"]["input"]>;
  otherInterest?: InputMaybe<Scalars["String"]["input"]>;
  primaryPhoneNumber?: InputMaybe<Scalars["String"]["input"]>;
  priorEducation?: InputMaybe<Scalars["JSON"]["input"]>;
  priorJobExperience?: InputMaybe<Scalars["JSON"]["input"]>;
  registerAddress?: InputMaybe<Scalars["String"]["input"]>;
  registerNum?: InputMaybe<Scalars["String"]["input"]>;
  salary?: InputMaybe<Scalars["String"]["input"]>;
  secondaryPhoneNumber?: InputMaybe<Scalars["String"]["input"]>;
  sourceOfInformation?: InputMaybe<Scalars["String"]["input"]>;
  sportExperience?: InputMaybe<Scalars["JSON"]["input"]>;
  strength?: InputMaybe<Scalars["String"]["input"]>;
  training?: InputMaybe<Scalars["JSON"]["input"]>;
  vehicle?: InputMaybe<Scalars["String"]["input"]>;
  weakness?: InputMaybe<Scalars["String"]["input"]>;
};

export type SendMassEbarimtInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  ids: Array<Scalars["ID"]["input"]>;
};

export type SendNotificationInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  invoiceId: Scalars["String"]["input"];
  mobile: Scalars["String"]["input"];
};

export type SendOrderEBarimtInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type SendSmsInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  content: Scalars["String"]["input"];
  orderId?: InputMaybe<Scalars["ID"]["input"]>;
  to?: InputMaybe<Scalars["String"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type SendTutPackageInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  imeiCodes?: InputMaybe<Scalars["JSON"]["input"]>;
  labelCodes?: InputMaybe<Scalars["JSON"]["input"]>;
  pickUpDate?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  pieceCount?: InputMaybe<Scalars["Int"]["input"]>;
};

export type SendUserTokenQrInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  email: Scalars["String"]["input"];
  number: Scalars["String"]["input"];
};

export type SendWalletWithdrawTokenInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type SetAvailabilityInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  isAvailable: Scalars["Boolean"]["input"];
};

export type SetGolomtCardPasswordInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  golomtCardId: Scalars["ID"]["input"];
  password?: InputMaybe<Scalars["String"]["input"]>;
};

export type ShipShipmentInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  force?: InputMaybe<Scalars["Boolean"]["input"]>;
  id: Scalars["ID"]["input"];
  pinCode?: InputMaybe<Scalars["String"]["input"]>;
  shipperId?: InputMaybe<Scalars["ID"]["input"]>;
  withoutSms?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type ShoppyBoxInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  score: Scalars["Int"]["input"];
};

export type SubmitAnswerInput = {
  answerIds: Array<Scalars["ID"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type SwapActionInput = {
  action: SwapActionEnum | `${SwapActionEnum}`;
  prioritizeMainVariant?: InputMaybe<Scalars["Boolean"]["input"]>;
  variants?: InputMaybe<Array<SwapItemInput>>;
};

export type SwapOrderDriverInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code: Scalars["String"]["input"];
};

export type SyncAlibabaOrderInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  ids: Array<Scalars["ID"]["input"]>;
  type?: InputMaybe<Scalars["String"]["input"]>;
};

export type SyncAllCreditCardInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  ids?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  websiteId: Scalars["ID"]["input"];
};

export type SyncBrandInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  ids: Array<Scalars["ID"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type SyncCreditCardInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type SyncListingsInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  ids: Array<Scalars["ID"]["input"]>;
};

export type SyncListingsSeoInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  ids: Array<Scalars["ID"]["input"]>;
};

export type SyncPosListingsInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  ids: Array<Scalars["ID"]["input"]>;
};

export type SyncReportInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  ids: Array<Scalars["ID"]["input"]>;
  type?: InputMaybe<Scalars["String"]["input"]>;
};

export type TestEmailCampaignInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type ToggleFollowInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  targetId: Scalars["ID"]["input"];
  targetType: Scalars["String"]["input"];
};

export type ToggleWishInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  variantId: Scalars["ID"]["input"];
  wishlistId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type TopUpCreditCardInput = {
  amount: Scalars["Float"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  remarks: Scalars["String"]["input"];
};

export type TopUpGiftCardInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code: Scalars["String"]["input"];
};

export type TrackTutPackageInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type TrackTutPackageLogInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type TrackTutStatusInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type TransferPaymentReturnInput = {
  account: Scalars["String"]["input"];
  cgwId: Scalars["ID"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  password: Scalars["String"]["input"];
  username: Scalars["String"]["input"];
};

export type TransferShipmentInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  quantity: Scalars["Int"]["input"];
  targetId: Scalars["ID"]["input"];
  targetType: ShipmentTransfer | `${ShipmentTransfer}`;
  variantId: Scalars["ID"]["input"];
};

export type TranslateProductInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  language: Scalars["String"]["input"];
  override?: InputMaybe<Scalars["Boolean"]["input"]>;
  service?: InputMaybe<Scalars["String"]["input"]>;
};

export type UnlockWalletInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  walletId: Scalars["ID"]["input"];
};

export type UpdateAddressInput = {
  address1?: InputMaybe<Scalars["String"]["input"]>;
  address2?: InputMaybe<Scalars["String"]["input"]>;
  alias?: InputMaybe<Scalars["String"]["input"]>;
  alternativePhone?: InputMaybe<Scalars["String"]["input"]>;
  apartment?: InputMaybe<Scalars["String"]["input"]>;
  cdq?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  city?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  company?: InputMaybe<Scalars["String"]["input"]>;
  countryId?: InputMaybe<Scalars["ID"]["input"]>;
  districtId?: InputMaybe<Scalars["ID"]["input"]>;
  entrance?: InputMaybe<Scalars["String"]["input"]>;
  firstname?: InputMaybe<Scalars["String"]["input"]>;
  floor?: InputMaybe<Scalars["String"]["input"]>;
  gender?: InputMaybe<Scalars["String"]["input"]>;
  geoPoint?: InputMaybe<Scalars["String"]["input"]>;
  house?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  intercom?: InputMaybe<Scalars["String"]["input"]>;
  isBillAddress?: InputMaybe<Scalars["Boolean"]["input"]>;
  isCompany?: InputMaybe<Scalars["Boolean"]["input"]>;
  lastname?: InputMaybe<Scalars["String"]["input"]>;
  latitude?: InputMaybe<Scalars["String"]["input"]>;
  longitude?: InputMaybe<Scalars["String"]["input"]>;
  mnQuarterId?: InputMaybe<Scalars["ID"]["input"]>;
  nationality?: InputMaybe<Scalars["String"]["input"]>;
  owningType?: InputMaybe<Scalars["String"]["input"]>;
  passportNumber?: InputMaybe<Scalars["String"]["input"]>;
  phone?: InputMaybe<Scalars["String"]["input"]>;
  pinFl?: InputMaybe<Scalars["String"]["input"]>;
  quarterId?: InputMaybe<Scalars["ID"]["input"]>;
  stateId?: InputMaybe<Scalars["ID"]["input"]>;
  stateName?: InputMaybe<Scalars["String"]["input"]>;
  what3words?: InputMaybe<Scalars["String"]["input"]>;
  year?: InputMaybe<Scalars["String"]["input"]>;
  zipcode?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateAdjustmentInput = {
  amount: Scalars["Float"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  label: Scalars["String"]["input"];
  taxAmount?: InputMaybe<Scalars["Float"]["input"]>;
};

export type UpdateAfterPayInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  status?: InputMaybe<AfterPay | `${AfterPay}`>;
  types?: InputMaybe<Array<Scalars["String"]["input"]>>;
};

export type UpdateAgendaInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  date?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  location?: InputMaybe<Scalars["String"]["input"]>;
  preview?: InputMaybe<Scalars["String"]["input"]>;
  tagList?: InputMaybe<Array<Scalars["String"]["input"]>>;
  time?: InputMaybe<Scalars["String"]["input"]>;
  title?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateAirCommissionInput = {
  airline?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  commission1?: InputMaybe<Scalars["Float"]["input"]>;
  commission2?: InputMaybe<Scalars["Float"]["input"]>;
  fm1?: InputMaybe<Scalars["Float"]["input"]>;
  fm2?: InputMaybe<Scalars["Float"]["input"]>;
  id: Scalars["ID"]["input"];
  isCodeShare?: InputMaybe<Scalars["Boolean"]["input"]>;
  rules1?: InputMaybe<Scalars["JSON"]["input"]>;
  rules2?: InputMaybe<Scalars["JSON"]["input"]>;
  stockAirline?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateAirLimitationInput = {
  basedOn: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type UpdateAircraftInput = {
  cat?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  iata?: InputMaybe<Scalars["String"]["input"]>;
  icao?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  name?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateAirlineInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  mn?: InputMaybe<Scalars["String"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateAirportInput = {
  city?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  country?: InputMaybe<Scalars["String"]["input"]>;
  elevation?: InputMaybe<Scalars["Int"]["input"]>;
  iata?: InputMaybe<Scalars["String"]["input"]>;
  icao?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  lat?: InputMaybe<Scalars["Float"]["input"]>;
  lon?: InputMaybe<Scalars["Float"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  state?: InputMaybe<Scalars["String"]["input"]>;
  tz?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateAlibabaCargoStatusInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  data: Scalars["JSON"]["input"];
};

export type UpdateApplicationInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  confidential?: InputMaybe<Scalars["Boolean"]["input"]>;
  id: Scalars["ID"]["input"];
  name?: InputMaybe<Scalars["String"]["input"]>;
  onesignalAppId?: InputMaybe<Scalars["String"]["input"]>;
  onesignalAppKey?: InputMaybe<Scalars["String"]["input"]>;
  redirectUri?: InputMaybe<Scalars["String"]["input"]>;
  scopes?: InputMaybe<Scalars["String"]["input"]>;
  secret?: InputMaybe<Scalars["String"]["input"]>;
  uid?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateArticleImagesInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  imageId?: InputMaybe<Scalars["ID"]["input"]>;
  removeList?: InputMaybe<Array<Scalars["String"]["input"]>>;
};

export type UpdateArticleInput = {
  authorId?: InputMaybe<Scalars["ID"]["input"]>;
  blocks?: InputMaybe<Scalars["JSON"]["input"]>;
  canonicalLink?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  createdAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  id: Scalars["ID"]["input"];
  imageId?: InputMaybe<Scalars["ID"]["input"]>;
  isDraft?: InputMaybe<Scalars["Boolean"]["input"]>;
  isFeatured?: InputMaybe<Scalars["Boolean"]["input"]>;
  isPublished?: InputMaybe<Scalars["Boolean"]["input"]>;
  items?: InputMaybe<Scalars["JSON"]["input"]>;
  licensing?: InputMaybe<Scalars["String"]["input"]>;
  seoDescription?: InputMaybe<Scalars["String"]["input"]>;
  seoKeywords?: InputMaybe<Scalars["String"]["input"]>;
  seoTitle?: InputMaybe<Scalars["String"]["input"]>;
  slug?: InputMaybe<Scalars["String"]["input"]>;
  tagList?: InputMaybe<Array<Scalars["String"]["input"]>>;
  title?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateAssemblyPartInput = {
  assemblyId?: InputMaybe<Scalars["ID"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  partId?: InputMaybe<Scalars["ID"]["input"]>;
  quantity?: InputMaybe<Scalars["Int"]["input"]>;
};

export type UpdateAssetRoleBatchInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  permissions: Array<AssetTargetRoleInput>;
};

export type UpdateAssetRoleInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  roles?: InputMaybe<Array<Scalars["String"]["input"]>>;
};

export type UpdateAuthorInput = {
  avatar?: InputMaybe<Scalars["Upload"]["input"]>;
  bio?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  fullName?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  isFeatured?: InputMaybe<Scalars["Boolean"]["input"]>;
  isPublic?: InputMaybe<Scalars["Boolean"]["input"]>;
  social?: InputMaybe<Scalars["JSON"]["input"]>;
  username?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateAvatarInput = {
  avatar?: InputMaybe<Scalars["Upload"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateBadgeInput = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  attachment?: InputMaybe<Scalars["Upload"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  expireAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  id: Scalars["ID"]["input"];
  name: Scalars["String"]["input"];
  priority?: InputMaybe<Scalars["Int"]["input"]>;
  promotable?: InputMaybe<Scalars["Boolean"]["input"]>;
  startAt: Scalars["ISO8601DateTime"]["input"];
  style?: InputMaybe<Scalars["String"]["input"]>;
  url?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateBankAccountInput = {
  accountNo: Scalars["String"]["input"];
  additionalDetails: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  name: Scalars["String"]["input"];
  password: Scalars["String"]["input"];
};

export type UpdateBranchInput = {
  addressId?: InputMaybe<Scalars["ID"]["input"]>;
  businessTypeId?: InputMaybe<Scalars["ID"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code?: InputMaybe<Scalars["String"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  name?: InputMaybe<Scalars["String"]["input"]>;
  phone?: InputMaybe<Scalars["String"]["input"]>;
  phone1?: InputMaybe<Scalars["String"]["input"]>;
  supplySegmentIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
};

export type UpdateBrandInput = {
  categoryType?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code?: InputMaybe<Scalars["String"]["input"]>;
  cover?: InputMaybe<Scalars["Upload"]["input"]>;
  id: Scalars["ID"]["input"];
  isPublished?: InputMaybe<Scalars["Boolean"]["input"]>;
  logo?: InputMaybe<Scalars["Upload"]["input"]>;
  lvl3?: InputMaybe<Scalars["String"]["input"]>;
  lvl4?: InputMaybe<Scalars["String"]["input"]>;
  metaDescription?: InputMaybe<Scalars["String"]["input"]>;
  metaKeywords?: InputMaybe<Scalars["String"]["input"]>;
  monthlyFee?: InputMaybe<Scalars["Float"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  officialLogo?: InputMaybe<Scalars["Upload"]["input"]>;
  seoTitle?: InputMaybe<Scalars["String"]["input"]>;
  storeType?: InputMaybe<Scalars["String"]["input"]>;
  url?: InputMaybe<Scalars["String"]["input"]>;
  websiteIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  whiteLogoId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type UpdateBrandListingInput = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  cover?: InputMaybe<Scalars["Upload"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  desktopCoverId?: InputMaybe<Scalars["ID"]["input"]>;
  id: Scalars["ID"]["input"];
  mobileCover?: InputMaybe<Scalars["Upload"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type UpdateBtobBusinessClientInput = {
  businessSupplierObject: BusinessClientInput;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateBtobOrderTemplateInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  name?: InputMaybe<Scalars["String"]["input"]>;
  status?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateBusinessClientInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  id: Scalars["ID"]["input"];
  localId?: InputMaybe<Scalars["String"]["input"]>;
  status?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateBusinessTypeInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  name?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateCampaignInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  cover?: InputMaybe<Scalars["Upload"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  endsAt: Scalars["ISO8601DateTime"]["input"];
  fulfillDate: Scalars["ISO8601Date"]["input"];
  id: Scalars["ID"]["input"];
  location?: InputMaybe<Scalars["String"]["input"]>;
  maxItemsCount: Scalars["Int"]["input"];
  minItemsCount: Scalars["Int"]["input"];
  startsAt: Scalars["ISO8601DateTime"]["input"];
  status?: InputMaybe<Scalars["String"]["input"]>;
  title: Scalars["String"]["input"];
};

export type UpdateCampaignListInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  position?: InputMaybe<Scalars["Int"]["input"]>;
  price: Scalars["Float"]["input"];
  quantity?: InputMaybe<Scalars["Int"]["input"]>;
  variantId: Scalars["ID"]["input"];
};

export type UpdateCancelReasonInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  display?: InputMaybe<Scalars["Int"]["input"]>;
  id: Scalars["ID"]["input"];
  position?: InputMaybe<Scalars["Int"]["input"]>;
  title: Scalars["String"]["input"];
};

export type UpdateCardInput = {
  cardHolder?: InputMaybe<Scalars["String"]["input"]>;
  cardNumber?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  expiresAt?: InputMaybe<Scalars["String"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
};

export type UpdateChannelInput = {
  background?: InputMaybe<Scalars["Upload"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type UpdateCheckoutOrderInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  clientsStoreId?: InputMaybe<Scalars["ID"]["input"]>;
  forceComplete?: InputMaybe<Scalars["Boolean"]["input"]>;
  number: Scalars["String"]["input"];
  params: Scalars["JSON"]["input"];
  shippingAddress?: InputMaybe<AddressInput>;
  shippingAddressId?: InputMaybe<Scalars["ID"]["input"]>;
  shippingMethodId?: InputMaybe<Scalars["ID"]["input"]>;
  token?: InputMaybe<Scalars["String"]["input"]>;
  whenToShip?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
};

export type UpdateCinemaInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  image?: InputMaybe<Scalars["Upload"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  preferredBranch?: InputMaybe<Scalars["String"]["input"]>;
  preferredEmail?: InputMaybe<Scalars["String"]["input"]>;
  preferredLatLon?: InputMaybe<Array<Scalars["String"]["input"]>>;
  preferredPhone?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateCinemaScreenInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  name?: InputMaybe<Scalars["String"]["input"]>;
  svg?: InputMaybe<Scalars["Upload"]["input"]>;
};

export type UpdateClientsStoreInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  clientsStoreObject: ClientsStoreInputType;
};

export type UpdateClientsStoreStatusInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  status: Scalars["String"]["input"];
};

export type UpdateCompleteOrderInput = {
  billAddress: AddressInput;
  channel?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  clientVendorId?: InputMaybe<Scalars["ID"]["input"]>;
  clientsStoreId?: InputMaybe<Scalars["ID"]["input"]>;
  couponCode?: InputMaybe<Scalars["String"]["input"]>;
  ebarimt?: InputMaybe<Scalars["Boolean"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  extraData?: InputMaybe<Scalars["JSON"]["input"]>;
  flag?: InputMaybe<Scalars["String"]["input"]>;
  isConfirmation?: InputMaybe<Scalars["Boolean"]["input"]>;
  lineItems?: InputMaybe<Array<LineItemInput>>;
  orderId: Scalars["ID"]["input"];
  parcelDelivery?: InputMaybe<Scalars["Boolean"]["input"]>;
  paymentState?: InputMaybe<Scalars["Boolean"]["input"]>;
  payments?: InputMaybe<Array<Scalars["JSON"]["input"]>>;
  shipAddress?: InputMaybe<AddressInput>;
  useBilling?: InputMaybe<Scalars["Boolean"]["input"]>;
  userId: Scalars["ID"]["input"];
  websiteId: Scalars["ID"]["input"];
  whenToShip?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
};

export type UpdateCorporateGatewayInput = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  name?: InputMaybe<Scalars["String"]["input"]>;
  preferences?: InputMaybe<Scalars["JSON"]["input"]>;
  transferAccount?: InputMaybe<Scalars["String"]["input"]>;
  transferPassword?: InputMaybe<Scalars["String"]["input"]>;
  transferUsername?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateCountryInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  iso?: InputMaybe<Scalars["String"]["input"]>;
  iso3?: InputMaybe<Scalars["String"]["input"]>;
  isoName?: InputMaybe<Scalars["String"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  numcode?: InputMaybe<Scalars["Int"]["input"]>;
  statesRequired?: InputMaybe<Scalars["Boolean"]["input"]>;
  zipcodeRequired?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type UpdateDepartmentStoreInput = {
  address?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  cover?: InputMaybe<Scalars["Upload"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  logo?: InputMaybe<Scalars["Upload"]["input"]>;
  map?: InputMaybe<Scalars["String"]["input"]>;
  phoneNumber?: InputMaybe<Scalars["String"]["input"]>;
  schedule?: InputMaybe<Scalars["JSON"]["input"]>;
  timeSheets?: InputMaybe<Scalars["JSON"]["input"]>;
  title?: InputMaybe<Scalars["String"]["input"]>;
  winterTimeSheets?: InputMaybe<Scalars["JSON"]["input"]>;
};

export type UpdateDistrictInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  name?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateDropshipCategoryInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  name?: InputMaybe<Scalars["String"]["input"]>;
  preferredTaxonIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  presentation?: InputMaybe<Scalars["String"]["input"]>;
  slug?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateDynamicMenuInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  id: Scalars["ID"]["input"];
  title?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateEMailCampaignInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  deliveredAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  fromEmail?: InputMaybe<Scalars["String"]["input"]>;
  fromName: Scalars["String"]["input"];
  id: Scalars["ID"]["input"];
  name: Scalars["String"]["input"];
  preview?: InputMaybe<Scalars["String"]["input"]>;
  segmentId?: InputMaybe<Scalars["ID"]["input"]>;
  slug?: InputMaybe<Scalars["String"]["input"]>;
  state?: InputMaybe<Scalars["String"]["input"]>;
  subject?: InputMaybe<Scalars["String"]["input"]>;
  templateId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type UpdateEMailContactTagListInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  tagList: Array<Scalars["String"]["input"]>;
};

export type UpdateEMailSegmentInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  id: Scalars["ID"]["input"];
  name: Scalars["String"]["input"];
  operator?: InputMaybe<Scalars["String"]["input"]>;
  status?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateEMailTemplateInput = {
  bcc?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  from?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  isMjml?: InputMaybe<Scalars["Boolean"]["input"]>;
  mjml?: InputMaybe<Scalars["String"]["input"]>;
  reply?: InputMaybe<Scalars["String"]["input"]>;
  subject?: InputMaybe<Scalars["String"]["input"]>;
  template?: InputMaybe<Scalars["String"]["input"]>;
  title: Scalars["String"]["input"];
  to?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateEmployeeInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  firstName?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  lastName?: InputMaybe<Scalars["String"]["input"]>;
  mobile?: InputMaybe<Scalars["String"]["input"]>;
  msCode?: InputMaybe<Scalars["String"]["input"]>;
  role?: InputMaybe<EmployeeRole | `${EmployeeRole}`>;
  salesManagerBonus?: InputMaybe<Scalars["Float"]["input"]>;
  salesManagerIsVendor?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type UpdateErpIntegrationInput = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  autoSync?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  erp?: InputMaybe<Scalars["String"]["input"]>;
  frequency?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  matchField?: InputMaybe<Scalars["String"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  preferences?: InputMaybe<Scalars["JSON"]["input"]>;
  repeat?: InputMaybe<Scalars["String"]["input"]>;
  time?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateEventInviteInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  company?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  items?: InputMaybe<Scalars["JSON"]["input"]>;
  productId?: InputMaybe<Scalars["ID"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type UpdateFeaturedInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  from?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  id: Scalars["ID"]["input"];
  isActive: Scalars["Boolean"]["input"];
  to?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
};

export type UpdateFeedbackInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  status: Scalars["String"]["input"];
};

export type UpdateFeedbackTopicInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  orderRequired?: InputMaybe<Scalars["Boolean"]["input"]>;
  parentId?: InputMaybe<Scalars["ID"]["input"]>;
  position?: InputMaybe<Scalars["Int"]["input"]>;
  positive?: InputMaybe<Scalars["Boolean"]["input"]>;
  title?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateGameInput = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  expireAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  icon?: InputMaybe<Scalars["Upload"]["input"]>;
  id: Scalars["ID"]["input"];
  preferredFreeTryGiftCount?: InputMaybe<Scalars["Int"]["input"]>;
  preferredFreeTryGiftIntervalStartAt?: InputMaybe<
    Scalars["ISO8601DateTime"]["input"]
  >;
  preferredFreeTryGiftsEnabled?: InputMaybe<Scalars["Boolean"]["input"]>;
  preferredFreeTryInterval?: InputMaybe<Scalars["Int"]["input"]>;
  preferredMaxScoreOnSingleInstance?: InputMaybe<Scalars["Int"]["input"]>;
  preferredOrderTotalThreshold?: InputMaybe<Scalars["Int"]["input"]>;
  preferredOrderTryApplyOnEachInstance?: InputMaybe<
    Scalars["Boolean"]["input"]
  >;
  preferredOrderTryGiftCount?: InputMaybe<Scalars["Int"]["input"]>;
  preferredOrderTryGiftsEnabled?: InputMaybe<Scalars["Boolean"]["input"]>;
  preferredPrizeDistributionAt?: InputMaybe<
    Scalars["ISO8601DateTime"]["input"]
  >;
  preferredPrizeDistributionPool?: InputMaybe<Scalars["Int"]["input"]>;
  preferredPrizeDistributionType?: InputMaybe<Scalars["String"]["input"]>;
  preferredScoreThreshold?: InputMaybe<Scalars["Int"]["input"]>;
  preferredTotalPrizePool?: InputMaybe<Scalars["Int"]["input"]>;
  preferredTriesStoreEnabled?: InputMaybe<Scalars["Boolean"]["input"]>;
  preferredTryStorePrice?: InputMaybe<Scalars["Int"]["input"]>;
  preferredUserDailyUsageLimit?: InputMaybe<Scalars["Int"]["input"]>;
  preferredUserTryMaxLimit?: InputMaybe<Scalars["Int"]["input"]>;
  prizes?: InputMaybe<Array<GamePrizeInput>>;
  startAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  title?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateHandlebarTemplateInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  data?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  paperSize?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateInvitationInput = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code?: InputMaybe<Scalars["String"]["input"]>;
  endsAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  id: Scalars["ID"]["input"];
  name?: InputMaybe<Scalars["String"]["input"]>;
  preferences?: InputMaybe<Scalars["JSON"]["input"]>;
  startsAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  type?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateInvitedBtobEmployeeInput = {
  assetRoles?: InputMaybe<Array<AssetRoleInput>>;
  businessClientId: Scalars["ID"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  firstName?: InputMaybe<Scalars["String"]["input"]>;
  groups?: InputMaybe<Array<BusinessUserGroupInput>>;
  id: Scalars["ID"]["input"];
  lastName?: InputMaybe<Scalars["String"]["input"]>;
  mobile?: InputMaybe<Scalars["String"]["input"]>;
  profile?: InputMaybe<BusinessUserProfileInput>;
  role?: InputMaybe<EmployeeRole | `${EmployeeRole}`>;
  status?: InputMaybe<
    B2bApprovalDecisionStatusEnum | `${B2bApprovalDecisionStatusEnum}`
  >;
};

export type UpdateItemInput = {
  attachments?: InputMaybe<Array<Scalars["Upload"]["input"]>>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  id: Scalars["ID"]["input"];
  onUnavailable?: InputMaybe<SwapActionInput>;
  options?: InputMaybe<Scalars["JSON"]["input"]>;
  quantity?: InputMaybe<Scalars["Int"]["input"]>;
  token?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateKeywordInput = {
  alias?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  gpc?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  mn?: InputMaybe<Scalars["String"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateKycGolomtInput = {
  address1?: InputMaybe<Scalars["String"]["input"]>;
  address2?: InputMaybe<Scalars["String"]["input"]>;
  address3?: InputMaybe<Scalars["String"]["input"]>;
  apartment?: InputMaybe<Scalars["String"]["input"]>;
  appointment?: InputMaybe<Scalars["String"]["input"]>;
  branchId?: InputMaybe<Scalars["String"]["input"]>;
  city?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  country?: InputMaybe<Scalars["String"]["input"]>;
  creditLimit?: InputMaybe<Scalars["Int"]["input"]>;
  customerCheck?: InputMaybe<Scalars["Boolean"]["input"]>;
  degree?: InputMaybe<Scalars["String"]["input"]>;
  doorNo?: InputMaybe<Scalars["String"]["input"]>;
  embossName?: InputMaybe<Scalars["String"]["input"]>;
  enrollmentDate?: InputMaybe<Scalars["String"]["input"]>;
  entry?: InputMaybe<Scalars["String"]["input"]>;
  maritalStatus?: InputMaybe<Scalars["String"]["input"]>;
  schoolName?: InputMaybe<Scalars["String"]["input"]>;
  sector?: InputMaybe<Scalars["String"]["input"]>;
  startDate?: InputMaybe<Scalars["String"]["input"]>;
  state?: InputMaybe<Scalars["String"]["input"]>;
  streetName?: InputMaybe<Scalars["String"]["input"]>;
  subDistrict?: InputMaybe<Scalars["String"]["input"]>;
  subSector?: InputMaybe<Scalars["String"]["input"]>;
  town?: InputMaybe<Scalars["String"]["input"]>;
  yearsWork?: InputMaybe<Scalars["Int"]["input"]>;
};

export type UpdateKycInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  ndCode?: InputMaybe<Scalars["String"]["input"]>;
  passport?: InputMaybe<Scalars["Upload"]["input"]>;
  passportBack?: InputMaybe<Scalars["Upload"]["input"]>;
  selfie?: InputMaybe<Scalars["Upload"]["input"]>;
};

export type UpdateLeaseBlackListInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  registerNum?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateLineItemInput = {
  actn?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  commission?: InputMaybe<Scalars["Float"]["input"]>;
  commissionUpdated?: InputMaybe<Scalars["Boolean"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  id: Scalars["ID"]["input"];
  preferences?: InputMaybe<Scalars["JSON"]["input"]>;
  quantity?: InputMaybe<Scalars["Int"]["input"]>;
  shipmentAmount?: InputMaybe<Scalars["Float"]["input"]>;
  shipmentAmountUpdated?: InputMaybe<Scalars["Boolean"]["input"]>;
  skipRecalculate?: InputMaybe<Scalars["Boolean"]["input"]>;
  takeLocationId?: InputMaybe<Scalars["String"]["input"]>;
  takenLocationId?: InputMaybe<Scalars["String"]["input"]>;
  track?: InputMaybe<Scalars["Boolean"]["input"]>;
  weight?: InputMaybe<Scalars["Float"]["input"]>;
};

export type UpdateListingBatchInput = {
  approved?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  extendActivation?: InputMaybe<Scalars["Boolean"]["input"]>;
  fulfillDuration?: InputMaybe<Scalars["Int"]["input"]>;
  hideOnSearch?: InputMaybe<Scalars["Boolean"]["input"]>;
  ids: Array<Scalars["ID"]["input"]>;
  maxQty?: InputMaybe<Scalars["Int"]["input"]>;
  minQty?: InputMaybe<Scalars["Int"]["input"]>;
  published?: InputMaybe<Scalars["Boolean"]["input"]>;
  seoDescription?: InputMaybe<Scalars["String"]["input"]>;
  seoKeywords?: InputMaybe<Scalars["String"]["input"]>;
  seoTitle?: InputMaybe<Scalars["String"]["input"]>;
  shippingCategoryId?: InputMaybe<Scalars["ID"]["input"]>;
  slug?: InputMaybe<Scalars["String"]["input"]>;
  taxCategoryId?: InputMaybe<Scalars["ID"]["input"]>;
  taxonIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
};

export type UpdateListingEsInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  param: Scalars["JSON"]["input"];
};

export type UpdateListingInput = {
  approved?: InputMaybe<Scalars["Boolean"]["input"]>;
  badgeIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  bonus?: InputMaybe<Scalars["Float"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  fulfillDuration?: InputMaybe<Scalars["Int"]["input"]>;
  hideOnSearch?: InputMaybe<Scalars["Boolean"]["input"]>;
  id: Scalars["ID"]["input"];
  maxQty?: InputMaybe<Scalars["Int"]["input"]>;
  minQty?: InputMaybe<Scalars["Int"]["input"]>;
  product?: InputMaybe<ProductInput>;
  property?: InputMaybe<Scalars["JSON"]["input"]>;
  published?: InputMaybe<Scalars["Boolean"]["input"]>;
  seoDescription?: InputMaybe<Scalars["String"]["input"]>;
  seoKeywords?: InputMaybe<Scalars["String"]["input"]>;
  seoTitle?: InputMaybe<Scalars["String"]["input"]>;
  shippingCategoryId?: InputMaybe<Scalars["ID"]["input"]>;
  slug?: InputMaybe<Scalars["String"]["input"]>;
  stepQty?: InputMaybe<Scalars["Int"]["input"]>;
  stockLocationIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  taxCategoryId?: InputMaybe<Scalars["ID"]["input"]>;
  taxonIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
};

export type UpdateListingOptionsInput = {
  canBuy: Scalars["Boolean"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  donation?: InputMaybe<Scalars["String"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  otp?: InputMaybe<Scalars["String"]["input"]>;
  phoneNumber?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateLoginInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  login: Scalars["String"]["input"];
  overwrite?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type UpdateLookBookInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  cover?: InputMaybe<Scalars["Upload"]["input"]>;
  coverSquare?: InputMaybe<Scalars["Upload"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  isDraft?: InputMaybe<Scalars["Boolean"]["input"]>;
  photo?: InputMaybe<Scalars["Upload"]["input"]>;
  title?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateMTemplateInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  html?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  name: Scalars["String"]["input"];
  text?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateMassChatMessageInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  content: Scalars["String"]["input"];
  id: Scalars["ID"]["input"];
  roomIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  sendAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
};

export type UpdateMerchantInput = {
  address?: InputMaybe<Scalars["String"]["input"]>;
  alias?: InputMaybe<Scalars["String"]["input"]>;
  allowCampaign?: InputMaybe<Scalars["Boolean"]["input"]>;
  autoApprove?: InputMaybe<Scalars["Boolean"]["input"]>;
  background?: InputMaybe<Scalars["Upload"]["input"]>;
  banks?: InputMaybe<Array<BankInput>>;
  cartAmount?: InputMaybe<Scalars["Float"]["input"]>;
  categoryId?: InputMaybe<Scalars["ID"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  ebarimtType?: InputMaybe<Ebarimt | `${Ebarimt}`>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  facebook?: InputMaybe<Scalars["String"]["input"]>;
  featuredFrom?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  featuredTo?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  fulfillmentDays?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  isActive?: InputMaybe<Scalars["String"]["input"]>;
  localId?: InputMaybe<Scalars["String"]["input"]>;
  organizationId?: InputMaybe<Scalars["String"]["input"]>;
  phone?: InputMaybe<Scalars["String"]["input"]>;
  preferredAllowSelfBuy?: InputMaybe<Scalars["Boolean"]["input"]>;
  preferredDeliveryType?: InputMaybe<Scalars["String"]["input"]>;
  preferredMaxCartAmount?: InputMaybe<Scalars["Float"]["input"]>;
  preferredMinStock?: InputMaybe<Scalars["Int"]["input"]>;
  preferredShippingCategoryId?: InputMaybe<Scalars["ID"]["input"]>;
  receiveOrderNotifications?: InputMaybe<Scalars["Boolean"]["input"]>;
  web?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateMerchantVatSettingsInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  vatReceiverType: Scalars["String"]["input"];
  vatRegister?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateMovieInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type UpdateNewsInput = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  body?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  cover?: InputMaybe<Scalars["JSON"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  id: Scalars["ID"]["input"];
  tagList?: InputMaybe<Array<Scalars["String"]["input"]>>;
  thumbnail?: InputMaybe<Scalars["JSON"]["input"]>;
  title?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateNoticeInput = {
  body?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  expireAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  id: Scalars["ID"]["input"];
  link?: InputMaybe<Scalars["String"]["input"]>;
  linkName?: InputMaybe<Scalars["String"]["input"]>;
  path?: InputMaybe<Scalars["String"]["input"]>;
  position?: InputMaybe<Scalars["Int"]["input"]>;
  startAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  title?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateNutritionFactBatchInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  nutritionFacts: Array<NutritionFactInput>;
  vendorId: Scalars["ID"]["input"];
};

export type UpdateNutritionFactInput = {
  altMeasures?: InputMaybe<Scalars["JSON"]["input"]>;
  brand?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code?: InputMaybe<Scalars["String"]["input"]>;
  fullNutrients?: InputMaybe<Scalars["JSON"]["input"]>;
  id: Scalars["ID"]["input"];
  name?: InputMaybe<Scalars["String"]["input"]>;
  nfCalories?: InputMaybe<Scalars["Float"]["input"]>;
  nfCholesterol?: InputMaybe<Scalars["Float"]["input"]>;
  nfDietaryFiber?: InputMaybe<Scalars["Float"]["input"]>;
  nfP?: InputMaybe<Scalars["Float"]["input"]>;
  nfPotassium?: InputMaybe<Scalars["Float"]["input"]>;
  nfProtein?: InputMaybe<Scalars["Float"]["input"]>;
  nfSaturatedFat?: InputMaybe<Scalars["Float"]["input"]>;
  nfSodium?: InputMaybe<Scalars["Float"]["input"]>;
  nfSugars?: InputMaybe<Scalars["Float"]["input"]>;
  nfTotalCarbohydrate?: InputMaybe<Scalars["Float"]["input"]>;
  nfTotalFat?: InputMaybe<Scalars["Float"]["input"]>;
  servingQty?: InputMaybe<Scalars["Float"]["input"]>;
  servingUnit?: InputMaybe<Scalars["String"]["input"]>;
  servingWeightGrams?: InputMaybe<Scalars["Float"]["input"]>;
};

export type UpdateOneSignalSegmentInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  id: Scalars["ID"]["input"];
  name: Scalars["String"]["input"];
  operator?: InputMaybe<Scalars["String"]["input"]>;
  status?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateOptionTypeInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  name?: InputMaybe<Scalars["String"]["input"]>;
  position?: InputMaybe<Scalars["Int"]["input"]>;
  presentation?: InputMaybe<Scalars["String"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type UpdateOptionValueInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  name?: InputMaybe<Scalars["String"]["input"]>;
  optionTypeId?: InputMaybe<Scalars["ID"]["input"]>;
  position?: InputMaybe<Scalars["Int"]["input"]>;
  presentation?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateOrderInput = {
  billAddress?: InputMaybe<AddressInput>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  driverId?: InputMaybe<Scalars["ID"]["input"]>;
  driverShippingAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  driverStatus?: InputMaybe<Scalars["String"]["input"]>;
  driverTakenAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  extraData?: InputMaybe<Scalars["JSON"]["input"]>;
  flag?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  leaseLeft?: InputMaybe<Scalars["Float"]["input"]>;
  preferences?: InputMaybe<Scalars["JSON"]["input"]>;
  shipAddress?: InputMaybe<AddressInput>;
  whenToShip?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
};

export type UpdateOrderTemplateInput = {
  billAddress?: InputMaybe<AddressInput>;
  branchId?: InputMaybe<Scalars["ID"]["input"]>;
  businessId?: InputMaybe<Scalars["ID"]["input"]>;
  businessTypeIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  dayOfWeek?: InputMaybe<Scalars["String"]["input"]>;
  extraData?: InputMaybe<Scalars["JSON"]["input"]>;
  id: Scalars["ID"]["input"];
  isDefault?: InputMaybe<Scalars["Boolean"]["input"]>;
  items?: InputMaybe<Array<OrderTemplateItemInput>>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  nextDate: Scalars["ISO8601DateTime"]["input"];
  rule?: InputMaybe<Scalars["String"]["input"]>;
  shipAddress?: InputMaybe<AddressInput>;
  storeLocationId?: InputMaybe<Scalars["ID"]["input"]>;
  time?: InputMaybe<Scalars["String"]["input"]>;
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
  whenToShip?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
};

export type UpdatePageInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  items?: InputMaybe<Scalars["JSON"]["input"]>;
  layout?: InputMaybe<Scalars["String"]["input"]>;
  menuId?: InputMaybe<Scalars["ID"]["input"]>;
  metaDescription?: InputMaybe<Scalars["String"]["input"]>;
  metaImageId?: InputMaybe<Scalars["ID"]["input"]>;
  metaKeywords?: InputMaybe<Scalars["String"]["input"]>;
  metaTitle?: InputMaybe<Scalars["String"]["input"]>;
  preferences?: InputMaybe<Scalars["JSON"]["input"]>;
  slug?: InputMaybe<Scalars["String"]["input"]>;
  title?: InputMaybe<Scalars["String"]["input"]>;
  visible?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type UpdatePaymentMethodInput = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  afterPay?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  currencies?: InputMaybe<Array<Scalars["String"]["input"]>>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  eBarimt?: InputMaybe<Scalars["Boolean"]["input"]>;
  fee?: InputMaybe<Scalars["Float"]["input"]>;
  id: Scalars["ID"]["input"];
  name?: InputMaybe<Scalars["String"]["input"]>;
  position?: InputMaybe<Scalars["Int"]["input"]>;
  preferences?: InputMaybe<Scalars["JSON"]["input"]>;
  returnable?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type UpdatePaymentReturnInput = {
  accountBank?: InputMaybe<Scalars["String"]["input"]>;
  accountName?: InputMaybe<Scalars["String"]["input"]>;
  accountNumber?: InputMaybe<Scalars["String"]["input"]>;
  amount?: InputMaybe<Scalars["Float"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  commission?: InputMaybe<Scalars["Float"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  message?: InputMaybe<Scalars["String"]["input"]>;
  note?: InputMaybe<Scalars["String"]["input"]>;
  otherFee?: InputMaybe<Scalars["Float"]["input"]>;
  paidAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  reasonId?: InputMaybe<Scalars["String"]["input"]>;
  sourceId?: InputMaybe<Scalars["String"]["input"]>;
  status?: InputMaybe<Scalars["String"]["input"]>;
  transactionId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type UpdatePaymentReturnReasonInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  name?: InputMaybe<Scalars["String"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type UpdatePaymentReturnSourceInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  name?: InputMaybe<Scalars["String"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type UpdatePollInput = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  expireAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  id: Scalars["ID"]["input"];
  image?: InputMaybe<Scalars["Upload"]["input"]>;
  question?: InputMaybe<Scalars["String"]["input"]>;
  questions?: InputMaybe<Array<PollQuestionInput>>;
  startAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
};

export type UpdatePosCustomerInput = {
  addresses?: InputMaybe<Array<AddressInput>>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  firstName?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  lastName?: InputMaybe<Scalars["String"]["input"]>;
  mobile?: InputMaybe<Scalars["String"]["input"]>;
  unconfirmedEmail?: InputMaybe<Scalars["String"]["input"]>;
  unconfirmedMobile?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdatePosListingInput = {
  approved?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  published?: InputMaybe<Scalars["Boolean"]["input"]>;
  slug?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdatePositionDownloadableAttachmentInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  positions: Array<Scalars["ID"]["input"]>;
  variantId: Scalars["ID"]["input"];
};

export type UpdatePositionOptionValueImageInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  optionValueId: Scalars["ID"]["input"];
  positions: Array<Scalars["ID"]["input"]>;
  productId: Scalars["ID"]["input"];
};

export type UpdatePositionSalePricesInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  positions: Array<Scalars["ID"]["input"]>;
  variantId: Scalars["ID"]["input"];
};

export type UpdatePositionVariantImageInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  positions: Array<Scalars["ID"]["input"]>;
  variantId: Scalars["ID"]["input"];
};

export type UpdatePrescriptionInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code?: InputMaybe<Scalars["String"]["input"]>;
  diagnosis?: InputMaybe<Scalars["String"]["input"]>;
  doctorHospital?: InputMaybe<Scalars["String"]["input"]>;
  doctorName?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  patientName?: InputMaybe<Scalars["String"]["input"]>;
  prescriptionDate?: InputMaybe<Scalars["ISO8601Date"]["input"]>;
};

export type UpdatePrescriptionItemInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  drugName?: InputMaybe<Scalars["String"]["input"]>;
  drugNumber?: InputMaybe<Scalars["String"]["input"]>;
  frequency?: InputMaybe<Scalars["Int"]["input"]>;
  id: Scalars["ID"]["input"];
  quantity?: InputMaybe<Scalars["Int"]["input"]>;
  variantIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
};

export type UpdatePriceInput = {
  amount: Scalars["Float"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  currency: Scalars["String"]["input"];
  id: Scalars["ID"]["input"];
  position?: InputMaybe<Scalars["Int"]["input"]>;
};

export type UpdateProductBookingInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  prices?: InputMaybe<Scalars["JSON"]["input"]>;
  repeats?: InputMaybe<Array<Scalars["String"]["input"]>>;
  rule?: InputMaybe<Scalars["String"]["input"]>;
  skips?: InputMaybe<Array<Scalars["String"]["input"]>>;
  variation?: InputMaybe<Scalars["JSON"]["input"]>;
};

export type UpdateProductInput = {
  availableOn?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  availableUntil?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  barcode?: InputMaybe<Scalars["String"]["input"]>;
  cancelDuration?: InputMaybe<Scalars["Int"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  condition?: InputMaybe<Scalars["String"]["input"]>;
  currency?: InputMaybe<Scalars["String"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  fileImages?: InputMaybe<Array<Scalars["Upload"]["input"]>>;
  fragile?: InputMaybe<Scalars["Boolean"]["input"]>;
  id: Scalars["ID"]["input"];
  imageLinks?: InputMaybe<Array<Scalars["String"]["input"]>>;
  images?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  info?: InputMaybe<Scalars["JSON"]["input"]>;
  keywordId?: InputMaybe<Scalars["ID"]["input"]>;
  labelCode?: InputMaybe<Scalars["String"]["input"]>;
  listingOptions?: InputMaybe<Scalars["JSON"]["input"]>;
  masterImageId?: InputMaybe<Scalars["ID"]["input"]>;
  merchantSku?: InputMaybe<Scalars["String"]["input"]>;
  metaDescription?: InputMaybe<Scalars["String"]["input"]>;
  metaKeywords?: InputMaybe<Scalars["String"]["input"]>;
  metaTitle?: InputMaybe<Scalars["String"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  nonReturnable?: InputMaybe<Scalars["Boolean"]["input"]>;
  packageCode?: InputMaybe<Scalars["String"]["input"]>;
  price?: InputMaybe<Scalars["Float"]["input"]>;
  productCat?: InputMaybe<ProductCat | `${ProductCat}`>;
  property?: InputMaybe<Scalars["JSON"]["input"]>;
  shippingCategoryId?: InputMaybe<Scalars["ID"]["input"]>;
  sizingGuideId?: InputMaybe<Scalars["ID"]["input"]>;
  sku?: InputMaybe<Scalars["String"]["input"]>;
  slug?: InputMaybe<Scalars["String"]["input"]>;
  stock?: InputMaybe<Scalars["Int"]["input"]>;
  storeId?: InputMaybe<Scalars["ID"]["input"]>;
  taxCode?: InputMaybe<Scalars["String"]["input"]>;
  taxonIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  title?: InputMaybe<Scalars["String"]["input"]>;
  translations?: InputMaybe<Array<TranslationInput>>;
  variants?: InputMaybe<Array<VariantInput>>;
  vendor?: InputMaybe<Scalars["JSON"]["input"]>;
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
  youtube?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateProductOptionTypeInput = {
  add: Scalars["Boolean"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  optionTypeId: Scalars["ID"]["input"];
};

export type UpdateProductReturnInput = {
  accountBank?: InputMaybe<Scalars["String"]["input"]>;
  accountName?: InputMaybe<Scalars["String"]["input"]>;
  accountNumber?: InputMaybe<Scalars["String"]["input"]>;
  amount?: InputMaybe<Scalars["Float"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  note?: InputMaybe<Scalars["String"]["input"]>;
  paidAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  reasonId?: InputMaybe<Scalars["ID"]["input"]>;
  transactionId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type UpdateProductStageInput = {
  blocks?: InputMaybe<Array<Scalars["String"]["input"]>>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  id: Scalars["ID"]["input"];
  locks?: InputMaybe<Array<Scalars["String"]["input"]>>;
  variation?: InputMaybe<Scalars["JSON"]["input"]>;
  views?: InputMaybe<Scalars["JSON"]["input"]>;
};

export type UpdatePromotionInput = {
  actions?: InputMaybe<Scalars["JSON"]["input"]>;
  advertise?: InputMaybe<Scalars["Boolean"]["input"]>;
  autoClaim?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  expiresAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  id: Scalars["ID"]["input"];
  imageId?: InputMaybe<Scalars["ID"]["input"]>;
  link?: InputMaybe<Scalars["String"]["input"]>;
  matchPolicy?: InputMaybe<Scalars["String"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  preferences?: InputMaybe<Scalars["JSON"]["input"]>;
  priority?: InputMaybe<Scalars["Int"]["input"]>;
  rule?: InputMaybe<Scalars["JSON"]["input"]>;
  rules?: InputMaybe<Scalars["JSON"]["input"]>;
  startsAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  tagList?: InputMaybe<Array<Scalars["String"]["input"]>>;
  terms?: InputMaybe<Scalars["String"]["input"]>;
  usageLimit?: InputMaybe<Scalars["Int"]["input"]>;
  websiteIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
};

export type UpdatePropertyInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  name?: InputMaybe<Scalars["String"]["input"]>;
  presentation?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdatePropertyValueInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  value: Scalars["String"]["input"];
};

export type UpdatePrototypeInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  keywordIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  optionTypeIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  options?: InputMaybe<Scalars["JSON"]["input"]>;
  parentId?: InputMaybe<Scalars["ID"]["input"]>;
  presentation?: InputMaybe<Scalars["String"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type UpdatePushTemplateInput = {
  appId?: InputMaybe<Scalars["ID"]["input"]>;
  appIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  body?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  deeplink?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  name: PushTemplateName | `${PushTemplateName}`;
  title: Scalars["String"]["input"];
  url?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateQuarterInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  districtId?: InputMaybe<Scalars["ID"]["input"]>;
  id: Scalars["ID"]["input"];
  name?: InputMaybe<Scalars["String"]["input"]>;
  preferences?: InputMaybe<Scalars["JSON"]["input"]>;
  zipId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type UpdateQuizInput = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  cover?: InputMaybe<Scalars["Upload"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  expireAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  gradeBy?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  permalink?: InputMaybe<Scalars["String"]["input"]>;
  preferredEntryPerUser?: InputMaybe<Scalars["Int"]["input"]>;
  preferredFrequency?: InputMaybe<Scalars["String"]["input"]>;
  preferredOnDisplay?: InputMaybe<Scalars["Int"]["input"]>;
  preferredRewardPerUser?: InputMaybe<Scalars["Int"]["input"]>;
  preferredTime?: InputMaybe<Scalars["Int"]["input"]>;
  questions?: InputMaybe<Array<QuizQuestionInput>>;
  rewards?: InputMaybe<Array<QuizRewardInput>>;
  startAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  title?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateRelationDiscountInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  discountAmount: Scalars["Float"]["input"];
  listingId: Scalars["ID"]["input"];
  relationId: Scalars["ID"]["input"];
};

export type UpdateReportReasonInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  name: Scalars["String"]["input"];
  position: Scalars["Int"]["input"];
  status?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateSmsTemplateInput = {
  body?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  title?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateSaleListingInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  items: Array<ListingSaleInput>;
};

export type UpdateSalePriceInput = {
  amount?: InputMaybe<Scalars["Float"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  currency?: InputMaybe<Scalars["String"]["input"]>;
  eventLabel?: InputMaybe<Scalars["Boolean"]["input"]>;
  expireAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  forceOthers?: InputMaybe<Scalars["Boolean"]["input"]>;
  id: Scalars["ID"]["input"];
  isEvent?: InputMaybe<Scalars["Boolean"]["input"]>;
  qty?: InputMaybe<Scalars["Int"]["input"]>;
  segmentId?: InputMaybe<Scalars["ID"]["input"]>;
  startAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type UpdateShipmentTrackingInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  deliveryCompany?: InputMaybe<Scalars["String"]["input"]>;
  itemId?: InputMaybe<Scalars["ID"]["input"]>;
  number: Scalars["String"]["input"];
  pending?: InputMaybe<Scalars["Boolean"]["input"]>;
  status?: InputMaybe<Scalars["String"]["input"]>;
  statusDate?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  trackingNumber?: InputMaybe<Scalars["String"]["input"]>;
  type: Scalars["String"]["input"];
};

export type UpdateShipperInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  logo?: InputMaybe<Scalars["Upload"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  phoneNumber?: InputMaybe<Scalars["String"]["input"]>;
  status?: InputMaybe<Scalars["String"]["input"]>;
  taxer?: InputMaybe<Scalars["Boolean"]["input"]>;
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type UpdateShippingCategoryInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  name: Scalars["String"]["input"];
  step?: InputMaybe<Scalars["Int"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type UpdateShippingMethodInput = {
  adminName?: InputMaybe<Scalars["String"]["input"]>;
  calculatorAttributes?: InputMaybe<Scalars["JSON"]["input"]>;
  calculatorType: Scalars["String"]["input"];
  channel?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  displayOn?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  logo?: InputMaybe<Scalars["Upload"]["input"]>;
  name: Scalars["String"]["input"];
  phone?: InputMaybe<Scalars["String"]["input"]>;
  shipperId?: InputMaybe<Scalars["ID"]["input"]>;
  shippingCategoryIds: Array<Scalars["ID"]["input"]>;
  step?: InputMaybe<Scalars["Int"]["input"]>;
  taxCategoryId?: InputMaybe<Scalars["ID"]["input"]>;
  trackingUrl?: InputMaybe<Scalars["String"]["input"]>;
  websiteId: Scalars["ID"]["input"];
  zoneIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
};

export type UpdateSizingGuideInput = {
  ageGroup?: InputMaybe<Scalars["String"]["input"]>;
  brand?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  data?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  gender?: InputMaybe<Scalars["String"]["input"]>;
  grouping?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  storeId?: InputMaybe<Scalars["ID"]["input"]>;
  title?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateSmartGridInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  items?: InputMaybe<Scalars["JSON"]["input"]>;
  visible?: InputMaybe<Scalars["Boolean"]["input"]>;
};

export type UpdateStateInput = {
  abbr?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  name?: InputMaybe<Scalars["String"]["input"]>;
  preferences?: InputMaybe<Scalars["JSON"]["input"]>;
};

export type UpdateStockItemInput = {
  backorderable?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  countOnHand?: InputMaybe<Scalars["Int"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type UpdateStockLocationInput = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  address1?: InputMaybe<Scalars["String"]["input"]>;
  adminName?: InputMaybe<Scalars["String"]["input"]>;
  backorderableDefault?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code?: InputMaybe<Scalars["String"]["input"]>;
  countryId?: InputMaybe<Scalars["ID"]["input"]>;
  default?: InputMaybe<Scalars["Boolean"]["input"]>;
  id: Scalars["ID"]["input"];
  name?: InputMaybe<Scalars["String"]["input"]>;
  phone?: InputMaybe<Scalars["String"]["input"]>;
  propagateAllVariants?: InputMaybe<Scalars["Boolean"]["input"]>;
  stateId?: InputMaybe<Scalars["ID"]["input"]>;
  storeLocationId?: InputMaybe<Scalars["ID"]["input"]>;
  timeSheets?: InputMaybe<Scalars["JSON"]["input"]>;
};

export type UpdateStoreCreditInput = {
  amountUsed?: InputMaybe<Scalars["Float"]["input"]>;
  categoryId?: InputMaybe<Scalars["ID"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  payments?: InputMaybe<Array<PaymentInput>>;
};

export type UpdateStoreLocationInput = {
  address?: InputMaybe<Scalars["String"]["input"]>;
  businessTypeId?: InputMaybe<Scalars["ID"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code?: InputMaybe<Scalars["String"]["input"]>;
  departmentStoreId?: InputMaybe<Scalars["ID"]["input"]>;
  departmentStoreTitle?: InputMaybe<Scalars["String"]["input"]>;
  floor?: InputMaybe<Scalars["Int"]["input"]>;
  id: Scalars["ID"]["input"];
  locationAddress?: InputMaybe<AddressInput>;
  locationAddressId?: InputMaybe<Scalars["ID"]["input"]>;
  managerId?: InputMaybe<Scalars["ID"]["input"]>;
  map?: InputMaybe<Scalars["String"]["input"]>;
  phone?: InputMaybe<Scalars["String"]["input"]>;
  photo?: InputMaybe<Scalars["Upload"]["input"]>;
  preferences?: InputMaybe<Scalars["JSON"]["input"]>;
  schedule?: InputMaybe<Scalars["JSON"]["input"]>;
  storeIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  timeSheets?: InputMaybe<Scalars["JSON"]["input"]>;
  title?: InputMaybe<Scalars["String"]["input"]>;
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
  winterTimeSheets?: InputMaybe<Scalars["JSON"]["input"]>;
};

export type UpdateSupplierCategoryInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  name?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateSupplySegmentInput = {
  active?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  name?: InputMaybe<Scalars["String"]["input"]>;
  originId?: InputMaybe<Scalars["ID"]["input"]>;
  preferences?: InputMaybe<Scalars["JSON"]["input"]>;
  type: Scalars["String"]["input"];
  websiteIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
};

export type UpdateTaxCategoryInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  name?: InputMaybe<Scalars["String"]["input"]>;
  taxCode?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateTaxRateInput = {
  amount?: InputMaybe<Scalars["Float"]["input"]>;
  calculatorAttributes?: InputMaybe<Scalars["JSON"]["input"]>;
  calculatorType?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  includedInPrice?: InputMaybe<Scalars["Boolean"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  showRateInLabel?: InputMaybe<Scalars["Boolean"]["input"]>;
  taxCategoryId?: InputMaybe<Scalars["ID"]["input"]>;
  zoneId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type UpdateTaxonInput = {
  bannerLink?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  icon?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  imeiCodesEnabled?: InputMaybe<Scalars["Boolean"]["input"]>;
  isAdult?: InputMaybe<Scalars["Boolean"]["input"]>;
  keywordIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  keywords?: InputMaybe<Scalars["JSON"]["input"]>;
  labelCodesEnabled?: InputMaybe<Scalars["Boolean"]["input"]>;
  metaDescription?: InputMaybe<Scalars["String"]["input"]>;
  metaKeywords?: InputMaybe<Scalars["String"]["input"]>;
  metaTitle?: InputMaybe<Scalars["String"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  parentId?: InputMaybe<Scalars["ID"]["input"]>;
  permalink?: InputMaybe<Scalars["String"]["input"]>;
  position?: InputMaybe<Scalars["Int"]["input"]>;
  propertyIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  queryString?: InputMaybe<Scalars["String"]["input"]>;
  taxCode?: InputMaybe<Scalars["String"]["input"]>;
  translationEn?: InputMaybe<Scalars["String"]["input"]>;
  websiteId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type UpdateTecAssemblyGroupInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  icon?: InputMaybe<Scalars["Upload"]["input"]>;
  id: Scalars["ID"]["input"];
  position?: InputMaybe<Scalars["Int"]["input"]>;
  presentation?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateTicketTemplateInput = {
  body?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  height?: InputMaybe<Scalars["Int"]["input"]>;
  id: Scalars["ID"]["input"];
  pos?: InputMaybe<Scalars["Boolean"]["input"]>;
  sku?: InputMaybe<Scalars["String"]["input"]>;
  width?: InputMaybe<Scalars["Int"]["input"]>;
};

export type UpdateUserAddressInput = {
  address: AddressInput;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type UpdateUserProfileInput = {
  appsflyerAppId?: InputMaybe<Scalars["String"]["input"]>;
  appsflyerId?: InputMaybe<Scalars["String"]["input"]>;
  billAddress?: InputMaybe<AddressInput>;
  birthday?: InputMaybe<Scalars["String"]["input"]>;
  clickMiniAppAcceptance?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  eduDegree?: InputMaybe<Scalars["String"]["input"]>;
  education?: InputMaybe<EducationInput>;
  emergencyContacts?: InputMaybe<Array<EmergencyContactInput>>;
  employment?: InputMaybe<EmploymentInput>;
  familyName?: InputMaybe<Scalars["String"]["input"]>;
  finance?: InputMaybe<FinanceInput>;
  firstName?: InputMaybe<Scalars["String"]["input"]>;
  gender?: InputMaybe<Gender | `${Gender}`>;
  id?: InputMaybe<Scalars["ID"]["input"]>;
  isLease?: InputMaybe<Scalars["Boolean"]["input"]>;
  lastName?: InputMaybe<Scalars["String"]["input"]>;
  maritalStatus?: InputMaybe<Scalars["String"]["input"]>;
  mobile?: InputMaybe<Scalars["String"]["input"]>;
  nationality?: InputMaybe<Scalars["String"]["input"]>;
  number?: InputMaybe<Scalars["String"]["input"]>;
  password?: InputMaybe<Scalars["String"]["input"]>;
  registerNum?: InputMaybe<Scalars["String"]["input"]>;
  storeLocationIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  subscribed?: InputMaybe<Scalars["Boolean"]["input"]>;
  unconfirmedEmail?: InputMaybe<Scalars["String"]["input"]>;
  unconfirmedMobile?: InputMaybe<Scalars["String"]["input"]>;
  xpartnersClickId?: InputMaybe<Scalars["String"]["input"]>;
  xpartnersExpireAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
};

export type UpdateVacationScheduleInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  date?: InputMaybe<Scalars["String"]["input"]>;
  dayOfWeek?: InputMaybe<Scalars["String"]["input"]>;
  endTime?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  repeat?: InputMaybe<Scalars["String"]["input"]>;
  startTime?: InputMaybe<Scalars["String"]["input"]>;
  timezone?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateVariantImageInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  variantId: Scalars["ID"]["input"];
};

export type UpdateVariantInput = {
  barcode?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  costCurrency?: InputMaybe<Scalars["String"]["input"]>;
  costPrice?: InputMaybe<Scalars["Float"]["input"]>;
  depth?: InputMaybe<Scalars["Float"]["input"]>;
  fragile?: InputMaybe<Scalars["Boolean"]["input"]>;
  height?: InputMaybe<Scalars["Float"]["input"]>;
  hsCode?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  labelCode?: InputMaybe<Scalars["String"]["input"]>;
  merchantSku?: InputMaybe<Scalars["String"]["input"]>;
  netWeight?: InputMaybe<Scalars["Float"]["input"]>;
  nonReturnable?: InputMaybe<Scalars["Boolean"]["input"]>;
  options?: InputMaybe<Scalars["JSON"]["input"]>;
  packageCode?: InputMaybe<Scalars["String"]["input"]>;
  price?: InputMaybe<Scalars["Float"]["input"]>;
  priceCny?: InputMaybe<Scalars["Float"]["input"]>;
  priceJpy?: InputMaybe<Scalars["Float"]["input"]>;
  priceKrw?: InputMaybe<Scalars["Float"]["input"]>;
  priceMnt?: InputMaybe<Scalars["Float"]["input"]>;
  priceRub?: InputMaybe<Scalars["Float"]["input"]>;
  priceUsd?: InputMaybe<Scalars["Float"]["input"]>;
  priceUzs?: InputMaybe<Scalars["Float"]["input"]>;
  sku?: InputMaybe<Scalars["String"]["input"]>;
  taxCode?: InputMaybe<Scalars["String"]["input"]>;
  weight?: InputMaybe<Scalars["Float"]["input"]>;
  width?: InputMaybe<Scalars["Float"]["input"]>;
};

export type UpdateVendorContractInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  commissionRules?: InputMaybe<Array<Scalars["JSON"]["input"]>>;
  contractNumber?: InputMaybe<Scalars["String"]["input"]>;
  ebarimt?: InputMaybe<Scalars["String"]["input"]>;
  expireAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  fee?: InputMaybe<Scalars["Float"]["input"]>;
  id: Scalars["ID"]["input"];
  managerId?: InputMaybe<Scalars["ID"]["input"]>;
  monthlyFee?: InputMaybe<Scalars["Float"]["input"]>;
  note?: InputMaybe<Scalars["String"]["input"]>;
  shipment?: InputMaybe<Scalars["Float"]["input"]>;
  shipmentRules?: InputMaybe<Array<Scalars["JSON"]["input"]>>;
  startAt?: InputMaybe<Scalars["ISO8601DateTime"]["input"]>;
  state?: InputMaybe<Scalars["String"]["input"]>;
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type UpdateVendorInput = {
  address?: InputMaybe<Scalars["String"]["input"]>;
  cdq?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  countryId?: InputMaybe<Scalars["ID"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  districtId?: InputMaybe<Scalars["ID"]["input"]>;
  ebarimtType?: InputMaybe<Scalars["String"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  facebook?: InputMaybe<Scalars["String"]["input"]>;
  hideInfo?: InputMaybe<Scalars["Boolean"]["input"]>;
  id: Scalars["ID"]["input"];
  instagram?: InputMaybe<Scalars["String"]["input"]>;
  isIndividual?: InputMaybe<Scalars["Boolean"]["input"]>;
  latitude?: InputMaybe<Scalars["String"]["input"]>;
  logo?: InputMaybe<Scalars["Upload"]["input"]>;
  longitude?: InputMaybe<Scalars["String"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  nameEn?: InputMaybe<Scalars["String"]["input"]>;
  personalNumber?: InputMaybe<Scalars["String"]["input"]>;
  phone?: InputMaybe<Scalars["String"]["input"]>;
  pos?: InputMaybe<Scalars["Boolean"]["input"]>;
  preferredSeoAutoUpdate?: InputMaybe<Scalars["Boolean"]["input"]>;
  primaryTaxons?: InputMaybe<Array<Scalars["ID"]["input"]>>;
  quarterId?: InputMaybe<Scalars["ID"]["input"]>;
  register?: InputMaybe<Scalars["String"]["input"]>;
  stateId?: InputMaybe<Scalars["ID"]["input"]>;
  taxNumber?: InputMaybe<Scalars["String"]["input"]>;
  vat?: InputMaybe<Scalars["Boolean"]["input"]>;
  website?: InputMaybe<Scalars["String"]["input"]>;
};

export type UpdateVendorLogoInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  logo: Scalars["Upload"]["input"];
};

export type UpdateWebhookInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  id: Scalars["ID"]["input"];
  name: Scalars["String"]["input"];
  status?: InputMaybe<Scalars["String"]["input"]>;
  type: Scalars["String"]["input"];
};

export type UpdateWebsiteFeaturesInput = {
  add?: InputMaybe<Scalars["Boolean"]["input"]>;
  addAll?: InputMaybe<Scalars["Boolean"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  feature?: InputMaybe<Scalars["String"]["input"]>;
  features?: InputMaybe<Array<Scalars["String"]["input"]>>;
  websiteId: Scalars["ID"]["input"];
};

export type UpdateWebsiteInput = {
  address?: InputMaybe<Scalars["String"]["input"]>;
  alternateDomain?: InputMaybe<Scalars["String"]["input"]>;
  autoAcceptBusinessClients?: InputMaybe<Scalars["Boolean"]["input"]>;
  autoAcceptMerchants?: InputMaybe<Scalars["Boolean"]["input"]>;
  autoEbarimt?: InputMaybe<Scalars["Boolean"]["input"]>;
  black?: InputMaybe<Scalars["Upload"]["input"]>;
  bonus?: InputMaybe<Scalars["Float"]["input"]>;
  cancelHour?: InputMaybe<Scalars["Int"]["input"]>;
  candy?: InputMaybe<Scalars["Boolean"]["input"]>;
  categoryHeader?: InputMaybe<Scalars["String"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  commission?: InputMaybe<Scalars["Float"]["input"]>;
  copyrightText?: InputMaybe<Scalars["String"]["input"]>;
  coupon?: InputMaybe<Scalars["Boolean"]["input"]>;
  currency?: InputMaybe<Scalars["String"]["input"]>;
  data?: InputMaybe<Scalars["JSON"]["input"]>;
  deliveryUntil?: InputMaybe<Scalars["Int"]["input"]>;
  domain?: InputMaybe<Scalars["String"]["input"]>;
  ebarimt?: InputMaybe<Scalars["Boolean"]["input"]>;
  email?: InputMaybe<Scalars["String"]["input"]>;
  emailFrom?: InputMaybe<Scalars["String"]["input"]>;
  facebookAppId?: InputMaybe<Scalars["String"]["input"]>;
  facebookAppSecret?: InputMaybe<Scalars["String"]["input"]>;
  facebookChatId?: InputMaybe<Scalars["String"]["input"]>;
  giftCard?: InputMaybe<Scalars["Boolean"]["input"]>;
  googleAndroidKey?: InputMaybe<Scalars["String"]["input"]>;
  googleIosKey?: InputMaybe<Scalars["String"]["input"]>;
  googleWebKey?: InputMaybe<Scalars["String"]["input"]>;
  group?: InputMaybe<Scalars["Boolean"]["input"]>;
  groupIds?: InputMaybe<Array<Scalars["String"]["input"]>>;
  id: Scalars["ID"]["input"];
  isActive?: InputMaybe<Scalars["Boolean"]["input"]>;
  leaseAccount?: InputMaybe<Scalars["String"]["input"]>;
  leaseName?: InputMaybe<Scalars["String"]["input"]>;
  leasing?: InputMaybe<Scalars["Boolean"]["input"]>;
  listingBonus?: InputMaybe<Scalars["Boolean"]["input"]>;
  listingDuration?: InputMaybe<Scalars["Int"]["input"]>;
  logo?: InputMaybe<Scalars["Upload"]["input"]>;
  main?: InputMaybe<Scalars["Upload"]["input"]>;
  minCartAmount?: InputMaybe<Scalars["Float"]["input"]>;
  name?: InputMaybe<Scalars["String"]["input"]>;
  onesignalAppId?: InputMaybe<Scalars["String"]["input"]>;
  onesignalAppKey?: InputMaybe<Scalars["String"]["input"]>;
  orderCancellationBase?: InputMaybe<Scalars["Float"]["input"]>;
  orderCancellationFee?: InputMaybe<Scalars["Float"]["input"]>;
  parentId?: InputMaybe<Scalars["ID"]["input"]>;
  paymentAccountData?: InputMaybe<Scalars["JSON"]["input"]>;
  paymentGuideText?: InputMaybe<Scalars["String"]["input"]>;
  phone1?: InputMaybe<Scalars["String"]["input"]>;
  phone2?: InputMaybe<Scalars["String"]["input"]>;
  preferences?: InputMaybe<Scalars["JSON"]["input"]>;
  preferredBonus?: InputMaybe<Scalars["JSON"]["input"]>;
  requireKycVerification?: InputMaybe<Scalars["Boolean"]["input"]>;
  searchSuggestion?: InputMaybe<Scalars["String"]["input"]>;
  shipmentHours?: InputMaybe<Scalars["Int"]["input"]>;
  showUser?: InputMaybe<Scalars["Boolean"]["input"]>;
  signonBonus?: InputMaybe<Scalars["Float"]["input"]>;
  smsFee?: InputMaybe<Scalars["Int"]["input"]>;
  smsFrom?: InputMaybe<Scalars["String"]["input"]>;
  ticket?: InputMaybe<Scalars["Boolean"]["input"]>;
  useAlternatePassword?: InputMaybe<Scalars["Boolean"]["input"]>;
  useCustomPrototypes?: InputMaybe<Scalars["Boolean"]["input"]>;
  useDeliveryCode?: InputMaybe<Scalars["Boolean"]["input"]>;
  useWallet?: InputMaybe<Scalars["Boolean"]["input"]>;
  vendorId?: InputMaybe<Scalars["ID"]["input"]>;
  wallet?: InputMaybe<Scalars["Boolean"]["input"]>;
  white?: InputMaybe<Scalars["Upload"]["input"]>;
};

export type UpdateWishedProductInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  quantity?: InputMaybe<Scalars["Int"]["input"]>;
  remark?: InputMaybe<Scalars["String"]["input"]>;
  variantId: Scalars["ID"]["input"];
};

export type UpdateWishlistInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  isDefault?: InputMaybe<Scalars["Boolean"]["input"]>;
  isPrivate?: InputMaybe<Scalars["Boolean"]["input"]>;
  name: Scalars["String"]["input"];
};

export type UpdateZoneInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  defaultTax?: InputMaybe<Scalars["Boolean"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  kind?: InputMaybe<Scalars["String"]["input"]>;
  name: Scalars["String"]["input"];
  pup?: InputMaybe<Scalars["Boolean"]["input"]>;
  websiteId: Scalars["ID"]["input"];
  zonableIds?: InputMaybe<Array<Scalars["ID"]["input"]>>;
};

export type UploadArticleImageInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  file?: InputMaybe<Scalars["Upload"]["input"]>;
  id: Scalars["ID"]["input"];
  url?: InputMaybe<Scalars["String"]["input"]>;
};

export type UploadProductStageInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  svg: Scalars["Upload"]["input"];
};

export type UploadSegmentWhiteListInput = {
  attachment?: InputMaybe<Scalars["Upload"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  options?: InputMaybe<Scalars["JSON"]["input"]>;
};

export type UseCouponInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type UseGiftCardInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  clientVendorId?: InputMaybe<Scalars["ID"]["input"]>;
  code: Scalars["String"]["input"];
};

export type UseLoyaltyCardInput = {
  amount: Scalars["Float"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  orderId: Scalars["ID"]["input"];
};

export type UsePosGiftCardInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code: Scalars["String"]["input"];
  orderNumber: Scalars["String"]["input"];
};

export type UsePosVoucherInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code: Scalars["String"]["input"];
  comment: Scalars["String"]["input"];
  orderNumber: Scalars["String"]["input"];
};

export type UseStoreCreditByIdInput = {
  amount: Scalars["Float"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["String"]["input"];
};

export type UseStoreCreditInput = {
  amount?: InputMaybe<Scalars["Float"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  number?: InputMaybe<Scalars["String"]["input"]>;
  token?: InputMaybe<Scalars["String"]["input"]>;
};

export type UseUserTokenQrInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type UseVoucherInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code: Scalars["String"]["input"];
  number?: InputMaybe<Scalars["String"]["input"]>;
  params?: InputMaybe<Scalars["JSON"]["input"]>;
  token?: InputMaybe<Scalars["String"]["input"]>;
};

export type VerifyCardInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  otp: Scalars["String"]["input"];
};

export type VerifyLoginInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  login: Scalars["String"]["input"];
  overwrite?: InputMaybe<Scalars["Boolean"]["input"]>;
  token: Scalars["String"]["input"];
};

export type VerifyMnCitizenIdentityInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  file: Scalars["Upload"]["input"];
  type: PassportFile | `${PassportFile}`;
};

export type VerifyPaymentInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  params: Scalars["JSON"]["input"];
};

export type VerifyShipmentPinCodeInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  orderId: Scalars["ID"]["input"];
  pinCode: Scalars["String"]["input"];
};

export type VerifyWalletInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  firstName: Scalars["String"]["input"];
  lastName: Scalars["String"]["input"];
  passport: Scalars["Upload"]["input"];
  passportBack: Scalars["Upload"]["input"];
  registerNum: Scalars["String"]["input"];
  selfie: Scalars["Upload"]["input"];
};

export type VerifyWalletWithdrawInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
  verificationCode: Scalars["String"]["input"];
};

export type ViewTrackInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  listingId?: InputMaybe<Scalars["ID"]["input"]>;
  productId?: InputMaybe<Scalars["ID"]["input"]>;
  slug?: InputMaybe<Scalars["String"]["input"]>;
};

export type VoidPaymentInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type VoidWalletTransactionInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  id: Scalars["ID"]["input"];
};

export type WalletTransactionInput = {
  amount: Scalars["Float"]["input"];
  bonus?: InputMaybe<Scalars["Float"]["input"]>;
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  walletId: Scalars["ID"]["input"];
};

export type WalletWithdrawInput = {
  amount: Scalars["Float"]["input"];
  bankId: Scalars["ID"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  description?: InputMaybe<Scalars["String"]["input"]>;
  walletId?: InputMaybe<Scalars["ID"]["input"]>;
};

export type WishlistActionInput = {
  action: Scalars["String"]["input"];
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  params?: InputMaybe<Scalars["JSON"]["input"]>;
  sku: Array<Scalars["String"]["input"]>;
  websiteId: Scalars["ID"]["input"];
};

export type ZaryBoxInput = {
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>;
  code?: InputMaybe<Scalars["String"]["input"]>;
};
